{
  "openapi": "3.0.1",
  "info": {
    "title": "Web Viewer REST API",
    "description": "# Introduction\n\nThis specification covers the REST API provided by the Web Viewer product.\n\nThis API specification is documented using the [OpenAPI](https://swagger.io/specification/) format.\n\n# API Versioning\n\nAll the public API operations are provided on versioned endpoints. The endpoint version\nidentifiers (e.g., `v1`) only contain the major version of the API to allow separation of\nincompatible operation versions.\n\n# Data Formats\n\nAll structured input and output objects use the [JSON](https://www.json.org/json-en.html)\ndata-interchange format.\n\nAll character-based values are encoded using the UTF-8 variable-width character encoding and\nfollow the JSON specification, notably with regard to escape sequence rules.\n\nRefer to [RFC 3629](https://tools.ietf.org/html/rfc3629),\n[Unicode 11.0.0](https://www.unicode.org/versions/Unicode11.0.0/), and the\n[JSON specification](https://www.ecma-international.org/publications-and-standards/standards/ecma-404/)\nfor more details.\n\nSome string values are further constrained by an explicit format specification.\nThose format specification are described in the following subsections.\n\n## Base64-encoded value\n\nCertain values used in the specification use base64 encoding and given that they are sometimes\nused directly in the URL all such values follow the\n[RFC 4648 ยง5](https://tools.ietf.org/html/rfc4648#section-5) alphabet for URL and filename\nsafety. (Notably using `_` and `-` for values 62, 63 respectively.)\n\nExample: `UkVQT1JU`\n\nWithin the specification the `byte` format identifies these constraints.\n\n---\n",
    "contact": {
      "name": "Broadcom Support Portal",
      "url": "https://support.broadcom.com"
    },
    "license": {
      "name": "Commercial License",
      "url": "https://techdocs.broadcom.com/us/licensing/license-agreements.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "User documentation",
    "url": "https://techdocs.broadcom.com/content/broadcom/techdocs/us/en/ca-mainframe-software/traditional-management/web-viewer/14-0.html"
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication operations."
    },
    {
      "name": "System Information",
      "description": "System information operations."
    },
    {
      "name": "Repository Users",
      "description": "Repository user operations."
    },
    {
      "name": "Repositories",
      "description": "Repository operations."
    },
    {
      "name": "Repository Groups",
      "description": "Repository group operations."
    },
    {
      "name": "Reports",
      "description": "Report operations."
    },
    {
      "name": "Report Data",
      "description": "Report data operations."
    },
    {
      "name": "Report Actions",
      "description": "Report actions."
    },
    {
      "name": "Cross-report Indexes",
      "description": "Cross-report index operations."
    },
    {
      "name": "Report Indexes",
      "description": "Report index operations."
    },
    {
      "name": "Export Rule Storage",
      "description": "Export rule storage."
    }
  ],
  "paths": {
    "/v1/view/user/{repositoryId}": {
      "get": {
        "tags": [
          "Repository Users"
        ],
        "summary": "Get list of repository users",
        "description": "Request a list of user definitions for a specific repository.",
        "operationId": "list-repository-users",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User id filter.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "User id filter.",
              "default": "*"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User list sent if status is \"SUCCESS\". If status is \"ERROR\" then see messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryUserListResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "put": {
        "tags": [
          "Repository Users"
        ],
        "summary": "Update repository user settings",
        "description": "Updates User Mode and/or Distribution ID of the repository user.",
        "operationId": "update-repository-user",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ". If status is \"SUCCESS\" then the update was successful. If status is \"ERROR\" then see messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryUserUpdateResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/exportRules/{reportId}/{ruleId}": {
      "get": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Get export rule details.",
        "description": "Get export rule details.",
        "operationId": "get-export-rule-details",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report ID. Wildcards are not allowed. If any special characters are included the value has to be encoded using URL-safe base64 encoding (see RFC 4648 section 5) and the reportIdEncoded parameter has to be set to true. The use of unencoded report ID is deprecated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "Rule identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportIdEncoded",
            "in": "query",
            "description": "Indicates whether the reportId parameter value was base64 encoded. Note that in the future this parameter will be removed and the value will always be expected encoded.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Export rule details are being sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportGetRuleDetailsResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "put": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Updates export rule.",
        "description": "Updates export rule.",
        "operationId": "update-export-rule",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report ID. Wildcards are not allowed. If any special characters are included the value has to be encoded using URL-safe base64 encoding (see RFC 4648 section 5) and the reportIdEncoded parameter has to be set to true. The use of unencoded report ID is deprecated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "Rule identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportIdEncoded",
            "in": "query",
            "description": "Indicates whether the reportId parameter value was base64 encoded. Note that in the future this parameter will be removed and the value will always be expected encoded.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRuleModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Export rule updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportGetRuleDetailsResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Deletes export rule.",
        "description": "Deletes export rule.",
        "operationId": "delete-export-rule",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report ID. Wildcards are not allowed. If any special characters are included the value has to be encoded using URL-safe base64 encoding (see RFC 4648 section 5) and the reportIdEncoded parameter has to be set to true. The use of unencoded report ID is deprecated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "Rule identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportIdEncoded",
            "in": "query",
            "description": "Indicates whether the reportId parameter value was base64 encoded. Note that in the future this parameter will be removed and the value will always be expected encoded.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export rule deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportDeleteRuleResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/repositoryGroup": {
      "get": {
        "tags": [
          "Repository Groups"
        ],
        "summary": "Get list of repository groups.",
        "description": "List repository groups with or without sorting.",
        "operationId": "list-repository-groups",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Limits the result to repository groups that match the name. Wildcards are permitted.\n\n**Note**: The default value is a percent sign (%) which lets you retrieve all repository groups.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limits the result to repository groups that match the name. Wildcards are permitted.\n\n**Note**: The default value is a percent sign (%) which lets you retrieve all repository groups.",
              "default": "%"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Limits the result to the unique repository group id.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limits the result to the unique repository group id.",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the search results. Can be sorted by: id, name, or description.\n\n**Note**: If you add a dash \"-\" to the value, the sort order descends. For example, you enter \"name-\" to sort by descending name.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sorts the search results. Can be sorted by: id, name, or description.\n\n**Note**: If you add a dash \"-\" to the value, the sort order descends. For example, you enter \"name-\" to sort by descending name.",
              "enum": [
                "id",
                "id-",
                "name",
                "name-",
                "description",
                "description-"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the maximum number of repository groups that you want to return with this search.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Limits the maximum number of repository groups that you want to return with this search.",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offsets the number of records that the search skips before it returns repository groups.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Offsets the number of records that the search skips before it returns repository groups.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of repository groups.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryGroupListResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "post": {
        "tags": [
          "Repository Groups"
        ],
        "summary": "Add or update repository group.",
        "description": "Add or update a specific repository group.",
        "operationId": "add-update-repository-group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryGroupAddUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Repository group successfully created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryGroupResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Repository Groups"
        ],
        "summary": "Delete repository group.",
        "description": "Delete a specific repository group.",
        "operationId": "delete-repository-group",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Identifier of repository group to be deleted.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Identifier of repository group to be deleted.",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Repository group name. Only used for information (logging) purposes.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Repository group successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryGroupDeleteResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/rptdata/{repositoryId}/{reportHandle}": {
      "get": {
        "tags": [
          "Report Data"
        ],
        "summary": "Get text report data.",
        "description": "Get text report data including metadata for a specific report view.",
        "operationId": "get-text-report-data",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selNotes",
            "in": "query",
            "description": "Specifies that you want annotations returned with the data records.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Specifies that you want annotations returned with the data records.",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          },
          {
            "name": "selXFrm",
            "in": "query",
            "description": "Specifies that you want the report transformed before sending over the records.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Specifies that you want the report transformed before sending over the records.",
              "default": "N",
              "enum": [
                "Y",
                "N"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Specifies the maximum number of records that you want to return with this search. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the maximum number of records that you want to return with this search. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          },
          {
            "name": "record",
            "in": "query",
            "description": "Returns data from the specific starting record within the report.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Returns data from the specific starting record within the report.",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Returns data from the specific starting page within the report.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Returns data from the specific starting page within the report.",
              "format": "int32"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Specifies a search string. Only lines containing the search string are returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCaseSensitive",
            "in": "query",
            "description": "Specifies search case sensitivity. Specify true for case-sensitive search, false for case-insensitive.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Specifies search case sensitivity. Specify true for case-sensitive search, false for case-insensitive.",
              "default": true
            }
          },
          {
            "name": "searchColumnFrom",
            "in": "query",
            "description": "Specifies the column number of the first column to search.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Specifies the column number of the first column to search.",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "searchColumnTo",
            "in": "query",
            "description": "Specifies the column number of the last column to search. Zero (0) specifies search to end.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the column number of the last column to search. Zero (0) specifies search to end.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specifies the View filter name that you want to apply to the specified report.",
            "required": false,
            "schema": {
              "maxLength": 8,
              "type": "string",
              "description": "Specifies the View filter name that you want to apply to the specified report."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns report data if status is \"SUCCESS\", otherwise review message for cause of failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDataResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "post": {
        "tags": [
          "Report Data"
        ],
        "summary": "Get binary report data.",
        "description": "Get report data for a specific report in binary format. If retrieval of the report data fails, the response content type is set to 'text/plain' and any error messages are included one entry per line in the response body.",
        "operationId": "get-binary-report-data",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Specifies the filename of the report. Included in the Content-Disposition response header.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Specifies the filename of the report. Included in the Content-Disposition response header.",
              "default": "ReportData"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Specifies the file type of the report when you transfer the file (type from report list request is preferred). Influences the value of the Content-Type response header.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Specifies the file type of the report when you transfer the file (type from report list request is preferred). Influences the value of the Content-Type response header.",
              "default": "text"
            }
          },
          {
            "name": "transform",
            "in": "query",
            "description": "Indicates whether transformation of AFP or Metadata report data to PDF should be done. Only applicable if transformation is enabled in the configuration.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates whether transformation of AFP or Metadata report data to PDF should be done. Only applicable if transformation is enabled in the configuration.",
              "default": true
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns binary report data.",
            "headers": {
              "Content-Disposition": {
                "description": "Content disposition with values based on request parameters.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "text/html": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/msword": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.ms-powerpoint": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/vnd.ibm.modcap": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "image/bmp": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "video/mp4": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<report data>"
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/rptdata/export/{repositoryId}/{reportHandle}": {
      "post": {
        "tags": [
          "Report Actions"
        ],
        "summary": "Use this operation to export report data.",
        "description": "Export report data in the configured file format: Office Open XML or Microsoft Office XML. If retrieval of the report data fails, the response content type is set to 'text/plain' and any error messages are included one entry per line in the response body.",
        "operationId": "export-report",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleSpecification",
            "in": "query",
            "description": "Specifies properties that control how a report is exported to a spreadsheet format. See Export Rule Storage for more information about ruleSpecification. For example, `{\"delimiters\":{\"breakOnSpace\":true,\"consecDelimAsOne\":true}}`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Specifies the set of report pages to export. This can be a list of values and/or ranges of values, separated by commas. For example, 1,4-7,9. If unspecified, all pages are included. If the upper limit of a page range is higher than the last retrievable page, the upper limit is replaced by the last retrievable page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileBaseName",
            "in": "query",
            "description": "Specify the base filename for the Content-Disposition header to suggest as the exported report filename. If unspecified, the report name is used. The file extension is automatically determined by the configured export format. For example, if you specify the value \"FinanceLog\", the suggested file name will be \"FinanceLog.xlsx\".",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specifies the View filter name that you want to apply to the specified report.",
            "required": false,
            "schema": {
              "maxLength": 8,
              "type": "string",
              "description": "Specifies the View filter name that you want to apply to the specified report."
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The request was not authenticated."
          },
          "500": {
            "description": "The request failed because of an internal application error."
          },
          "200": {
            "description": "Report data exported successfully.",
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string"
                },
                "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?mso-application progid=\"Excel.Sheet\"?>\n<Workbook ...>...</Workbook>\n"
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<binary data>"
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information."
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges."
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/repository": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "summary": "Get list of repositories.",
        "description": "List repositories with or without sorting. Only repositories accessible to the authenticated user are returned.",
        "operationId": "list-repositories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Repository name filter.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Repository name filter.",
              "default": "%"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Repository identifier filter.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Repository identifier filter.",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorts the search results. Can be sorted by: id, name, or description.\n\n**Note**: If you add a dash \"-\" to the value, the sort order descends. For example, you enter \"name-\" to sort by descending name.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sorts the search results. Can be sorted by: id, name, or description.\n\n**Note**: If you add a dash \"-\" to the value, the sort order descends. For example, you enter \"name-\" to sort by descending name.",
              "enum": [
                "id",
                "id-",
                "name",
                "name-",
                "description",
                "description-"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the maximum number of repositories that you want to return with this search.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Limits the maximum number of repositories that you want to return with this search.The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offsets the number of records that the search skips before it returns repositories.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Offsets the number of records that the search skips before it returns repositories.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of repositories retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryListResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "post": {
        "tags": [
          "Repositories"
        ],
        "summary": "Add or update repository.",
        "description": "Add or update a specific repository definition.",
        "operationId": "add-update-repository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAddUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Repository definition successfully created or updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Repositories"
        ],
        "summary": "Delete a repository definition.",
        "description": "Delete a specific repository definition.",
        "operationId": "delete-repository",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Identifier of repository to be deleted.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "description": "Identifier of repository to be deleted.",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Repository name. Only used for information (logging) purposes.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The request failed because the authenticated user did not have the required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Repository definition successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log out",
        "description": "Log out a user. Log out should be the last call to the API as the session token (guid) is no longer valid after the user is logged out.\n\n**Note**: If a log out call is not made, the session token will time out if no API calls are made within the expiration period.",
        "operationId": "logout",
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error."
          },
          "200": {
            "description": "Log out completed successfully."
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log in",
        "description": "Log in a user. Should be the first call to the API as the session token (guid) is required by most other API operations. When the session token is no longer needed, use the log out operation to end the session.\n\n**Note**: If a log out call is not made, the session token will time out if no API calls are made within the expiration period.",
        "operationId": "login",
        "parameters": [
          {
            "name": "groupName",
            "in": "query",
            "description": "Specifies the repository group name that will be used for this session. If groupId is also specified, then groupName is ignored. If neither groupId nor groupName is specified, then the default repository group defined by the administrator is used for the session.",
            "required": false,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "type": "string",
              "description": "Specifies the repository group name that will be used for this session. If groupId is also specified, then groupName is ignored. If neither groupId nor groupName is specified, then the default repository group defined by the administrator is used for the session.",
              "default": "%"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Specifies the repository group id that will be used for this session. If neither groupId nor groupName is specified, then the default repository group defined by the administrator is used for the session.",
            "required": false,
            "schema": {
              "minimum": -1,
              "type": "integer",
              "description": "Specifies the repository group id that will be used for this session. If neither groupId nor groupName is specified, then the default repository group defined by the administrator is used for the session.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Log in completed successfully.",
            "headers": {
              "guid": {
                "description": "Session token.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v1/view/exportRules/{reportId}": {
      "get": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Get all available export rules for a report.",
        "description": "Returns a list of the available export rules for a specified reportId. This list includes every rule that authenticated users can access. For users, this list includes their private rules and all public rules. For administrators, this list includes the private rules of all users and all public rules.",
        "operationId": "list-report-export-rules",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report ID. Wildcards are not allowed. If any special characters are included the value has to be encoded using URL-safe base64 encoding (see RFC 4648 section 5) and the reportIdEncoded parameter has to be set to true. The use of unencoded report ID is deprecated.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "UkVQT1JU"
          },
          {
            "name": "reportIdEncoded",
            "in": "query",
            "description": "Indicates whether the reportId parameter value was base64 encoded. Note that in the future this parameter will be removed and the value will always be expected encoded.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Export rules list is being sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportReportRulesResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      },
      "post": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Create export rule.",
        "description": "Create export rule.",
        "operationId": "create-export-rule",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report ID. Wildcards are not allowed. If any special characters are included the value has to be encoded using URL-safe base64 encoding (see RFC 4648 section 5) and the reportIdEncoded parameter has to be set to true. The use of unencoded report ID is deprecated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportIdEncoded",
            "in": "query",
            "description": "Indicates whether the reportId parameter value was base64 encoded. Note that in the future this parameter will be removed and the value will always be expected encoded.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRuleModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Export rule created (saved).",
            "headers": {
              "Location": {
                "description": "Identifies the absolute URL of the newly created export rule.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportCreateRuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/changePassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change Password",
        "description": "Change a user's password.",
        "operationId": "change-password",
        "parameters": [
          {
            "name": "newPass",
            "in": "header",
            "description": "Specifies the new password (in Base64). Must not be blank.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation attempted and there were no system errors. See response body for results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v1/view/rptlist/{repositoryId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report list.",
        "description": "Get a list of reports from a specific repository.",
        "operationId": "list-reports",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "arcDateFrom",
            "in": "query",
            "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "arcDateTo",
            "in": "query",
            "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
              "format": "int64",
              "default": 253402300799999
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Report name filter.",
            "required": false,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "Report name filter.",
              "default": "*"
            }
          },
          {
            "name": "preVersNum",
            "in": "query",
            "description": "Number of report versions to return.",
            "required": false,
            "schema": {
              "maximum": 32767,
              "minimum": 0,
              "type": "integer",
              "description": "Number of report versions to return.",
              "format": "int32",
              "default": 32767
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The requested resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of reports.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportListResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/rptdata/download/{repositoryId}/{reportHandle}": {
      "get": {
        "tags": [
          "Report Actions"
        ],
        "summary": "Use this operation to download report data.",
        "description": "Sends (optionally filtered) report data back as an octet stream to be saved by the user agent. If retrieval of the report data fails, the response content type is set to 'text/plain' and any error messages are included one entry per line in the response body.",
        "operationId": "download-report",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Suggests a filename for the downloaded report data using the Content-Disposition header.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Suggests a filename for the downloaded report data using the Content-Disposition header.",
              "default": "ReportData.{Type}"
            }
          },
          {
            "name": "convertToPdf",
            "in": "query",
            "description": "Specifies whether the text report will be converted into a PDF file when downloaded. If a report is downloaded that is not a native text report, then this value is ignored and no conversion happens.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Specifies whether the text report will be converted into a PDF file when downloaded. If a report is downloaded that is not a native text report, then this value is ignored and no conversion happens.",
              "default": false
            }
          },
          {
            "name": "pageOrientation",
            "in": "query",
            "description": "Specifies the page orientation for a text report converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Specifies the page orientation for a text report converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
              "default": "PORTRAIT"
            }
          },
          {
            "name": "fontSize",
            "in": "query",
            "description": "Specifies the font size for a text report converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "string",
              "description": "Specifies the font size for a text report converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
              "default": "12"
            }
          },
          {
            "name": "greenBar",
            "in": "query",
            "description": "Specifies whether the text report will contain a green-bar background when converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Specifies whether the text report will contain a green-bar background when converted to PDF. If convertToPdf is false or the report is not a native text report, then this value is ignored.",
              "default": false
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Suggests a type of report.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Suggests a type of report.",
              "default": "text"
            }
          },
          {
            "name": "pages",
            "in": "query",
            "description": "Indicates the set of pages to be included. This set can include individual values, and hyphenated ranges of values, separated by commas. An empty string is the default value and indicates the inclusion of all pages. For non-text reports, this parameter is ignored. If the upper limit of a page range is higher than the last retrievable page, the upper limit is replaced by the last retrievable page.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specifies the View filter name that you want to apply to the specified report.",
            "required": false,
            "schema": {
              "maxLength": 8,
              "type": "string",
              "description": "Specifies the View filter name that you want to apply to the specified report."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report data is being sent.",
            "headers": {
              "Content-Disposition": {
                "description": "Content disposition with filename based on request parameters.",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "<binary data>"
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/report/{repositoryId}/{reportHandle}/{nameHandle}/values": {
      "get": {
        "tags": [
          "Report Indexes"
        ],
        "summary": "Get report index values.",
        "description": "Allows you to retrieve a set of, optionally filtered, report index values.",
        "operationId": "list-report-index-values",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameHandle",
            "in": "path",
            "description": "Cross-report index name handle.",
            "required": true,
            "schema": {
              "maxLength": 88,
              "minLength": 88,
              "type": "string"
            }
          },
          {
            "name": "valueFilter",
            "in": "query",
            "description": "Index value filters. Up to 8 items can be specified.",
            "required": false,
            "schema": {
              "maxItems": 8,
              "type": "array",
              "description": "Index value filters. Up to 8 items can be specified.",
              "items": {
                "maxLength": 252,
                "minLength": 1,
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of report index values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportIndexValuesResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/report/{repositoryId}/{reportHandle}/logicalViews": {
      "get": {
        "tags": [
          "Report Indexes"
        ],
        "summary": "Get logical views of a report.",
        "description": "You can retrieve multiple logical views of a report.",
        "operationId": "list-report-logical-views",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of logical views of a report.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLogicalViewsResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/report/{repositoryId}/{reportHandle}/information": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report information.",
        "description": "Allows you to retrieve information about a native or logical view of a report.",
        "operationId": "get-report-information",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeBasic",
            "in": "query",
            "description": "Indicates whether the basic section is to be included in the response. **Note**: At least one section has to be requested.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates whether the basic section is to be included in the response. **Note**: At least one section has to be requested.",
              "default": true
            }
          },
          {
            "name": "includeRelatedHandles",
            "in": "query",
            "description": "Indicates whether the related handles section is to be included in the response. **Note**: At least one section has to be requested.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates whether the related handles section is to be included in the response. **Note**: At least one section has to be requested.",
              "default": false
            }
          },
          {
            "name": "includeLogicalViewData",
            "in": "query",
            "description": "Indicates whether the logical view data section is to be included in the response. This section will be included only if the input report handle identifies a logical view. **Note**: At least one section has to be requested.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates whether the logical view data section is to be included in the response. This section will be included only if the input report handle identifies a logical view. **Note**: At least one section has to be requested.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about the report.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInformationResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/report/{repositoryId}/{reportHandle}/indexes": {
      "get": {
        "tags": [
          "Report Indexes"
        ],
        "summary": "Get report index names.",
        "description": "Allows you to retrieve a set of, optionally filtered, report index names.",
        "operationId": "list-report-index-names",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportHandle",
            "in": "path",
            "description": "Report handle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameFilter",
            "in": "query",
            "description": "Index name filters. Up to 8 items can be specified.",
            "required": false,
            "schema": {
              "maxItems": 8,
              "type": "array",
              "description": "Index name filters. Up to 8 items can be specified.",
              "items": {
                "maxLength": 8,
                "minLength": 1,
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of report indexes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportIndexNamesResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/locales": {
      "get": {
        "tags": [
          "System Information"
        ],
        "summary": "List supported locales.",
        "description": "Lists all locales supported by the product.",
        "operationId": "list-locales",
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error."
          },
          "200": {
            "description": "Locales retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocaleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/view/index/{repositoryId}/{nameHandle}/{valueHandle}/reports": {
      "get": {
        "tags": [
          "Cross-report Indexes"
        ],
        "summary": "Get reports containing a cross-report index value.",
        "description": "Allows you to retrieve a set of reports containing a cross-report index value.",
        "operationId": "list-cross-report-index-reports",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameHandle",
            "in": "path",
            "description": "Cross-report index name handle.",
            "required": true,
            "schema": {
              "maxLength": 88,
              "minLength": 88,
              "type": "string"
            },
            "example": "5cXVxNbZQEDi48HjxeJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA=="
          },
          {
            "name": "valueHandle",
            "in": "path",
            "description": "Cross-report index value handle.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            },
            "example": "AAAADsHV6EDi5NfX0bhAw9ZLAAAACOjW0tbIwdTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
            "required": false,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
              "default": "*"
            }
          },
          {
            "name": "arcDateFrom",
            "in": "query",
            "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "arcDateTo",
            "in": "query",
            "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
              "format": "int64",
              "default": 253402300799999
            }
          },
          {
            "name": "versNumFrom",
            "in": "query",
            "description": "Specifies the 'from' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for a version range in which to search reports.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "versNumTo",
            "in": "query",
            "description": "Specifies the 'to' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for a version range in which to search reports.",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "name": "onlineOnly",
            "in": "query",
            "description": "Limits search to reports that are currently available on disk.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Limits search to reports that are currently available on disk.",
              "default": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of reports containing a cross-report index value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossReportIndexValueReportsResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/index/{repositoryId}/{nameHandle}/values": {
      "get": {
        "tags": [
          "Cross-report Indexes"
        ],
        "summary": "Get cross-report index values.",
        "description": "Allows you to retrieve a set of, optionally filtered, cross-report index values.",
        "operationId": "list-cross-report-index-values",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nameHandle",
            "in": "path",
            "description": "Cross-report index name handle.",
            "required": true,
            "schema": {
              "maxLength": 88,
              "minLength": 88,
              "type": "string"
            },
            "example": "5cXVxNbZQEDi48HjxeJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA=="
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
            "required": false,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
              "default": "*"
            }
          },
          {
            "name": "arcDateFrom",
            "in": "query",
            "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "arcDateTo",
            "in": "query",
            "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
              "format": "int64",
              "default": 253402300799999
            }
          },
          {
            "name": "versNumFrom",
            "in": "query",
            "description": "Specifies the 'from' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for a version range in which to search reports.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "versNumTo",
            "in": "query",
            "description": "Specifies the 'to' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for a version range in which to search reports.",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "name": "onlineOnly",
            "in": "query",
            "description": "Limits search to reports that are currently available on disk.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Limits search to reports that are currently available on disk.",
              "default": true
            }
          },
          {
            "name": "valueFilter",
            "in": "query",
            "description": "Index value filters. Up to 8 items can be specified.",
            "required": false,
            "schema": {
              "maxItems": 8,
              "type": "array",
              "description": "Index value filters. Up to 8 items can be specified.",
              "items": {
                "maxLength": 252,
                "minLength": 1,
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Returns a list of cross-report index values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossReportIndexValuesResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/index/{repositoryId}": {
      "get": {
        "tags": [
          "Cross-report Indexes"
        ],
        "summary": "Get cross-report index names.",
        "description": "Allows you to retrieve a set of, optionally filtered, cross-report index names.",
        "operationId": "list-cross-report-index-names",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "description": "Repository identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
            "required": false,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "Specifies the name of the report(s) that you want to include in the search. Wildcard characters are supported.",
              "default": "*"
            }
          },
          {
            "name": "arcDateFrom",
            "in": "query",
            "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be lower or equal to the arcDateTo value.",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "arcDateTo",
            "in": "query",
            "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
            "required": false,
            "schema": {
              "maximum": 253402300799999,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for an archival date range in which to search reports. The value is the number of milliseconds since the Unix epoch and interpreted as the date within the target repository. The time and timezone portion of the value is ignored. The value has to be higher or equal to the arcDateFrom value.",
              "format": "int64",
              "default": 253402300799999
            }
          },
          {
            "name": "versNumFrom",
            "in": "query",
            "description": "Specifies the 'from' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'from' value for a version range in which to search reports.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "versNumTo",
            "in": "query",
            "description": "Specifies the 'to' value for a version range in which to search reports.",
            "required": false,
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Specifies the 'to' value for a version range in which to search reports.",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "name": "onlineOnly",
            "in": "query",
            "description": "Limits search to reports that are currently available on disk.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Limits search to reports that are currently available on disk.",
              "default": true
            }
          },
          {
            "name": "nameFilter",
            "in": "query",
            "description": "Index name filters. Up to 8 items can be specified.",
            "required": false,
            "schema": {
              "maxItems": 8,
              "type": "array",
              "description": "Index name filters. Up to 8 items can be specified.",
              "items": {
                "maxLength": 8,
                "minLength": 1,
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first item to return.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The index of the first item to return.",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "The maximum number of items to return. The default value depends on the value of the corresponding *LIMIT configuration option.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of cross-report indexes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossReportIndexNamesResponse"
                }
              }
            }
          },
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/exportRules": {
      "get": {
        "tags": [
          "Export Rule Storage"
        ],
        "summary": "Get all available export rules.",
        "description": "Returns a list of all available export rules for reports. This list includes every rule that authenticated users can access. For users, this list includes their private rules and all public rules. For administrators, this list includes the private rules of all users and all public rules.",
        "operationId": "list-all-export-rules",
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Export rules list is being sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportRulesAllResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be fulfilled due to invalid or missing information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "guid": []
          }
        ]
      }
    },
    "/v1/view/charsets": {
      "get": {
        "tags": [
          "System Information"
        ],
        "summary": "List supported character sets.",
        "description": "Lists all character sets supported by the product.",
        "operationId": "list-character-sets",
        "responses": {
          "500": {
            "description": "The request failed because of an internal application error."
          },
          "200": {
            "description": "Character sets retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharsetResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserUpdateModel": {
        "type": "object",
        "properties": {
          "distId": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "Distribution id.",
            "example": "FINANCE"
          },
          "mode": {
            "type": "string",
            "description": "Display mode.",
            "example": "ALL",
            "enum": [
              "ALL",
              "EXPO",
              "EXP",
              "SARO",
              "SAR"
            ]
          }
        },
        "description": "Request body."
      },
      "Message": {
        "type": "object",
        "properties": {
          "shortText": {
            "type": "string",
            "description": "Short message text.",
            "example": "Repository does not exist"
          },
          "longText": {
            "type": "string",
            "description": "Long message text.",
            "example": "CAHVS0105E Requested repository XYZ not found."
          },
          "locale": {
            "type": "string",
            "description": "Message locale.",
            "example": "en-US"
          }
        },
        "description": "Response message."
      },
      "RepositoryUserUpdateResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/RepositoryUserUpdateResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Repository user update."
      },
      "RepositoryUserUpdateResult": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Display mode.",
            "example": "ALL"
          },
          "distId": {
            "type": "string",
            "description": "Distribution id.",
            "example": "FINANCE"
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ErrorResponseResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ErrorResponseResult": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          }
        }
      },
      "ColumnDetail": {
        "type": "object",
        "properties": {
          "index": {
            "maximum": 512,
            "minimum": 0,
            "type": "integer",
            "description": "Zero-based index that identifies the column to which this column detail applies.",
            "format": "int32"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Column name."
          },
          "format": {
            "type": "string",
            "description": "Column format. If the format is SKIP, then no column is generated.",
            "example": "GENERAL",
            "enum": [
              "GENERAL",
              "TEXT",
              "DATE",
              "NUMBER",
              "SKIP"
            ]
          },
          "dateFormat": {
            "type": "string",
            "description": "Date format.",
            "example": "LONG",
            "enum": [
              "FULL",
              "LONG",
              "MEDIUM",
              "SHORT"
            ]
          },
          "locale": {
            "type": "string",
            "description": "Specifies the formatting convention in a region.",
            "example": "en-US"
          },
          "numDecimalPlaces": {
            "maximum": 128,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the position of a decimal point in a number.",
            "format": "int32",
            "example": 2
          }
        },
        "description": "Column properties that apply to generated columns. If a generated column does not have a matching column definition, then the DEFAULT format is used."
      },
      "Delimiters": {
        "type": "object",
        "properties": {
          "breakOnTab": {
            "type": "boolean",
            "description": "Use a tab as a delimiter.",
            "default": false
          },
          "breakOnSpace": {
            "type": "boolean",
            "description": "Use a blank space as a delimiter.",
            "default": false
          },
          "breakOnComma": {
            "type": "boolean",
            "description": "Use a comma as a delimiter.",
            "default": false
          },
          "breakOnSemicolon": {
            "type": "boolean",
            "description": "Use a semicolon as a delimiter.",
            "default": false
          },
          "breakOnChar": {
            "maxLength": 1,
            "type": "string",
            "description": "Use any single character as a delimiter. For example, if you specify \":\", then the line \"ABC:123\" breaks into the following columns: ABC, 123.",
            "example": "|"
          },
          "consecDelimAsOne": {
            "type": "boolean",
            "description": "Treat consecutive delimiters as a single delimiter. If set to true, a single column is created for any number of consecutive delimiters. If set to false, one column is created for each delimiter.",
            "default": false
          }
        },
        "description": "A delimiter indicates where there are columns in the report. If you specify delimiters, you must specify at least one delimiter. You must specify either fixedColumns or delimiters."
      },
      "ExportRuleModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Rule name.",
            "example": "Finance Export"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Rule description.",
            "example": "Export for the bi-weekly finance report."
          },
          "publicAccess": {
            "type": "boolean",
            "description": "Specification for rule access. True specifies a public rule; false specifies a private rule."
          },
          "ruleSpecification": {
            "$ref": "#/components/schemas/RuleSpecification"
          }
        },
        "description": "Request body."
      },
      "RuleSpecification": {
        "type": "object",
        "properties": {
          "fixedColumns": {
            "maxItems": 512,
            "type": "array",
            "description": "List of integers where the value of each integer indicates the position of a column break. A column break before the first column is assumed. You must specify either fixedColumns or delimiters.",
            "example": [
              1,
              10,
              17
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "delimiters": {
            "$ref": "#/components/schemas/Delimiters"
          },
          "includeOnlyLinesWith": {
            "maxLength": 255,
            "type": "string",
            "description": "Specifies a string of text to include only the lines that contain that text.",
            "example": "A"
          },
          "excludeLinesContaining": {
            "maxLength": 255,
            "type": "string",
            "description": "Specifies a string of text to exclude the lines that contain that text.",
            "example": "B"
          },
          "excludeBlankLines": {
            "type": "boolean",
            "description": "Specifies whether to exclude all blank lines in a report.",
            "default": false
          },
          "skipLinesTop": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of lines to skip from the top of each page in a report.",
            "format": "int32",
            "default": 0
          },
          "skipLinesBottom": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of lines to skip from the bottom of each page in a report.",
            "format": "int32",
            "default": 0
          },
          "createColumnHeaders": {
            "type": "boolean",
            "description": "If true a header with a name for each column is created.",
            "default": false
          },
          "columnDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnDetail"
            }
          }
        },
        "description": "Specification for converting the report content to spreadsheet format. Choose to split the content with either predefined column breaks (see fixedColumns) or a set of characters specified as column delimiters (see delimiters). Optionally you can choose which lines to include or exclude."
      },
      "ExportGetRuleDetailsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ExportGetRuleDetailsResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Export rule details."
      },
      "ExportGetRuleDetailsResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExportRuleWithoutOwner"
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "reportId": {
            "type": "string",
            "description": "Value of the reportId request parameter or its default value.",
            "deprecated": true
          },
          "ruleId": {
            "type": "string",
            "description": "Value of the ruleId request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "ExportRuleSpecification": {
        "type": "object",
        "properties": {
          "fixedColumns": {
            "maxItems": 512,
            "type": "array",
            "description": "List of integers where the value of each integer indicates the position of a column break. A column break before the first column is assumed.",
            "example": [
              1,
              10,
              17
            ],
            "items": {
              "minimum": 0,
              "type": "integer",
              "description": "The position of a column break.",
              "format": "int32"
            }
          },
          "delimiters": {
            "$ref": "#/components/schemas/ExportRuleSpecificationDelimiters"
          },
          "includeOnlyLinesWith": {
            "type": "string",
            "description": "Specifies a string of text to include only the lines that contain that text."
          },
          "excludeLinesContaining": {
            "type": "string",
            "description": "Specifies a string of text to exclude the lines that contain that text."
          },
          "excludeBlankLines": {
            "type": "boolean",
            "description": "Specifies whether to exclude all blank lines in a report."
          },
          "skipLinesTop": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of lines to skip from the top of each page in a report.",
            "format": "int32"
          },
          "skipLinesBottom": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies the number of lines to skip from the bottom of each page in a report.",
            "format": "int32"
          },
          "createColumnHeaders": {
            "type": "boolean",
            "description": "If true a header with a name for each column is created."
          },
          "columnDetails": {
            "type": "array",
            "description": "Formatting to apply to the exported columns.",
            "items": {
              "$ref": "#/components/schemas/ExportRuleSpecificationColumnDetail"
            }
          }
        },
        "description": "Specification for converting the report content to spreadsheet format."
      },
      "ExportRuleSpecificationColumnDetail": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Zero-based index that identifies the column to which this column detail applies.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Column name."
          },
          "format": {
            "type": "string",
            "description": "Column format. If the format is SKIP, then no column is generated.",
            "example": "GENERAL",
            "enum": [
              "GENERAL",
              "TEXT",
              "DATE",
              "NUMBER",
              "SKIP"
            ]
          },
          "dateFormat": {
            "type": "string",
            "description": "Date format.",
            "example": "LONG",
            "enum": [
              "FULL",
              "LONG",
              "MEDIUM",
              "SHORT"
            ]
          },
          "locale": {
            "type": "string",
            "description": "Specifies the formatting convention in a region.",
            "example": "en-US"
          },
          "numDecimalPlaces": {
            "type": "integer",
            "description": "Specifies the position of a decimal point in a number.",
            "format": "int32",
            "example": 2
          }
        },
        "description": "Format to apply to a specific column."
      },
      "ExportRuleSpecificationDelimiters": {
        "type": "object",
        "properties": {
          "breakOnTab": {
            "type": "boolean",
            "description": "Use a tab as a delimiter."
          },
          "breakOnSpace": {
            "type": "boolean",
            "description": "Use a blank space as a delimiter."
          },
          "breakOnComma": {
            "type": "boolean",
            "description": "Use a comma as a delimiter."
          },
          "breakOnSemicolon": {
            "type": "boolean",
            "description": "Use a semicolon as a delimiter."
          },
          "breakOnChar": {
            "maxLength": 1,
            "type": "string",
            "description": "Use any single character as a delimiter. For example, if you specify \":\", then the line \"ABC:123\" breaks into the following columns: ABC, 123."
          },
          "consecDelimAsOne": {
            "type": "boolean",
            "description": "Treat consecutive delimiters as a single delimiter. If set to true, a single column is created for any number of consecutive delimiters. If set to false, one column is created for each delimiter."
          }
        },
        "description": "A delimiter indicates where there are columns in the report."
      },
      "ExportRuleWithoutOwner": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "integer",
            "description": "Rule identifier.",
            "format": "int32",
            "example": 7
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Rule name.",
            "example": "Finance Export"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Rule description.",
            "example": "Export for the bi-weekly finance report."
          },
          "publicAccess": {
            "type": "boolean",
            "description": "Specification for rule access. True specifies a public rule; false specifies a private rule."
          },
          "ruleSpecification": {
            "$ref": "#/components/schemas/ExportRuleSpecification"
          }
        },
        "description": "Export rule without owner."
      },
      "RepositoryGroupAddUpdateModel": {
        "required": [
          "description",
          "function",
          "name"
        ],
        "type": "object",
        "properties": {
          "function": {
            "type": "string",
            "description": "Function to execute.",
            "enum": [
              "add",
              "upd"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Repository group identifier. Used when updating an existing repository group.",
            "format": "int32",
            "example": 67
          },
          "name": {
            "type": "string",
            "description": "Repository group name.",
            "example": "Finance department"
          },
          "description": {
            "type": "string",
            "description": "Repository group description.",
            "example": "All finance department repositories."
          },
          "actions": {
            "type": "integer",
            "description": "Mask identifying enabled report actions.",
            "format": "int32",
            "example": 54
          },
          "repositoryList": {
            "type": "array",
            "description": "List of identifiers for repositories associated with the repository group.",
            "example": [
              10,
              27,
              95
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "Request body."
      },
      "RepositoryGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Repository group identifier.",
            "format": "int32",
            "example": 67
          },
          "groupName": {
            "type": "string",
            "description": "Repository group name.",
            "example": "Finance department"
          },
          "description": {
            "type": "string",
            "description": "Repository group description.",
            "example": "All finance department repositories."
          },
          "actions": {
            "type": "integer",
            "description": "Mask identifying enabled report actions. This property is included only if the request was authenticated.",
            "format": "int32",
            "example": 54
          },
          "createdBy": {
            "type": "string",
            "description": "User that defined the repository group. This property is included only if the request was authenticated.",
            "example": "janedoe"
          },
          "createdDateTime": {
            "type": "integer",
            "description": "Date and time the repository group was defined. Represents the number of milliseconds since the Unix epoch. This property is included only if the request was authenticated.",
            "format": "int64",
            "example": 1519987100512
          },
          "modifiedBy": {
            "type": "string",
            "description": "User that last modified the repository group. This property is included only if the request was authenticated.",
            "example": "janedoe"
          },
          "modifiedDateTime": {
            "type": "integer",
            "description": "Date and time the repository group was last modified. Represents the number of milliseconds since the Unix epoch. This property is included only if the request was authenticated.",
            "format": "int64",
            "example": 1548062261849
          },
          "repositoryCount": {
            "type": "integer",
            "description": "Number of repositories associated with the repository group. This property is included only if the request was authenticated.",
            "format": "int64",
            "example": 3
          },
          "repositoryList": {
            "type": "array",
            "description": "List of identifiers for repositories associated with the repository group. Only returned when filtering by name or id. This property is included only if the request was authenticated.",
            "example": [
              10,
              27,
              95
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "A repository group."
      },
      "RepositoryGroupResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/RepositoryGroup"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Result of repository group add, update, or delete operation."
      },
      "RepositoryAddUpdateModel": {
        "required": [
          "charset",
          "description",
          "function",
          "name",
          "path",
          "product"
        ],
        "type": "object",
        "properties": {
          "function": {
            "type": "string",
            "description": "Function to execute.",
            "enum": [
              "add",
              "upd"
            ]
          },
          "id": {
            "type": "integer",
            "description": "Repository identifier. Used when updating an existing repository.",
            "format": "int32",
            "example": 8
          },
          "name": {
            "type": "string",
            "description": "Repository name.",
            "example": "Card reports"
          },
          "description": {
            "type": "string",
            "description": "Repository description.",
            "example": "All credit card reports"
          },
          "path": {
            "type": "string",
            "description": "High-level qualifier for View database.",
            "example": "FINANCE.CARDS"
          },
          "product": {
            "type": "string",
            "description": "Product name.",
            "example": "VIEW"
          },
          "charset": {
            "type": "string",
            "description": "Repository character set.",
            "example": "IBM037"
          },
          "reportAccessPolicy": {
            "type": "string",
            "description": "Report access policy.",
            "example": "ONLINE_ONLY",
            "enum": [
              "ONLINE_ONLY",
              "EXPANDED_ACCESS_SERVER",
              "EXTERNAL_RECALL"
            ]
          }
        },
        "description": "Request body."
      },
      "Repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Repository identifier.",
            "format": "int32",
            "example": 8
          },
          "name": {
            "type": "string",
            "description": "Repository name.",
            "example": "Card reports"
          },
          "description": {
            "type": "string",
            "description": "Repository description.",
            "example": "All credit card reports"
          },
          "system": {
            "type": "string",
            "description": "System. Unused reserved parameter.",
            "deprecated": true
          },
          "system2": {
            "type": "string",
            "description": "System 2. Unused reserved parameter.",
            "deprecated": true
          },
          "path": {
            "type": "string",
            "description": "High-level qualifier for View database.",
            "example": "FINANCE.CARDS"
          },
          "product": {
            "type": "string",
            "description": "Product name.",
            "example": "VIEW",
            "deprecated": true
          },
          "charset": {
            "type": "string",
            "description": "Repository character set.",
            "example": "IBM037"
          },
          "createdBy": {
            "type": "string",
            "description": "User that defined the repository.",
            "example": "janedoe"
          },
          "createdDateTime": {
            "type": "integer",
            "description": "Date and time the repository was defined. Represents the number of milliseconds since the Unix epoch.",
            "format": "int64",
            "example": 1519987100512
          },
          "modifiedBy": {
            "type": "string",
            "description": "User that last modified the repository definition.",
            "example": "janedoe"
          },
          "modifiedDateTime": {
            "type": "integer",
            "description": "Date and time the repository definition was last modified. Represents the number of milliseconds since the Unix epoch.",
            "format": "int64",
            "example": 1548062261849
          },
          "reportAccessPolicy": {
            "type": "string",
            "description": "Report access policy.",
            "example": "ONLINE_ONLY",
            "enum": [
              "ONLINE_ONLY",
              "EXPANDED_ACCESS_SERVER",
              "EXTERNAL_RECALL"
            ]
          }
        },
        "description": "A repository definition."
      },
      "RepositoryResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Repository"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Result of repository add, update, or delete operation."
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LoginResponseResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Login result."
      },
      "LoginResponseResult": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Effective repository group name."
          },
          "groupId": {
            "type": "integer",
            "description": "Effective repository group id.",
            "format": "int32"
          }
        }
      },
      "ExportCreateRuleResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ExportCreateRuleResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Created export rule details."
      },
      "ExportCreateRuleResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExportRule"
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "reportId": {
            "type": "string",
            "description": "Value of the reportId request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "ExportRule": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "integer",
            "description": "Rule identifier.",
            "format": "int32",
            "example": 7
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Rule name.",
            "example": "Finance Export"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Rule description.",
            "example": "Export for the bi-weekly finance report."
          },
          "publicAccess": {
            "type": "boolean",
            "description": "Specification for rule access. True specifies a public rule; false specifies a private rule."
          },
          "owner": {
            "type": "string",
            "description": "Username of the rule owner.",
            "example": "joesmith"
          },
          "ruleSpecification": {
            "$ref": "#/components/schemas/ExportRuleSpecification"
          }
        },
        "description": "Export rule."
      },
      "BasicResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "RepositoryGroupListResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/RepositoryGroupListResponseResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A list of repository groups."
      },
      "RepositoryGroupListResponseResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Value of the id request parameter or its default value.",
            "deprecated": true
          },
          "groupName": {
            "type": "string",
            "description": "Value of the name request parameter or its default value.",
            "deprecated": true
          },
          "order": {
            "type": "string",
            "description": "Value of the order request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "groupList": {
            "type": "array",
            "description": "List of repository groups.",
            "items": {
              "$ref": "#/components/schemas/RepositoryGroup"
            }
          },
          "groupCount": {
            "type": "integer",
            "description": "Number of included repository groups.",
            "format": "int32"
          },
          "availableGroupCount": {
            "type": "integer",
            "description": "Number of all matching repository groups.",
            "format": "int32"
          }
        }
      },
      "RepositoryUser": {
        "type": "object",
        "properties": {
          "acc": {
            "type": "string",
            "description": "Mode access flags.",
            "example": "YNYYYY"
          },
          "acls": {
            "type": "string",
            "description": "Alternate reprint mask."
          },
          "adst": {
            "type": "string",
            "description": "Alternate reprint destination."
          },
          "banr": {
            "type": "string",
            "description": "Default banner page.",
            "example": "DEFAULT"
          },
          "dist": {
            "type": "string",
            "description": "Distribution id.",
            "example": "FINANCE"
          },
          "jcl1": {
            "type": "string",
            "description": "Jobcard line 1."
          },
          "jcl2": {
            "type": "string",
            "description": "Jobcard line 2."
          },
          "jcl3": {
            "type": "string",
            "description": "Jobcard line 3."
          },
          "jcl4": {
            "type": "string",
            "description": "Jobcard line 4."
          },
          "lang": {
            "type": "string",
            "description": "Language code."
          },
          "mask": {
            "type": "string",
            "description": "Distribution id mask.",
            "example": "F*"
          },
          "mode": {
            "type": "string",
            "description": "Display mode.",
            "example": "ALL",
            "enum": [
              "ALL",
              "EXPO",
              "EXP",
              "SARO",
              "SAR"
            ]
          },
          "mstr": {
            "type": "string",
            "description": "Master authority.",
            "example": "Y",
            "enum": [
              "Y",
              "N"
            ]
          },
          "pcls": {
            "type": "string",
            "description": "Primary reprint class."
          },
          "pdst": {
            "type": "string",
            "description": "Primary reprint destination."
          },
          "prtr": {
            "type": "string",
            "description": "Printer id."
          },
          "uid": {
            "type": "string",
            "description": "User id.",
            "example": "tomsmith"
          }
        },
        "description": "A repository user."
      },
      "RepositoryUserListResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UserListResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of repository users."
      },
      "UserListResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "userId": {
            "type": "string",
            "description": "Value of the userId request parameter or its default value.",
            "deprecated": true
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "smf": {
            "type": "string",
            "description": "Value of the smf request parameter or its default value.",
            "deprecated": true
          },
          "User Data": {
            "type": "array",
            "description": "List of repository users.",
            "items": {
              "$ref": "#/components/schemas/RepositoryUser"
            }
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "handle": {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "description": "Handle usable for retrieval of matching report data.",
            "example": "SbLD8Pfw8cLZxdfW2ePxQEBAQEBAQEBAQEBAQEBAQEDaaPabAAAAAAAAAAAAAAAA"
          },
          "reportID": {
            "maxLength": 32,
            "type": "string",
            "description": "Report ID.",
            "example": "ACCOUNTLIST"
          },
          "status": {
            "type": "string",
            "description": "Report status.",
            "example": "ONLINE",
            "enum": [
              "ONLINE",
              "OFFLINE",
              "EAS",
              "RECALLABLE"
            ]
          },
          "gen": {
            "type": "integer",
            "description": "The generation of the report.",
            "format": "int32",
            "example": 1
          },
          "seqNum": {
            "type": "integer",
            "description": "The report sequence number.",
            "format": "int32",
            "example": 2
          },
          "lines": {
            "type": "integer",
            "description": "Total number of lines.",
            "format": "int32",
            "example": 200
          },
          "pages": {
            "type": "integer",
            "description": "Total number of pages.",
            "format": "int32",
            "example": 30
          },
          "retrievablePages": {
            "type": "integer",
            "description": "Number of retrievable pages.",
            "format": "int32",
            "example": 17
          },
          "type": {
            "type": "string",
            "description": "Type of report.",
            "example": "PDF"
          },
          "oType": {
            "type": "string",
            "description": "Original type of report.",
            "example": "AFP"
          },
          "desc": {
            "type": "string",
            "description": "Description of the report.",
            "example": "Accounts list."
          },
          "archDT": {
            "type": "integer",
            "description": "Archival date. Represents the number of milliseconds since the Unix epoch.",
            "format": "int64",
            "example": 1525407765000
          },
          "sysoutClass": {
            "maxLength": 8,
            "type": "string",
            "description": "SYSOUT class or classes.",
            "example": "C"
          },
          "jesID": {
            "maxLength": 8,
            "type": "string",
            "description": "The ID of the job in Job Entry Subsystem.",
            "example": "JOB60535"
          },
          "formsNum": {
            "type": "string",
            "description": "The forms name of the report.",
            "example": "SC0701B"
          },
          "xCode": {
            "type": "string",
            "description": "The exception code associated with the report."
          },
          "reportOrigin": {
            "type": "string",
            "description": "The origin of the report.",
            "example": "VIEWFT15"
          },
          "userID": {
            "type": "string",
            "description": "ID of the user who created the report.",
            "example": "JOHNDOE"
          },
          "userField": {
            "type": "string",
            "description": "User comment.",
            "example": "To be reviewed."
          },
          "readerDT": {
            "type": "integer",
            "description": "The job reader date. Represents the number of milliseconds since the Unix epoch.",
            "format": "int64",
            "example": 1525407764000
          },
          "printDT": {
            "type": "integer",
            "description": "The last printed time of the SYSOUT. Represents the number of milliseconds since the Unix epoch.",
            "format": "int64",
            "example": 1525407764987
          },
          "isOnDisk": {
            "type": "boolean",
            "description": "Indication whether the report is on a hard disk.",
            "example": true
          },
          "isOnTape": {
            "type": "boolean",
            "description": "Indication whether the report is on tape.",
            "example": false
          },
          "isOnOptical": {
            "type": "boolean",
            "description": "Indication whether the report is on an optical disk.",
            "example": true
          },
          "isIdxOnDisk": {
            "type": "boolean",
            "description": "Indication whether the report index is on disk.",
            "example": false
          },
          "location": {
            "type": "string",
            "description": "Location of the report.",
            "example": "DISK",
            "deprecated": true
          },
          "tapeSeq": {
            "type": "integer",
            "description": "Sequence of the tape.",
            "format": "int32",
            "example": 0,
            "deprecated": true
          },
          "tapePos": {
            "type": "integer",
            "description": "Position of the tape.",
            "format": "int64",
            "example": 1,
            "deprecated": true
          },
          "tapeCnt": {
            "type": "integer",
            "description": "Number of tapes that contain the report.",
            "format": "int32",
            "example": 2,
            "deprecated": true
          },
          "eroId": {
            "type": "string",
            "description": "Id of the ERO table.",
            "deprecated": true
          },
          "eroRtnPd": {
            "type": "integer",
            "description": "The retention period of the ERO table in days.",
            "format": "int32",
            "example": 10,
            "deprecated": true
          },
          "eroGen": {
            "type": "integer",
            "description": "The generation number of the ERO table.",
            "format": "int32",
            "example": 100,
            "deprecated": true
          },
          "eroCpy": {
            "type": "integer",
            "description": "The copy number of the ERO disk.",
            "format": "int32",
            "example": 0,
            "deprecated": true
          },
          "diskRtnPd": {
            "type": "integer",
            "description": "The retention period of the ERO disk in days.",
            "format": "int32",
            "example": 3,
            "deprecated": true
          },
          "diskGen": {
            "type": "integer",
            "description": "The generation number of the ERO disk.",
            "format": "int32",
            "example": 200,
            "deprecated": true
          },
          "diskCpy": {
            "type": "integer",
            "description": "The copy number of the ERO disk.",
            "format": "int32",
            "example": 0,
            "deprecated": true
          },
          "disk2Days": {
            "type": "integer",
            "description": "Number of days after archival that the report is migrated to a secondary disk.",
            "format": "int32",
            "example": 999,
            "deprecated": true
          },
          "recordLength": {
            "type": "integer",
            "description": "The record length of the report.",
            "format": "int32",
            "example": 133
          },
          "JobName": {
            "maxLength": 8,
            "type": "string",
            "description": "Name of the job that created the report.",
            "example": "SC0701B"
          },
          "Destination": {
            "type": "string",
            "description": "The print destination for the report.",
            "example": "LOCAL"
          }
        },
        "description": "A report."
      },
      "ReportListResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportListResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of reports."
      },
      "ReportListResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "name": {
            "type": "string",
            "description": "Value of the name request parameter or its default value.",
            "deprecated": true
          },
          "preVersNum": {
            "type": "string",
            "description": "Value of the preVersNum request parameter or its default value.",
            "deprecated": true
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "arcDateFrom": {
            "type": "string",
            "description": "Value of the arcDateFrom request parameter or its default value.",
            "deprecated": true
          },
          "arcDateTo": {
            "type": "string",
            "description": "Value of the arcDateTo request parameter or its default value.",
            "deprecated": true
          },
          "smf": {
            "type": "string",
            "description": "Value of the smf request parameter or its default value.",
            "deprecated": true
          },
          "Report List": {
            "type": "array",
            "description": "List of reports.",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          }
        }
      },
      "ReportDataResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportDataResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Report data."
      },
      "ReportDataResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "rptHandle": {
            "type": "string",
            "description": "Value of the reportHandle request parameter or its default value.",
            "deprecated": true
          },
          "filter": {
            "type": "string",
            "description": "Value of the filter request parameter or its default value.",
            "deprecated": true
          },
          "selNotes": {
            "type": "string",
            "description": "Value of the setNotes request parameter or its default value.",
            "deprecated": true
          },
          "selXFrm": {
            "type": "string",
            "description": "Value of the selXFrm request parameter or its default value.",
            "deprecated": true
          },
          "record": {
            "type": "string",
            "description": "Value of the record request parameter or its default value.",
            "deprecated": true
          },
          "page": {
            "type": "string",
            "description": "Value of the page request parameter or its default value.",
            "deprecated": true
          },
          "searchText": {
            "type": "string",
            "description": "Value of the searchText request parameter.",
            "deprecated": true
          },
          "searchCaseSensitive": {
            "type": "string",
            "description": "Value of the searchCaseSensitive request parameter or its default value.",
            "deprecated": true
          },
          "searchColumnFrom": {
            "type": "string",
            "description": "Value of the searchColumnFrom request parameter or its default value.",
            "deprecated": true
          },
          "searchColumnTo": {
            "type": "string",
            "description": "Value of the searchColumnTo request parameter or its default value.",
            "deprecated": true
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "smf": {
            "type": "string",
            "description": "Value of the smf request parameter or its default value.",
            "deprecated": true
          },
          "Report Data": {
            "type": "array",
            "description": "List of report records.",
            "items": {
              "$ref": "#/components/schemas/ReportRecord"
            }
          },
          "lastSearched": {
            "$ref": "#/components/schemas/ReportRecord"
          }
        }
      },
      "ReportRecord": {
        "type": "object",
        "properties": {
          "lNum": {
            "type": "integer",
            "description": "Line number.",
            "format": "int32",
            "example": 103
          },
          "pNum": {
            "type": "integer",
            "description": "Page number.",
            "format": "int32",
            "example": 5
          },
          "plNum": {
            "type": "integer",
            "description": "Line in page.",
            "format": "int32",
            "example": 3
          },
          "cc": {
            "type": "integer",
            "description": "Carriage control character.",
            "format": "int32",
            "example": 139
          },
          "llInd": {
            "type": "string",
            "description": "Locked line indicator.",
            "example": "N"
          },
          "aType": {
            "type": "string",
            "description": "Note type."
          },
          "rType": {
            "type": "string",
            "description": "Record type"
          },
          "rLen": {
            "type": "integer",
            "description": "Record length.",
            "format": "int32",
            "example": 80
          },
          "data": {
            "type": "string",
            "description": "Record data.",
            "example": "JOHN DOE   01/01/2019   17:20   $100"
          }
        },
        "description": "A report record with metadata."
      },
      "RepositoryListResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/RepositoryListResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A list of repositories."
      },
      "RepositoryListResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Value of the id request parameter or its default value.",
            "deprecated": true
          },
          "name": {
            "type": "string",
            "description": "Value of the name request parameter or its default value.",
            "deprecated": true
          },
          "groupName": {
            "type": "string",
            "description": "Value of the groupName request parameter or its default value.",
            "deprecated": true
          },
          "groupId": {
            "type": "string",
            "description": "Value of the groupId request parameter or its default value.",
            "deprecated": true
          },
          "order": {
            "type": "string",
            "description": "Value of the order request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "groupRepositoryType": {
            "type": "string",
            "description": "Value of the groupRepositoryType request parameter or its default value.",
            "deprecated": true
          },
          "repository": {
            "type": "array",
            "description": "List of repositories.",
            "items": {
              "$ref": "#/components/schemas/Repository"
            }
          },
          "repositoryCount": {
            "type": "integer",
            "description": "Number of included repositories.",
            "format": "int32"
          },
          "availableRepositoryCount": {
            "type": "integer",
            "description": "Number of all repositories.",
            "format": "int32"
          }
        }
      },
      "IndexValue": {
        "type": "object",
        "properties": {
          "handle": {
            "minLength": 1,
            "type": "string",
            "description": "Handle usable for retrieval of reports containing this cross-report index value.",
            "example": "AAAADsHV6EDi5NfX0bhAw9ZLAAAACOjW0tbIwdTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          "values": {
            "type": "array",
            "description": "Index and sub-index values.",
            "example": [
              "ANY SUPPLY CO.",
              "YOKOHAMA"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReportIndexValuesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportIndexValuesResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of index values."
      },
      "ReportIndexValuesResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of report index values.",
            "items": {
              "$ref": "#/components/schemas/IndexValue"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportHandle": {
            "type": "string",
            "description": "Value of the reportHandle request parameter or its default value.",
            "deprecated": true
          },
          "nameHandle": {
            "type": "string",
            "description": "Value of the nameHandle request parameter or its default value.",
            "deprecated": true
          },
          "valueFilter": {
            "type": "array",
            "description": "Value of the valueFilter request parameter or its default value.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          }
        }
      },
      "LogicalView": {
        "type": "object",
        "properties": {
          "handle": {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "description": "The handle used to retrieve report pages that are formatted based on the logical view configuration.",
            "example": "4uTU1NnX48FAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDaaPabIAEAAAAAAAAAAAAA"
          },
          "viewId": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Logical view id.",
            "example": "SUMMRPTA"
          },
          "viewNumber": {
            "type": "integer",
            "description": "Logical view number.",
            "format": "int32",
            "example": 1
          },
          "description": {
            "maxLength": 40,
            "type": "string",
            "description": "Logical view description.",
            "example": "Regional view."
          },
          "filter": {
            "maxLength": 8,
            "type": "string",
            "description": "Name of the filter associated with the logical view or empty string when no filter is associated with the logical view.",
            "example": "Year1999"
          },
          "nameHandle": {
            "maxLength": 88,
            "minLength": 88,
            "type": "string",
            "description": "Handle to be used for retrieval of index values. Available only when an index name has been provided for this logical view.",
            "example": "5cXVxNbZQEDi48HjxeJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA=="
          },
          "indexNames": {
            "type": "array",
            "description": "Index and sub-index names. Available only when an index name has been provided for this logical view.",
            "example": [
              "VENDOR",
              "STATES"
            ],
            "items": {
              "type": "string"
            }
          },
          "default": {
            "type": "boolean",
            "description": "Default logical view.",
            "example": true
          }
        }
      },
      "ReportLogicalViewsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportLogicalViewsResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A list of logical view definitions."
      },
      "ReportLogicalViewsResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of report logical views.",
            "items": {
              "$ref": "#/components/schemas/LogicalView"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportHandle": {
            "type": "string",
            "description": "Value of the reportHandle request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          }
        }
      },
      "LogicalViewWithoutHandles": {
        "type": "object",
        "properties": {
          "viewId": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Logical view id.",
            "example": "SUMMRPTA"
          },
          "viewNumber": {
            "type": "integer",
            "description": "Logical view number.",
            "format": "int32",
            "example": 1
          },
          "description": {
            "maxLength": 40,
            "type": "string",
            "description": "Logical view description.",
            "example": "Regional view."
          },
          "filter": {
            "maxLength": 8,
            "type": "string",
            "description": "Name of the filter associated with the logical view or empty string when no filter is associated with the logical view.",
            "example": "Year1999"
          },
          "default": {
            "type": "boolean",
            "description": "Default logical view.",
            "example": true
          }
        },
        "description": "Logical view data without handles."
      },
      "ReportInformationRelatedHandles": {
        "type": "object",
        "properties": {
          "undecoratedReportHandle": {
            "type": "string",
            "description": "Report handle that doesn't include information about logical view nor index value, that's returned from Get a Report List endpoint as $['result']['Report List'][*]['handle'].",
            "example": "4uTU1NnX4alAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDaaPa5IAEAAAAAAAAAAAAA"
          },
          "reportLogicalViewHandle": {
            "type": "string",
            "description": "Report handle that includes information about logical view, that's returned from Get Report Logical Views endpoint as $['result']['data'][*]['handle'].",
            "example": "4uTU1NnX4alAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDaaPa5IAEAAQAAAAEAAAAA"
          },
          "reportValueHandle": {
            "type": "string",
            "description": "Report handle that includes information about logical view and index value, that's returned from Get Report Index Values endpoint as $['result']['data'][*]['handle'].",
            "example": "4uTU1NnX4alAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEDaaPa5IAEAAQAAAAEBBBBB"
          }
        },
        "description": "Includes report handles that are related to the content in reportHandle input parameter. Only handles that contain the information in reportHandle input parameter are included."
      },
      "ReportInformationResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportInformationResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Information about a report."
      },
      "ReportInformationResult": {
        "type": "object",
        "properties": {
          "includeBasic": {
            "type": "string",
            "description": "Value of the includeBasic request parameter or its default value.",
            "deprecated": true
          },
          "includeRelatedHandles": {
            "type": "string",
            "description": "Value of the includeRelatedHandles request parameter or its default value.",
            "deprecated": true
          },
          "includeLogicalViewData": {
            "type": "string",
            "description": "Value of the includeLogicalViewData request parameter or its default value.",
            "deprecated": true
          },
          "data": {
            "$ref": "#/components/schemas/ReportInformationSections"
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportHandle": {
            "type": "string",
            "description": "Value of the reportHandle request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "ReportInformationSections": {
        "type": "object",
        "properties": {
          "basic": {
            "$ref": "#/components/schemas/Report"
          },
          "relatedHandles": {
            "$ref": "#/components/schemas/ReportInformationRelatedHandles"
          },
          "reportLogicalViewData": {
            "$ref": "#/components/schemas/LogicalViewWithoutHandles"
          }
        },
        "description": "Report information sections."
      },
      "IndexName": {
        "type": "object",
        "properties": {
          "handle": {
            "maxLength": 88,
            "minLength": 88,
            "type": "string",
            "description": "Handle usable for retrieval of values available for this index.",
            "example": "5cXVxNbZQEDi48HjxeJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQA=="
          },
          "names": {
            "type": "array",
            "description": "Index and sub-index names.",
            "example": [
              "VENDOR",
              "STATES"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReportIndexNamesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ReportIndexNamesResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of index definitions."
      },
      "ReportIndexNamesResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of report index names.",
            "items": {
              "$ref": "#/components/schemas/IndexName"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportHandle": {
            "type": "string",
            "description": "Value of the reportHandle request parameter or its default value.",
            "deprecated": true
          },
          "nameFilter": {
            "type": "array",
            "description": "Value of the nameFilter request parameter or its default value.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          }
        }
      },
      "Locale": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Locale display name.",
            "example": "German (Belgium)"
          },
          "tag": {
            "type": "string",
            "description": "Well-formed IETF BCP 47 language tag representing the locale.",
            "example": "de-BE"
          }
        }
      },
      "LocaleResponse": {
        "type": "object",
        "properties": {
          "locales": {
            "type": "array",
            "description": "List of locales.",
            "items": {
              "$ref": "#/components/schemas/Locale"
            }
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          }
        },
        "description": "A list of locales."
      },
      "CrossReportIndexValueReportsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CrossReportIndexValueReportsResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of reports containing a specific cross-report index value."
      },
      "CrossReportIndexValueReportsResult": {
        "type": "object",
        "properties": {
          "nameHandle": {
            "type": "string",
            "description": "Value of the nameHandle request parameter or its default value.",
            "deprecated": true
          },
          "valueHandle": {
            "type": "string",
            "description": "Value of the valueHandle request parameter or its default value.",
            "deprecated": true
          },
          "data": {
            "type": "array",
            "description": "List of reports.",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportName": {
            "type": "string",
            "description": "Value of the reportName request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "onlineOnly": {
            "type": "string",
            "description": "Value of the onlineOnly request parameter or its default value.",
            "deprecated": true
          },
          "arcDateFrom": {
            "type": "string",
            "description": "Value of the arcDateFrom request parameter or its default value.",
            "deprecated": true
          },
          "arcDateTo": {
            "type": "string",
            "description": "Value of the arcDateTo request parameter or its default value.",
            "deprecated": true
          },
          "versNumFrom": {
            "type": "string",
            "description": "Value of the versNumFrom request parameter or its default value.",
            "deprecated": true
          },
          "versNumTo": {
            "type": "string",
            "description": "Value of the versNumTo request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "CrossReportIndexValuesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CrossReportIndexValuesResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of cross-report index values."
      },
      "CrossReportIndexValuesResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of cross-report index values.",
            "items": {
              "$ref": "#/components/schemas/IndexValue"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportName": {
            "type": "string",
            "description": "Value of the reportName request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "onlineOnly": {
            "type": "string",
            "description": "Value of the onlineOnly request parameter or its default value.",
            "deprecated": true
          },
          "arcDateFrom": {
            "type": "string",
            "description": "Value of the arcDateFrom request parameter or its default value.",
            "deprecated": true
          },
          "arcDateTo": {
            "type": "string",
            "description": "Value of the arcDateTo request parameter or its default value.",
            "deprecated": true
          },
          "versNumFrom": {
            "type": "string",
            "description": "Value of the versNumFrom request parameter or its default value.",
            "deprecated": true
          },
          "versNumTo": {
            "type": "string",
            "description": "Value of the versNumTo request parameter or its default value.",
            "deprecated": true
          },
          "nameHandle": {
            "type": "string",
            "description": "Value of the nameHandle request parameter or its default value.",
            "deprecated": true
          },
          "valueFilter": {
            "type": "array",
            "description": "Value of the valueFilter request parameter or its default value.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CrossReportIndexNamesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CrossReportIndexNamesResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "A set of cross-report index definitions."
      },
      "CrossReportIndexNamesResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of cross-report index names.",
            "items": {
              "$ref": "#/components/schemas/IndexName"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "repositoryId": {
            "type": "string",
            "description": "Value of the repositoryId request parameter or its default value.",
            "deprecated": true
          },
          "reportName": {
            "type": "string",
            "description": "Value of the reportName request parameter or its default value.",
            "deprecated": true
          },
          "offset": {
            "type": "string",
            "description": "Value of the offset request parameter or its default value.",
            "deprecated": true
          },
          "limit": {
            "type": "string",
            "description": "Value of the limit request parameter or its default value.",
            "deprecated": true
          },
          "count": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of returned items.",
            "format": "int32",
            "example": 86
          },
          "complete": {
            "type": "boolean",
            "description": "Indicates whether there are more retrievable items.",
            "example": true
          },
          "onlineOnly": {
            "type": "string",
            "description": "Value of the onlineOnly request parameter or its default value.",
            "deprecated": true
          },
          "arcDateFrom": {
            "type": "string",
            "description": "Value of the arcDateFrom request parameter or its default value.",
            "deprecated": true
          },
          "arcDateTo": {
            "type": "string",
            "description": "Value of the arcDateTo request parameter or its default value.",
            "deprecated": true
          },
          "versNumFrom": {
            "type": "string",
            "description": "Value of the versNumFrom request parameter or its default value.",
            "deprecated": true
          },
          "versNumTo": {
            "type": "string",
            "description": "Value of the versNumTo request parameter or its default value.",
            "deprecated": true
          },
          "nameFilter": {
            "type": "array",
            "description": "Value of the nameFilter request parameter or its default value.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExportReportRulesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ExportReportRulesResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Export report rules."
      },
      "ExportReportRulesResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExportRuleWithoutSpecification"
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "reportId": {
            "type": "string",
            "description": "Value of the reportId request parameter or its default value.",
            "deprecated": true
          }
        }
      },
      "ExportRuleWithoutSpecification": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "integer",
            "description": "Rule identifier.",
            "format": "int32",
            "example": 7
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Rule name.",
            "example": "Finance Export"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Rule description.",
            "example": "Export for the bi-weekly finance report."
          },
          "publicAccess": {
            "type": "boolean",
            "description": "Specification for rule access. True specifies a public rule; false specifies a private rule."
          },
          "owner": {
            "type": "string",
            "description": "Username of the rule owner.",
            "example": "joesmith"
          }
        },
        "description": "Export rule without specification."
      },
      "ExportReportRulesWithoutSpecifications": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "Report name.",
            "example": "FINRPT"
          },
          "rules": {
            "type": "array",
            "description": "List of export rules.",
            "items": {
              "$ref": "#/components/schemas/ExportRuleWithoutSpecification"
            }
          }
        },
        "description": "Export rules for a report id."
      },
      "ExportRulesAllResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ExportRulesAllResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Full export rules tree."
      },
      "ExportRulesAllResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "List of rules that are available to the user for each Report Id.",
            "items": {
              "$ref": "#/components/schemas/ExportReportRulesWithoutSpecifications"
            }
          },
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          }
        }
      },
      "CharsetResponse": {
        "type": "object",
        "properties": {
          "charsets": {
            "type": "array",
            "description": "List of character sets.",
            "example": [
              "IBM037",
              "IBM1026",
              "IBM1047",
              "IBM273",
              "..."
            ],
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          }
        },
        "description": "A list of character sets."
      },
      "RepositoryGroupDeleteResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/RepositoryGroupDeleteResponseResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Result of repository group delete operation."
      },
      "RepositoryGroupDeleteResponseResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Repository group identifier.",
            "format": "int32",
            "example": 67,
            "deprecated": true
          },
          "actions": {
            "type": "integer",
            "description": "Disregard the value of this parameter.",
            "format": "int32",
            "deprecated": true
          },
          "repositoryCount": {
            "type": "integer",
            "description": "Disregard the value of this parameter.",
            "format": "int64",
            "deprecated": true
          }
        }
      },
      "ExportDeleteRuleResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ExportDeleteRuleResult"
          },
          "status": {
            "type": "string",
            "description": "Request status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS",
              "ERROR"
            ]
          },
          "message": {
            "type": "array",
            "description": "List of response messages.",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        },
        "description": "Response after deleting an export rule."
      },
      "ExportDeleteRuleResult": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "integer",
            "description": "Session identifier.",
            "format": "int64",
            "example": 374
          },
          "reportId": {
            "type": "string",
            "description": "Value of the reportId request parameter or its default value.",
            "deprecated": true
          },
          "ruleId": {
            "type": "string",
            "description": "Value of the ruleId request parameter or its default value.",
            "deprecated": true
          }
        }
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "Basic"
      },
      "guid": {
        "type": "apiKey",
        "name": "guid",
        "in": "header"
      }
    }
  }
}
