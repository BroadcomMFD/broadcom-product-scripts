/* REXX - User Routine Sample to Update an element from DS or USS location    */
parse arg PassParm                        /* The Parm tells us what variable  */
/*                                                                              
  ToDo - at some point I'd like this routine be able to be called directly, or  
  from a user select command (UP) in 3.4 or 3.17 - in this case I won't know    
  the best Environment, System, Subsystem, etc. in fact I might not even be in  
  Applid CTLI - in which case I probably need to re-call myself with NEWAPPL    
  (and LIBDEFS?) passing whatever was passed to me...                           
  Since the 'requird LibDefs' should be common to all FDP routines maybe this   
  should be a callable routine, that just does LibDefs and returns, or does     
  LibDefs, and launches whatever is passed to it as an arg (e.g. start LN, QE   
  or this routine etc.  Thinking more flexible, the common routine might examine
  the current LibDef chain, create/load extra VIO libdefs, and continue to allow
  in stream panels, rexx, tables etc.                                           
*/                                                                              
PassName = strip(PassParm,,"'")           /* holds the varialbe names, remove */
if PassName = '' then                     /* For now, only valid if called as */
   do                                     /* a User Extension                 */
      Say "Invalid Direct call to a User Extension Routine"                     
      Exit 12                                                                   
   end                                                                          
ADDRESS ISPEXEC                           /* Send commands to ISPF Services   */
"VGET ("PassName") SHARED"                /* any quotes and get these names   */
interpret 'ALLVALS = 'PassName            /* use interpret to expand the names*/
 "VGET ("ALLVALS") SHARED"                /* and get those values */            
LNUPENV = EEVETKEN                                                              
LNUPSYS = EEVETKSY                                                              
LNUPSUB = EEVETKSB                                                              
LNUPELE = EEVETKEL                                                              
LNUPTYP = EEVETKTY                                                              
LNUPSTI = EEVETKSI                                                              
LNUPPGR = EEVETPGR                                                              
                                                                                
do forever /* for the moment, just loop untill quit                          */ 
    "display panel(LNADDUPP)"                /* then show the panel     */      
   if rc > 0 then                            /* Did use hit END or RETURN?   */ 
   do                                                                           
       "SETMSG MSG(ENDE046E)"                 /* Request cancelled            */
      exit 0                                 /* and get out (no changes)     */ 
   end                                                                          
                                                                                
                                                                                
    "VGET (LNUPENV                 LNUPSYS ",  /* Get the values again       */ 
       "LNUPSUB  LNUPELE  LNUPTYP  LNUPSTI ",                                   
       "LNUPPGR  LNUPOPT  LNUPDSN  LNUPVL ) SHARED"                             
    "VGET (EEVCCID                 EEVCOMM ",  /* Get the values again       */ 
       "VARNOGEN LNUPPGR  EEVOOSGN LNUPELI  ",                                  
       "VARADDUP LNUPREP  LNUPSTI  C1SISOCP LNUPTRN) SHARED"                    
                                                                                
   Say "DSN:" LNUPDSN                                                           
   IF LNUPDSN \= '' then                     /* if we have a DSN entered...  */ 
   do                                                                           
      call Process_DSN                                                          
   end                                                                          
end                                                                             
                                                                                
Process_DSN:  /* this section reviews the DSN entered and decideds what to do*/ 
                                                                                
"control errors return"                                                         
ndvselnw = 'NO' /* indicate no selection yet */                                 
"vput (ndvselnw) shared" /* and save it */                                      
Main_Line:                                                                      
select                                                                          
  When  pos('(',LNUPDSN) > 0 ,                                                  
    or pos(')',LNUPDSN) > 0 then call Work_With_MemList                         
  When  pos('*',LNUPDSN) > 0 ,                                                  
    or pos('*',LNUPDSN) > 0 then call Work_With_DSList                          
  When  pos('/',LNUPDSN) > 0 ,                                                  
    or pos('~',LNUPDSN) > 0 then call Work_With_DirList                         
  otherwise                                                                     
    do                                                                          
       say "not sure what to do with:" LNUPDSN                                  
       exit 20                                                                  
    end                                                                         
end                                                                             
"vget (ndvselnw) shared "                                                       
IF ndvselnw == 'YES' THEN                                                       
   DO                                                                           
      "vget (ndvselds) profile"                                                 
      say "New Endevor Select:" ndvselds                                        
      LNUPDSN = ndvselds                                                        
   end                                                                          
return                                                                          
                                                                                
Work_With_MemList:                                                              
/* probably need to strip off quotes, and member parms to pass to memlist */    
LNUPDSN = strip(LNUPDSN,b,"'")                                                  
LNUPDSN = strip(LNUPDSN,b,'"')                                                  
parse var LNUPDSN NDVDS "(" NDVMEM ")" .                                        
if member \= '' then member = "Member("||NDVMEM||")"                            
"lminit dataid(NDVDSNID) dataset('"NDVDS"')"                                    
lirc = rc                                                                       
"memlist dataid(&NDVDSNID) confirm(yes) field(9)" member                        
lsrc = rc                                                                       
if lsrc >= 8 then do                                                            
   say "Lmddisp Error:" ZERRMSG "-" ZERRSM                                      
   say ZERRLM                                                                   
   say "Help:" ZERRHM "Alarm:" ZERRALRM                                         
end                                                                             
"lmfree dataid("NDVDSNID")"                                                     
dfrc = rc                                                                       
return                                                                          
                                                                                
Work_With_DirList:                                                              
"dirlist path(LNUPDSN) confirm (yes) panel(LNRUUDL0)"   ,                       
        "lcmds(upuss,s,up)"                                                     
lsrc = rc                                                                       
if lsrc >= 8 then do                                                            
   say "Lmddisp Error:" ZERRMSG "-" ZERRSM                                      
   say ZERRLM                                                                   
   say "Help:" ZERRHM "Alarm:" ZERRALRM                                         
end                                                                             
return                                                                          
                                                                                
Work_With_DSList:                                                               
"lmdinit listid(NDVDSNID) level("LNUPDSN")" /* optionally add volume */         
lirc = rc                                                                       
"lmddisp listid(&NDVDSNID) view(volume) confirm(yes) panel(LNRUDSL0)"           
lsrc = rc                                                                       
if lsrc >= 8 then do                                                            
   say "Lmddisp Error:" ZERRMSG "-" ZERRSM                                      
   say ZERRLM                                                                   
   say "Help:" ZERRHM "Alarm:" ZERRALRM                                         
end                                                                             
"lmdfree listid("NDVDSNID")"                                                    
dfrc = rc                                                                       
return                                                                          
                                                                                
if NEVER = EVER THEN do /* replace this logic later */                          
  /*                                                                            
       we now have enough data to build the Alter SCL and try it...             
  */                                                                            
  Call Build_Alter_SCL                                                          
  /*                                                                            
        Call the API to perform the actions                                     
  */                                                                            
  Call Execute_API_Action                                                       
end                                                                             
  /*                                                                            
        Finally update the the status depending on how the Update went          
  */                                                                            
if FGAPIRC >= 12 then                     /* Was there an error?          */    
   USERMSG  = '*AddRC:' || FGAPIRC        /* Show action failed            */   
else do                                                                         
   USERMSG  = '*Updated'                  /* Tell caller what happened     */   
   /* First save the details we've updated(this won't update the table tho)*/   
    "VPUT (USERDATA LNDESCRP",                 /* and other fields to update */ 
     "EEVETPGR EEVETCCI LNDGCCID LNDRCCID EEVETSO) SHARED"                      
   /* now update the current row with the changes the user made */              
    "VGET (USERTABL) shared"                     /* Retrieve name of table   */ 
    "TBOPEN" USERTABL "NOWRITE SHARE"            /* and try to open it   */     
   TBOPENRC = RC                                 /* save the return code     */ 
   If TBOPENRC = 0 then do                       /* table now open, continue */ 
       "TBVCLEAR" USERTABL                       /* Clear table vars */         
       "VGET (EEVETKEL EEVETKEN",                 /* retrieve table keys      */
        "EEVETKSI EEVETKSY EEVETKSB EEVETKTY EEVETDVL) shared"                  
       "TBGET" USERTABL                          /* retrieve row for update  */ 
      TBGETRC    = RC                            /* if found - nothing to do */ 
      if TBGETRC = 0 Then do                     /* if it's a new entry ins  */ 
      end                                        /* can we insert it?        */ 
       "TBEND" USERTABL                          /* close table, we're done! */ 
   end                                           /* End row updates          */ 
end                                              /* End NORMAL processing    */ 
 "VPUT (USERMSG) SHARED"                         /* pass back the updated msg*/ 
EXIT 0                                                                          
                                                                                
/****************************************************************************/  
                                                                                
Build_Alter_SCL:                                                                
                                                                                
   sa=SAVESCL(RESET)                    /* reset our cache of SCL lines */      
                                                                                
    "VGET (EEVCCID EEVCOMM EEVOOSGN)"                 /*incase they changed*/   
   Options = "" ;                                                               
   IF EEVOOSGN = "Y" then Options = "OVERRIDE SIGNOUT" ;                        
   IF EEVCCID /= ""  then Options = options 'CCID  "'EEVCCID'"'                 
   IF EEVCOMM  = ""  then COMLINE = ' .'                                        
   else do                                                                      
      IF pos("'",EEVCOMM) > 0 then /* if comment has an apost */                
        COMLINE = '   COMMENT "'EEVCOMM'" .'                                    
      else                                                                      
        COMLINE = "   COMMENT '"EEVCOMM"' ."                                    
   end                                                                          
                                                                                
   sa=SAVESCL(" SET FROM ENVIRONMENT "EEVETKEN " SYSTEM "EEVETKSY)              
   sa=SAVESCL("   SUBSYSTEM   "EEVETKSB " TYPE   "EEVETKTY " STAGE" EEVETKSI".")
if BEFRDAT1 /= USERDAT1 | ,                                                     
   BEFRDAT2 /= USERDAT2 | ,                                                     
   BEFRDESC /= USERDESC | ,                                                     
   BEFRPGRP /= USERPGRP | ,                                                     
   BEFRLCCI /= USERLCCI | ,                                                     
   BEFRGCCI /= USERGCCI | ,                                                     
   BEFRRCCI /= USERRCCI | ,                                                     
   BEFRUSER /= USERUSER then DO                                                 
      sa=SAVESCL(" ALTER ELEMENT ")                                             
      sa=SAVESCL("'"EEVETKEL"'")                                                
      sa=SAVESCL(" REPLACE ")                                                   
   if BEFRDESC /= USERDESC THEN do        /* Alter Description ?     */         
      if pos("'",USERDESC) > 0 then        /* any single quote?       */        
         sa=SAVESCL('  DESCRIPTION WITH "'left(USERDESC,40)'"')                 
      else                                                                      
         sa=SAVESCL("  DESCRIPTION WITH '"left(USERDESC,40)"'")                 
   end                                                                          
   if BEFRLCCI /= USERLCCI THEN do        /* Alter Last Action CCID  */         
      if pos('"',USERLCCI) > 0 then        /* any double quote?       */        
         sa=SAVESCL("  LAST ACTION CCID WITH '"left(USERLCCI,12)"'")            
      else                                                                      
         sa=SAVESCL('  LAST ACTION CCID WITH "'left(USERLCCI,12)'"')            
   end                                                                          
   if BEFRGCCI /= USERGCCI THEN do        /* Alter Generate CCID     */         
      if pos('"',USERGCCI) > 0 then        /* any double quote?       */        
         sa=SAVESCL("     GENERATE CCID WITH '"left(USERGCCI,12)"'")            
      else                                                                      
         sa=SAVESCL('     GENERATE CCID WITH "'left(USERGCCI,12)'"')            
   end                                                                          
   if BEFRRCCI /= USERRCCI THEN do        /* Alter Retrieve CCID     */         
      if pos('"',USERRCCI) > 0 then        /* any double quote?       */        
         sa=SAVESCL("     RETRIEVE CCID WITH '"left(USERRCCI,12)"'")            
      else                                                                      
         sa=SAVESCL('     RETRIEVE CCID WITH "'left(USERRCCI,12)'"')            
   end                                                                          
   if BEFRPGRP /= USERPGRP THEN           /* Alter Processor Group?  */         
         sa=SAVESCL("   PROCESSOR GROUP WITH" USERPGRP)                         
   if BEFRUSER /= USERUSER THEN           /* Alter Signout User?     */         
         sa=SAVESCL("    SIGNOUT USERID WITH" USERUSER)                         
   if BEFRDAT1 /= USERDAT1 & ,            /* Alter 1st 40 bytes      */         
      BEFRDAT2  = USERDAT2 THEN do        /* 2nd 40 bytes unchanged  */         
      sa=SAVESCL("   USER DATA WITH (1,40,' ',")                                
      if pos('"',USERDAT1) > 0 then        /* any double quote?       */        
         sa=SAVESCL("   '"left(USERDAT1,40)"')")                                
      else                                                                      
         sa=SAVESCL('   "'left(USERDAT1,40)'")')                                
   end                                                                          
   if BEFRDAT2 /= USERDAT2 & ,            /* Alter 2nd 40 bytes      */         
      BEFRDAT1  = USERDAT1 THEN do        /* 1st 40 bytes unchanged  */         
      sa=SAVESCL("   USER DATA WITH (41,40,' ',")                               
      if pos('"',USERDAT2) > 0 then        /* any double quote?       */        
         sa=SAVESCL("   '"left(USERDAT2,40)"')")                                
      else                                                                      
         sa=SAVESCL('   "'left(USERDAT2,40)'")')                                
   end                                                                          
   if BEFRDAT1 /= USERDAT1 & ,            /* BOTH chunks of user data*/         
      BEFRDAT2 /= USERDAT2 THEN do        /* changed, try spanning   */         
      sa=SAVESCL("   USER DATA WITH (1,80,' ',")                                
      if pos('"',USERDATA) > 0 then        /* any double quote?       */        
         sa=SAVESCL("   '"left(USERDATA,80)"')")                                
      else                                                                      
         sa=SAVESCL('   "'left(USERDATA,80)'")')                                
   end                                                                          
      sa=SAVESCL(" OPTION UPDATE ELEMENT" options)                              
      sa=SAVESCL(COMLINE)                                                       
end                                                                             
                                                                                
/* There is a risk, that if the user data contain spaces and is broken over     
   two lines, with spaces around the split, then parsing could end up           
   getting confused over the proper string length - in which case it would      
   be safer to always use two alter statements for 40 bytes each so we never    
   have to span an scl line - in which case un-comment this block and comment   
   the last two blocks in the first statement... or come up with a better       
   way to split the line at NON-Whitespace characters.  */                      
/*                                                                              
if BEFRDAT2 /= USERDAT2 THEN do                                                 
   /* Alter second 40 bytes,we need a new statement to continue the user data */
   sa=SAVESCL(" ALTER ELEMENT ")                                                
   sa=SAVESCL("'"EEVETKEL"'")                                                   
   sa=SAVESCL(" REPLACE USER DATA WITH (41,40,,")                               
   if pos('"',USERDAT2) > 0 then           /* any double quote?       */        
      sa=SAVESCL("   '"left(USERDAT2,40)"')")                                   
   else                                                                         
      sa=SAVESCL('   "'left(USERDAT2,40)'")')                                   
   sa=SAVESCL(" OPTION UPDATE ELEMENT" options)                                 
   sa=SAVESCL(COMLINE)                                                          
end                                                                             
*/                                                                              
   /* Append an EOF flag */                                                     
   sa=SAVESCL(" EOF. ")                                                         
   return;                                                                      
                                                                                
/****************************************************************************/  
                                                                                
Execute_API_Action:                                                             
                                                                                
   MY_PARMS = SAVESCL(GETALL)           /* retrieve the accumulated SCL */      
   SA= my_parms ;                                                               
                                                                                
/* testing - consider keeping the APIMSG/APILIST for debugging                  
   ADDRESS TSO "ALLOC F(APIMSGS)  DUMMY REUSE"                                  
   ADDRESS TSO "ALLOC F(APILIST)  DUMMY REUSE"                                  
   */                                                                           
   ADDRESS TSO,                                                                 
   "ALLOC F(APIMSGS) LRECL(133) BLKSIZE(26600) SPACE(5,5) ",                    
     "DSORG(PS) RECFM(V B) TRACKS NEW UNCATALOG REUSE " ;                       
   ADDRESS TSO,                                                                 
   "ALLOC F(APILIST) LRECL(133) BLKSIZE(26600) SPACE(5,5) ",                    
     "DSORG(PS) RECFM(V B) TRACKS NEW UNCATALOG REUSE " ;                       
   ADDRESS TSO,                                                                 
   "ALLOC F(C1MSGS1) LRECL(133) BLKSIZE(26600) SPACE(5,5) ",                    
     "DSORG(PS) RECFM(V B) TRACKS NEW UNCATALOG REUSE " ;                       
   ADDRESS TSO "ALLOC FI(SYSOUT)  DUMMY SHR REUSE"                              
   ADDRESS LINKMVS 'APIAESCL MY_PARMS'                                          
   Temp_RC = RC ;                                                               
   If Temp_RC >= 4  THEN,                                                       
      Do                                                                        
         LNLASACT = 'Alter'                                                     
         FGAPIRC  = Temp_RC                                                     
          "SETMSG MSG(LONG027C)"                                                
          "LMINIT DATAID(DDID) DDNAME(C1MSGS1)"                                 
          "VIEW DATAID(&DDID)"                                                  
          "LMFREE DATAID(&DDID)"                                                
      End;                                                                      
   else                                                                         
      do                                                                        
         TOFRNAME = 'USER DATA'                                                 
         VAREVNME = 'ELEMENT:'EEVETKSY'/'EEVETKSB'/'EEVETKEL'/'EEVETKTY         
         D        = EEVETKSI                                                    
          "SETMSG MSG(CIIO089)"                                                 
      end                                                                       
   RETURN;                                                                      
                                                                                
                                                                                
/****************************************************************************/  
                                                                                
SaveScl : procedure  expose SCLLINE. /* This routine handles accumulating       
                                        SCL lines until it's time to pass       
                                        them off to the execute routine         
                                                                                
                                        Eventually it might handle auto         
                                        formatting long lines but at first      
                                        the goal is just to save each line      
                                        passed and increment the counter.       
                                        */                                      
if ARG(1) == 'RESET' then do         /* reset */                                
   SCLLINE. = ''                     /* reset stem var */                       
   SCLLINE.0 = 0                     /* and counter */                          
   return SCLLINE.0                  /* normaly return the number of lines */   
end                                                                             
                                                                                
if ARG(1) == 'EXECIO' then do        /* We need to write our lines to arg(2) */ 
   OUTDD = ARG(2)                    /* reset Output   */                       
   "EXECIO * DISKW" OUTDD "(STEM SCLLINE. FINIS" /* write all output */         
   return RC                         /* Return The RC in this case */           
end                                                                             
                                                                                
if ARG(1) == 'GETALL' then do        /* Return all SCL */                       
   ALLSCL = ''                       /* reset Output   */                       
   do I = 1 to SCLLINE.0             /* For each saved line */                  
     ALLSCL = ALLSCL || LEFT(SCLLINE.i,80) /* append the SCL line */            
   end                                                                          
   return ALLSCL                     /* Return all the SCL as a single str */   
end                                                                             
        /* still here?  Must have some SCL to save... */                        
   do j = 1  by 72 while j < length(ARG(1))                                     
      i = SCLLINE.0 + 1              /* increment the line count */             
      SCLLINE.i = substr(ARG(1),j,72)/* save next chunk */                      
      SCLLINE.0 = i                  /* and the new count */                    
   end                                                                          
   return SCLLINE.0                  /* always return the number of lines */    
                                                                                
exit 999                             /* should never hit this */                
