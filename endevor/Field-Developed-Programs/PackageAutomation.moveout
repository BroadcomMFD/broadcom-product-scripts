./  ADD  NAME=@README                     
These are rex/CSIQCLS0 : @site BILDTGGR PKGESHIP PKGEXECT PULLTGGR TBLUNLOD UPDTTGGR WHERE@M1 WHEREIAM 
These are asm          : C1UEXSHP APIALSUM APIALDST 
These are cob          : C1UEXSHP C1UEXT07 
These are skl/CSIQSENU : PKG#MODL SHIP#FTP SHIPLOCL SHIPMODL 
These are tbl          : PKGEEXEC SHIPRULE 
These are jcl          : SWEEPJOB 
These are txt          : TRIGGER 
./  ADD  NAME=@site                
   /*   REXX  */
   PARSE ARG Parm

/* Required for all Bundles :   */
   /* Enter High Level Qualifiers */
   SHLQ='IPRFX.IQUAL'   /* Systems High Level Qualifier */
   FHLQ='IPRFX.IQUAL'   /* Field Developed Program (FDP) HLQ */
   AHLQ='UPRFX.UQUAL'   /* Applications High Level Qualifier */
   /* Enter the name of the main Libraries for CA Services tools */
/* APF Authorized libraries:   \    */
   MyAUTULibrary = SHLQ'.CSIQAUTU'
   MyAUTHLibrary = SHLQ'.CSIQAUTH'
   MyLOADLibrary = SHLQ'.CSIQLOAD'
   MyLOA2Library = FHLQ'.CSIQLOA2'
/* Non-APF Authorized library: \    */
   MyUTILLibrary = FHLQ'.CSIQLOA2'
   MyCLS0Library = SHLQ'.CSIQCLS0'
   MyCLS2Library = FHLQ'.CSIQCLS2'
   MyOPTNLibrary = SHLQ'.CSIQOPTN'
   MyOPT2Library = FHLQ'.CSIQOPT2'
   MyMENULibrary = SHLQ'.CSIQMENU'
   MyMEN2Library = FHLQ'.CSIQMEN2'
   MyPENULibrary = SHLQ'.CSIQPENU'
   MyPEN2Library = FHLQ'.CSIQPEN2'
   MySENULibrary = SHLQ'.CSIQSENU'
   MySEN2Library = FHLQ'.CSIQSEN2'
   MyTENULibrary = SHLQ'.CSIQTENU'
   MyTEN2Library = FHLQ'.CSIQTEN2'
   MySampLibrary = SHLQ'.CSIQSAMP'
   MyDATALibrary = SHLQ'.CSIQDATA'
   MyJCLLibrary  = SHLQ'.CSIQJCL'
   MyJCL2Library = FHLQ'.CSIQJCL2'
   MySRC2Library = FHLQ'.CSIQSRC2'
   /* JOB INFO FOR ALTERNATE ID & CONVERSION JOBS*/
   JnmPfx        = userid() /* default job name prefix */
   AltIDAcctCode = '55800000'
   AltIDJobClass = 'B'
   AltIDMsgClass = 'X'

/* Bundle Switch Area  */
   PackageBundle = 'N'
   ParallelDevelopmentBundle = 'N'
   QuickEditBundle = 'N'

/************************************************************/
/* Required for the Package Functions bundle :   */
   SchedulingPackageShipBundle = 'Y'  ;/* Auto/Sched Shipping */
   MyHomeAddress  = '?????' ; /* Use HOMETEST for ip address */
   /* If SchedulingPackageShipBundle, list Transmission methods  */
   TransmissionMethods = 'NETVIEW_FTP LOCAL   '
   /* If SchedulingPackageShipBundle, list Shipment Models (JCL) */
   TransmissionModels  = 'SHIP#FTP    SHIPLOCL'

   /* Select one of the following - Usually 'Rules' */
   ShipSchedulingMethod = 'One  '     ;/* 1  Destination  */
   ShipSchedulingMethod = 'None '     ;/* No Shipping     */
   ShipSchedulingMethod = 'Notes'     ;/* Use PKG Notes   */
   ShipSchedulingMethod = 'Rules'     ;/* Rules / Notes   */
   /* Verify the name of the Trigger File - must be allocated */
   TriggerFileName = AHLQ'.SHIPMENT.TRIGGER'

  /* If you want to schedule production moves                   */
  /* or package shipping, use the SchedulingOption              */
   SchedulingOption  = ' '      ;  /* no scheduling of any kind */
  /*    The 'Move to' option causes the execution window to be  */
  /*              automatically updated for named Env and stage */
   SchedulingOption  = 'MOVE TO   SMPLPROD P'
  /*    The 'SHIP FROM' option causes automated shipments for   */
  /*              packages that delivered to the  Env and stage */
   SchedulingOption  = 'SHIP FROM SMPLPROD P'

/************************************************************/
/* Required for the Parallel Development Support bundle :   */
   /* For XFER processing (Parallel Bundle)      :   */
   /* Select one line and comment out or delete the other: */
   XFER_AutoExecute = 'Y' ;  /* Auto Execute XFER packages     */
   XFER_AutoExecute = 'N' ;  /* Manual or Other Package Execution */
     /*Note: Other Package Execution requires the              */
     /*      Package Bundle Implementation                     */
     /*  This option should be 'N' if Package Bundle is installed */

/* For ALIASE processing (Parallel Bundle)      :   */
   ALIASE_LibraryPrefix    = AHLQ  ; /* Lib and Alias prefix  */
     /*  Note: Required: Typically indicates the Application HLQ */
     /*        for COPY and LOAD datasets in the         */
     /*        Endevor development environment .       */
   ALIASE_Generate_Process = 'Y'  ; /* Use an Endevor processor */
     /*  Note: 'Y' requires installation of a processor, */
     /*        Like the GALIAS processor provided.       */
     /*        Addtionally, a type named ALIAS must be   */
     /*        defined in development Environment .    */
   ALIASE_Generate_Process = 'N'  ; /* Just make Aliases */
     /*  Note: 'N' is the typical and simple choice for  */
   /*        this option.                              */

 ALIASE_Subsystem        = ''   ;     /* Use related subsys    */
   /*  Note: Applicable only if ALIASE_Generate_Process = 'Y'  */
   /*        If blank, ALIAS elements will be placed   */
   /*           into the same Subsystem they relate to.*/
   /*        If non-blank, Alias elements will be      */
   /*           placed into the named Subsystem.       */
/************************************************************/
/* Required for the Quick-Edit bundle :   */
   AlertRexxProgram = 'PDA'  ; /* Use PDA or PDNF3 or BC1PPDNR */
   /* Verify the name of the Endevor Element Catalog file */
   ElementCatalogName = 'CAPRD.END40.SMPL.ELMCATL'
   /* Enter one or more mapping representations  (not Prod)    */
   /*       where PDA should search for inventory.             */
   PDAMaplist = ,        /* required only for PDA  */
      " SMPLTEST/T-SMPLTEST/Q ",
      " SMPLPROD/E-SMPLPROD/E "
   /* Enter a value for the temporary element name used by     */
   /* RETRO actions:                                           */
   /*  '1'   Use the original element name and '##' suffix.    */
   /*        You must support 10-char element names with this  */
   /*        option                                            */
   /* 'user' Use the userid of the person executing the RETRO  */
   /*        extended to 8 characters with the use of '#'      */
   /*        extended to 8 characters with the use of '#'      */
   /*'<name>'Use the designated name - one that is not used for*/
   /*        any real elements in the Endevor inventory.       */
   /* Select one and enter value...                            */
   RetroTempName ='1'      ;  /*original element name and '##' */
   RetroTempName ='QQQQQQQQ'  /*replace 'QQQQQQQ' with name    */
   RetroTempName ='user'   ;  /*userid and '##'                */

/************************************************************/
/* Required for the SnapMon (Endevor Activity feature:      */
/************************************************************/
   SNAPMOND = "Y,,0,*,*,IS ACTIVE IN SCREEN*,"  || ,
          "Y,XSYS,0,*,CTLIELEM,*,"              || ,
              "Y,,0,*,LSERVDSN,*,"              || ,
              "Y,,0,*,FDPDSN,"MyCLS2Library","  || ,
              "Y,,0,*,SYSDSN,"AHLQ"*,"          || ,
              "Y,,0,*,SYSDSN,"SHLQ".CSIQPLD*,"  || ,
              "N,,0,*,SYSDSN,SYS7.ENDEVOR.*,"
   /*
     The SanpMon defaults are set as a single value
     that is in effect a comma delimited table.
     Each row contains:
       * Yes/No Flag to indicate if this line is active
       * XSYS value or blank to indicate if XSYS is searched
       * Limit (or zero for none) to limit the Enqueues returned
       * Resource fliter (or * for all)
       * Queue Name (or * for all)
       * Resource Name (or * for all)

     The default entries include ENQueue searches for the
     Endevor ISPF sessions, Element enqueus (CTLIELEM),
     L-Serv enqueus (used by Endevor to searlialise L-Serv access)
     and a few sample SYSDSN entries which are filtered to find
     the ACMROOT, Elelmet Catalog and Package files. A special
     entry with Queue Name FDPDSN will be counted to hilite
     users with the FDP clist dataset allocated.

     Note: Because comma is used as the delimiter, each row should
           contain exactly six(6) commas. i.e. no commas in the "data"
           The current limit is nine(9) rows.
   */
/***************************************************************/
/* REQUIRED FOR ENDEVOR HILITE SYSVIEW SUPPORT                 */
/* SPECIFY THE HIGH LEVEL QUALIFIER FOR SYSVIEW (.CMN4BLOD)    */
/* MySysviewPref = 'CAIPROD.SYSVW.R150S2' */
   MySysviewPref = 'CAIPROD.SYSVW.R1600.CAR2001'
/***************************************************************/
 /* do not alter following - required for all bundle processing */
/************************************************************/
 /* do not alter following - required for all bundle processing */
   IF   SYMBOL(Parm)='VAR' THEN RETURN VALUE(Parm)
   ELSE RETURN 'Not-valid:'||Parm
   EXIT
          
./  ADD  NAME=BILDTGGR                
/*  REXX  */
/* From Rules info, update Trigger file for each expected shipment */

   /* If a DDNAME of BILDTGGR is allocated, then Trace */
   WhatDDName = 'BILDTGGR'
   CALL BPXWDYN "INFO FI("WhatDDName")",
              "INRTDSN(DSNVAR) INRDSNT(myDSNT)"
   if Substr(DSNVAR,1,1) /= ' ' then TraceRc = 1;
   IF TraceRc = 1 then Trace R

/* Variable settings for each site --->           */
   /* Determine the DSORG for TriggerFileNAme     */
   /* x = LISTDSI("'"TriggerFileName"'" RECALL ); */
   TriggerFileDsorg = 'PS' ;     /* VS / PS .... */

   WhereIam =  WHERE@M1()

   interpret 'Call' WhereIam "'MyCLS2Library'"
   MyCLS2Library = Result
   Say 'Running BILDTGGR in' MyCLS2Library

   interpret 'Call' WhereIam "'TriggerFileName'"
   TriggerFileName = Result

   interpret 'Call' WhereIam "'MyDATALibrary'"
   MyDATALibrary = Result
   ShipRules       = MyDATALibrary"(SHIPRULE)"

   interpret 'Call' WhereIam "'MySEN2Library'"
   MySEN2Library = Result
/* <---- Variable settings for each site          */

/*                                                                    */
/* This Rexx creates Trigger entrires for a package just executed.    */
/* It is called by the Endevor exit program C1UEXT07   */
/*                                                                    */
/*                                                                    */
   STRING = "ALLOC DD(SYSTSPRT) SYSOUT(A) "
   CALL BPXWDYN STRING;

   /* Do not allow the Trace to start until after the allocation
      above for SYSTSPRT.
   */

   ARG Parms ;

/* if called by zowe, then this  is  the Argument ....   */
   If Length(Parms) < 18 then,
      Do
      Package = Translate(Parms,' ',"'")
      Package = Strip(Package)
      Say Length(Package) Package
      End /* If Length(Parms) < 18 */
   Else
      Do
      /* if called by exit, then these are the Arguments.... */
      Notes.7  = Substr(PARMS,414,60) ;
      If Substr(Notes.7,1,5) = 'TRACE' then Trace r
      Package = Substr(PARMS,1,16) ;
/*  No longer attempting to leverage promotion packages
      Environ = Substr(PARMS,18,08) ;
     pkgStage = Substr(PARMS,27,01) ; */
      CREATE_USER = Substr(PARMS,29,08) ;
      UPDATE_USER = Substr(PARMS,37,08) ;
      CAST_USER = Substr(PARMS,45,08) ;
      Notes.1  = Substr(PARMS,054,60) ;
      Notes.2  = Substr(PARMS,114,60) ;
      Notes.3  = Substr(PARMS,174,60) ;
      Notes.4  = Substr(PARMS,234,60) ;
      Notes.5  = Substr(PARMS,294,60) ;
      Notes.6  = Substr(PARMS,354,60) ;
      Notes.7  = Substr(PARMS,414,60) ;
      Notes.8  = Substr(PARMS,474,60) ;
      ShipOutput = Substr(PARMS,584,03) ;
      End /*  Else  */

/* TYPRUN = ' ' */

   Userid    = CAST_USER  ;
   MyRC = 0 ;
   /* Intitialize a list of shipments for this package */
   Shipment_List = ''


   /*   Install Date 06 JUN 2013 15:22   */
   /*   ----+----1----+----2----+----3-- */

   rulSt  = '_'
   InstallDate = Word(Notes.8,5) ;

   If InstallDate = '' | Word(Notes.8,1) /= 'SHIP' then,
      Do
      InstallDate = DATE('S')
      InstallTime = '0000'
      rulSt  = 'R' ; /* This Trigger file entry to be Reviewed */
      End
   Else,
      Do
      InstallTime = Word(Notes.8,6) ;
      InstallTime = Substr(Installtime,1,2) || Substr(Installtime,4)
      ListMonths =,
        "JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC" ;
      mon = Substr(InstallDate,3,3) ;
      mon#= Right(Wordpos(mon,ListMonths),2,'0') ;
      year = Substr(InstallDate,6)
      Century = '20'    ;
      day  = Substr(InstallDate,1,2) ;
      InstallDate = Century || year || mon# || day
      End

   Call DateConvert ;

   /* Capture Content of Rules into Rexx Stem array format */
   Call AllocateandReadRules;
   if TraceRc = 1 then Trace r
   $rulHeading_Variable_count = Words($heading.SHIPRULE)

/* Examine Package actions and                           */
/* compare each against the Rules stem array data        */
/* make an entry into the ImmediateTrigger stem array    */
/* Do one of these:
   Call APIALSUM_For_Package_Target_Info ;
           -- or ---
   Call CSV_to_List_Package_Actions
      **Note CSV_to_List_Package_Actions has a timing problem
        on the 18.0.12 release. The package shows it is not yet
        Executed. Use APIALSUM_For_Package_Target_Info
*/

   Call APIALSUM_For_Package_Target_Info ;

   sa = pkgEnvironment pkgStage

   If Words(Shipment_List) > 0 then,
      Do
      Call FreeTriggerFile ;
      Say 'BILDTGGR: Found these destinations -' Shipment_List
      Exit(1)
      End
/*                                                                    */
/* All Done                                                           */
/*                                                                    */
   Exit(0)

/*                                                                    */
/* Allocate the Rules member  for Read only                           */
/*                                                                    */

AllocateandReadRules:

   If TraceRc = 1 then Say 'AllocateandReadRules+             '
   /* Call utility to get SHIPRULE details */
   /* Save ShipRule in stem array data         */
   Call TBLUNLOD  ShipRules "ALL"

   LastRecord.T#SYSTMS = 0
   /* Capture results from utility */
   qtotal = QUEUED()
   Trace Off

   /* Capture contents of ShipRule table */
   Value.SHIPRULE = ' '
   Do q# = 1 to qtotal
      Parse Pull something
      If TraceRc = 1 then Say "Rules+" something
      interpret something
   End;

   Return ;

/*                                                                    */
/* Convert Date formats                                               */
/*                                                                    */

AllocateTriggerForMod:

   STRING = "ALLOC DD(TRIGGER)",
              " DA('"TriggerFileName"') MOD REUSE"
   seconds = '000005' /* Number of Seconds to wait if needed */

   Do Forever  /* or at least until the file is available */
      CALL BPXWDYN STRING;
      MyResult = RESULT ;
      If MyResult = 0 then Leave
      Say 'BILDTGGR is waiting for' TriggerFileName
      Call WaitAwhile
   End /* Do Forever */

   Return ;

CreateNewTriggerEntry:

   If TraceRc = 1 then Say 'CreateNewTriggerEntry+            '
   If TraceRc = 1 then Trace r
   Jobnumber = '  ';
/* Time = TIME()
   Time = Substr(Time,1,2) || Substr(Time,4,2) */
   Time = rulTime ;

   Say 'My_BILDTGGR Creating new Trigger file Entry'
   rulAdjustDate = Strip(rulAdjustDate,'L','+') ;
   rulAdjustDate = Strip(rulAdjustDate)
   #days = DATE('B')
   #days = DATE('B',InstallDate,'S') ;
   if rulAdjustDate < '0' then rulAdjustDate = '0'
   #days = #days + rulAdjustDate ;
   TriggerDate = DATE('S',#days,'B') ;
   Date = DATE('S',#days,'B') ;

   Trigger = Copies(' ',400) ;

   $Heading_TriggerVar_count = WORDS($trigger_variables) ;
   Do $pos = 1 to $Heading_TriggerVar_count
      $HeadingVariable = Word($trigger_variables,$pos) ;
      /* Build ...pos variables and values */

      tmp = "Trigger = Overlay(",
            $HeadingVariable",Trigger,"$HeadingVariable"pos)"

      Sa= tmp
      Interpret tmp
   end; /* DO $pos = 1 to $Heading_TriggerVar_count */

   Sa= Trigger

   Push Trigger

   "EXECIO 1 DISKW TRIGGER (FINIS"

   Trace Off
   Return ;


FreeTriggerFile:

   STRING = "FREE DD(TRIGGER)"
   CALL BPXWDYN STRING;

   Return ;

/*                                                                    */
/* Convert Date formats                                               */
/*                                                                    */

DateConvert:

  /* Date may be in this format  6/15/2013 */
  tmpdate = Translate(InstallDate,' ','/') ;
  If Wordlength(tmpdate,1) < '4' then do
  InstallDatenumeric = Word(tmpdate,3)    ||,
               Right(Word(tmpdate,1),2,'0') ||,
                     Word(tmpdate,2)       ;
  end
  else do
  InstallDatenumeric = Word(tmpdate,1) || ,
                       Word(tmpdate,2) ||,
                       Word(tmpdate,3)   ;
  end
  Return

  if Substr(InstallDate,1,1) = '0' then
     InstallDate = Substr(InstallDate,2)
  MONTHSLISTUPPER = 'JAN FEB MAR APR MAY JUN JUL AUG SEP NOV DEC'
  monthslistlower = 'Jan Feb Mar Apr May Jun Jul Aub Sep Nov Dec'
  MONTHUPPER = Word(InstallDate,2) ;
  pos = Wordpos(MONTHUPPER,MONTHSLISTUPPER)
  monthlower = Word(monthslistlower,pos) ;
  InstallDate = Word(InstallDate,1) monthlower Word(InstallDate,3)

  InstallDatenumeric = DATE(S,InstallDate)
  Sa= InstallDate  InstallDatenumeric

  Return

WaitAwhile:
  /*                                                               */
  /* A resource is unavailable. Wait awhile and try                */
  /*   accessing the resource again.                               */
  /*                                                               */
  /*   The length of the wait is designated in the parameter       */
  /*   value which specifies a number of seconds.                  */
  /*   A parameter value of '000003' causes a wait for 3 seconds.  */
  /*                                                               */

  seconds = Abs(seconds)
  seconds = Trunc(seconds,0)
  Say "Waiting for" seconds "seconds at " DATE(S) TIME()

  /* AOPBATCH and BPXWDYN are IBM programs */
  CALL BPXWDYN  "ALLOC DD(STDOUT) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDERR) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDIN) DUMMY SHR REUSE"

  /* AOPBATCH and BPXWDYN are IBM programs */
  parm = "sleep "seconds
  Address LINKMVS "AOPBATCH parm"

  Return

InitializeValuesFromRules:
   Sa=   InitializeValuesFromRules
   Do $pos = 1 to $rulHeading_Variable_count
      $rulHeadingVariable = Word(Rul$table_variables,$pos) ;
      $start = $rulStarting_$position.$rulHeadingVariable
      $stop  = $rulEnding_$position.$rulHeadingVariable
      $len   = $stop - $start + 1;
      /* Assign values from the rules record  */
      tmp = $rulHeadingVariable" =",
            "Strip(Substr(rules.rul#,"$start","$len"))"
      Sa= tmp
      Sa= Value($rulHeadingVariable)
      Interpret tmp

   end; /* DO $pos = 1 to $rulHeading_Variable_count */

   Return ;

Process_Trigger_Heading :

   "EXECIO 1 DISKR TRIGGER (Stem $tablerec. FINIS"
/* Get layout of TRIGGER file from heading */

/* The subroutine below is modified from the TBL#TOOL                 */

   $tbl = 1 ;
   $TableHeadingChar = '*'

   $LastWord = Word($tablerec.$tbl,Words($tablerec.$tbl));
   If DATATYPE($LastWord) = 'NUM' then,
      Do
      Say 'Please remove sequence numbers from the Table'
      Exit(12)
      End

   $tmprec = Substr($tablerec.$tbl,2) ;
   $PositionSpclChar = POS('-',$tmprec) ;
   If $PositionSpclChar = 0 then,
      $PositionSpclChar = POS('*',$tmprec) ;
   $tmpreplaces = '-,.'$TableHeadingChar ;
   $tmprec = TRANSLATE($tmprec,' ',$tmpreplaces);
   $table_variables = strip($tmprec);
   $Heading_Variable_count = WORDS($table_variables) ;
   If $Heading_Variable_count /=,
      Words(Substr($tablerec.$tbl,2)) then,
      Do
      Say 'Invalid table Heading:' $tablerec.$tbl
      exit(12)
      End

   $heading = Overlay(' ',$tablerec.$tbl,1); /* Space leading * */
   Do $pos = 1 to $Heading_Variable_count
      $HeadingVariable = Word($table_variables,$pos) ;
      $tmp = Wordindex($Heading,$pos) ;
      $Starting_$position.$HeadingVariable = $tmp
      $tmp = $tmp + Length(Word($Heading,$pos)) -1 ;
      $Ending_$position.$HeadingVariable = $tmp

      /* Build ...pos variables and values */
      tmp = ""$HeadingVariable"pos =",
             $Starting_$position.$HeadingVariable
      Sa= tmp
      Interpret tmp

   end; /* DO $pos = 1 to $Heading_Variable_count */

   $Heading = Translate($Heading,' ','-*')
   $trigger_variables = $Heading

   Return ;

APIALSUM_For_Package_Target_Info:

  SA= "GETTING CURRENT LOCATIONS FROM ENDEVOR" ;

   STRING = "ALLOC DD(BSTAPI)   SYSOUT(A) "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTERR)   SYSOUT(A) "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(C1MSGS1)  SYSOUT(A) "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(C1MSGS2)  SYSOUT(A) "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(APILIST) LRECL(2048) BLKSIZE(22800) ",
              " DSORG(PS) ",
              " SPACE(5,5) RECFM(V,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(APIMSGS) LRECL(133) BLKSIZE(13300) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

  /*  Call the APIALSUM api program */
  ADDRESS LINKMVS 'APIALSUM' Package
  CallRc = Rc;
  If CallRc /= 0 then,
     Do
     parm = 'DDN:STEPLIB,APIALSUM,'Package
     ADDRESS LINKMVS 'CONCALL' "parm"
     End

  "EXECIO * DISKR APILIST (STEM pkglst. finis"
  IF pkglst.0 = 0 then,
     Do
     Say 'Package' Package ' is not-found or not-CAST '
     Exit(8)
     End;

   STRING = "FREE DD(BSTAPI)"
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTERR) "
   CALL BPXWDYN STRING;
   STRING = "FREE DD(C1MSGS1) "
   CALL BPXWDYN STRING;
   STRING = "FREE DD(C1MSGS2) "
   CALL BPXWDYN STRING;

   sa= pkglst.1
   /* Get Target Endevor info   */

   Do api# = 1 to pkglst.0
     ALSUM_RS_TENV = Substr(pkglst.1,304,008)
     pkgEnvironment = ALSUM_RS_TENV
     If pkgEnvironment = ' ' then
        Do
        ALSUM_RS_SENV = Substr(pkglst.1,191,008)
        ALSUM_RS_SSTGI= Substr(pkglst.1,234,001)
        ALSUM_RS_SSYS = Substr(pkglst.1,199,008)
        ALSUM_RS_SSBS = Substr(pkglst.1,207,008)
        Sa= 'Messages from BILDTGGR:'
        pkgEnvironment = ALSUM_RS_SENV
        pkgStage = ALSUM_RS_SSTGI
        pkgSystem = ALSUM_RS_SSYS
        pkgSubsys = ALSUM_RS_SSBS
        End
     Else,
        Do
        ALSUM_RS_TSTGI= Substr(pkglst.1,347,001)
        ALSUM_RS_TSYS = Substr(pkglst.1,312,008)
        ALSUM_RS_TSBS = Substr(pkglst.1,320,008)
        Sa= 'Messages from BILDTGGR:'
        pkgEnvironment = ALSUM_RS_TENV
        pkgStage = ALSUM_RS_TSTGI
        pkgSystem = ALSUM_RS_TSYS
        pkgSubsys = ALSUM_RS_TSBS
        End

     ALSUM_RS_TTYP = Substr(pkglst.1,330,008)
     RuleMatch  = 'N'
     Call DoesPkgMatchRule;
   End; /* Do api# = 1 to pkglst.0  */

   sa= pkglst.2
   sa= pkglst.3
   sa= pkglst.4

   STRING = "FREE DD(APIMSGS)"
   CALL BPXWDYN STRING;
   STRING = "FREE DD(APILIST)"
   CALL BPXWDYN STRING;

  Return ;

CSV_to_List_Package_Actions:

  /* To Search the package shipping table, we need the Entry       */
  /*    Environment information as a search criteria.              */
  /*    Get it from the USER-DATA field on the 1st element.        */

   STRING = "ALLOC DD(C1MSGS1) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTERR) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTAPI) DUMMY "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(EXTRACTM) LRECL(4000) BLKSIZE(32000) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(BSTIPT01) LRECL(80) BLKSIZE(800) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   QUEUE "LIST PACKAGE ACTION FROM PACKAGE '"Package"'"
   QUEUE "     TO DDNAME 'EXTRACTM' "
   QUEUE "     ."

   "EXECIO" QUEUED() "DISKW BSTIPT01 (FINIS ";

   ADDRESS LINK 'BC1PCSV0'   ;  /* load from authlib */

/* ADDRESS TSO  'ISRDDN' */
   call_rc = rc ;

  "EXECIO * DISKR EXTRACTM (STEM CSV. finis"

   STRING = "FREE DD(EXTRACTM)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTIPT01)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(C1MSGS1)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTERR)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTAPI)" ;
   CALL BPXWDYN STRING;
  /* To Search the package action data in CSV format.              */
  /* Identify matches with Rules file, determining Ship Dests      */

  IF CSV.0 < 2 THEN RETURN;

  /* CSV data heading - showing CSV variables */
  $table_variables= Strip(CSV.1,'T')

  $table_variables = translate($table_variables,"_"," ") ;
  $table_variables = translate($table_variables," ",',"') ;
  $table_variables = translate($table_variables,"@","/") ;
  $table_variables = translate($table_variables,"@",")") ;
  $table_variables = translate($table_variables,"@","(") ;

  Do rec# = 2 to CSV.0
     $detail = CSV.rec#
     Drop SBS_NAME_@T@

     Trace Off
     /* Parse the Detail record until done */
     Do $column =  1 to Words($table_variables)
        Call ParseDetailCSVline
     End

     If TraceRc =  1 then Trace r
     IF Substr(ENV_NAME_@T@,1,1) = ' ' then,
        Do
        ENV_NAME_@T@ = ENV_NAME_@S@ ;
        STG_#_@T@    = STG_#_@S@  ;
        STG_NAME_@T@ = STG_NAME_@S@ ;
        STG_ID_@T@   = STG_ID_@S@   ;
        SYS_NAME_@T@ = SYS_NAME_@S@ ;
        SBS_NAME_@T@ = SBS_NAME_@S@ ;
        TYPE_NAME_@T@ = TYPE_NAME_@S@
        End
     IF Substr(SBS_NAME_@T@,1,1) = ' ' then,
        SBS_NAME_@T@ = SBS_NAME_@S@ ;
     Say 'ELM='ELM_@S@,
         'ENV_NAME='ENV_NAME_@T@,
         'pkgStage='STG_#_@T@,
         'SYS_NAME='SYS_NAME_@T@,
         'SBS_NAME='SBS_NAME_@T@,
         'TYPE_NAME='TYPE_NAME_@S@,
         'ELM_ACT='ELM_ACT
      pkgStage = STG_ID_@T@

     If TraceRc = 1 then Trace r
     Sa= 'Messages from BILDTGGR:'
     pkgElement = ELM_@S@
     pkgEnvironment = ENV_NAME_@T@
     pkgStage       = STG_ID_@T@
     pkgSystem      = SYS_NAME_@T@
     pkgSubsys      = SBS_NAME_@T@
     pkgType        = TYPE_NAME_@T@
        Trace Off
     RuleMatch  = 'N'
     Call DoesPkgMatchRule;
/*   If Length(pkgStage) = 1 then leave; */
  End; /* Do rec# = 1 to CSV.0 */

  RETURN ;

DoesPkgMatchRule:

  If TraceRc = 1 then Say 'DoesPkgMatchRule+                 '

  Do rul# = 2 to LastRecord.SHIPRULE

     If TraceRc = 1 then TRACE R
     Say 'BILDTGGR: Comparing pkg with rul#' rul# pkgElement,
               pkgEnvironment pkgStage pkgSystem

     Drop Environment ;
     rulEnvironment = Value.SHIPRULE.Environment.rul#
     If TestMatch(pkgEnvironment,rulEnvironment) /= 1 then Iterate;
     Environment = pkgEnvironment

     Drop Stage
     rulStage = Value.SHIPRULE.Stage.rul#
     If TestMatch(pkgStage,rulStage) /= 1 then Iterate;
     Stage  = pkgStage

     Drop System
     rulSystem= Value.SHIPRULE.System.rul#
     If TestMatch(pkgSystem,rulSystem) /= 1 then Iterate;
     System = pkgSystem

     Drop Subsys
     rulSubsys= Value.SHIPRULE.Subsys.rul#
     If TestMatch(pkgSubsys,rulSubsys) /= 1 then Iterate;
     Subsys = pkgSubsys

/*
     Drop Type
     rulType  = Value.SHIPRULE.Type.rul#
     If TestMatch(pkgType,rulType) /= 1 then Iterate;
     Type   = pkgType

     Drop Element ElmPrefx
     rulElmPrefx= Value.SHIPRULE.ElmPrefx.rul#
     If TestMatch(pkgElement,rulElmPrefx) /= 1 then Iterate;
     Element = pkgElement
*/

     Drop Destination
     newDestination= Value.SHIPRULE.Destination.rul#
     If TraceRc = 1 then,
        Say 'found newDestination=' newDestination

     if Length(newDestination) > 7 |,
        Pos('.',newDestination) > 0 |,
        Wordpos(newDestination,Shipment_List) > 0 then,
        Iterate ;

     Shipment_List = newDestination Shipment_List
     If TraceRc = 1 then,
        Say 'Shipment_List =' Shipment_List

     /* If finding first destination for shipping     */
     /* then, allocate Trigger file for DISP=MOD      */
     If Words(Shipment_List) = 1 then,
        Do
        Call AllocateTriggerForMod
        Call Process_Trigger_Heading
        End

     Destination = newDestination

     Drop Date
     rulAdjustDate = Value.SHIPRULE.Date.rul#
     If TraceRc = 1 then,
        Say 'found rulAdjustDate =' rulAdjustDate
     Drop Time
     rulTime       = Value.SHIPRULE.Time.rul#
     If TraceRc = 1 then,
        Say 'found rulTime       =' rulTime


     /* Capture remaining values from Rules file ..    */
     AlreadyAssigned =,
        'Environment Stage System Subsys ',
        'Type Destination Element Date Time '
     Do w# = 1 to Words($heading.SHIPRULE)
        rulWord =  Word($heading.SHIPRULE,w#)
        If Wordpos(rulWord,AlreadyAssigned) > 0 then iterate;
        tmp = "Drop" rulWord
        interpret tmp
        rulValue = Value(Value.SHIPRULE.rulWord.rul#)
        If Substr(rulValue,1,15) = 'VALUE.SHIPRULE.' then,
           rulValue = ' '
        tmp = rulWord "= '"rulValue"'"
        If TraceRc = 1 then,
           say 'From Rules+' tmp
        interpret tmp
     End

     /* Variables are now assigned values either from  */
     /*  the Endevor package or from the Rules File    */
     Call CreateNewTriggerEntry

     If TraceRc = 1 then Trace r
     /* If the package shipment can be done now....    */
     /* Set the return code to 1               ....    */
     Drop Date
     rulDate    = Value.SHIPRULE.Date.rul#
     if rulDate = ' ' | Length(rulDate) > 5 then,
        rulDate = '+0'
     if rulTime = ' ' | Length(rulTime) > 5 then,
        rulTime = '0000'
     If rulDate = '+0' & rulTime = '0000' then,
        MyRC = 1 ;

  End; /* Do rul# = 2 to LastRecord.SHIPRULE */

  RETURN ;

TestMatch:

  Arg String,Mask ;

      If Mask  = '*' then Return(1)
      Mask     = Strip(Mask,'T',"*")
      lenMask  = Length(Mask)
      Return ABBREV(String,Mask)

/*                                                                    */

ParseDetailCSVline:

  /* Find the data for the current $column */

  $dlmchar = Substr($detail,1,1);

  If $dlmchar = "'" then,
     Do
     SA= 'parsing with single quote '
     PARSE VAR $detail "'" $temp_value "'" $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = '"' then,
     Do
     SA= 'parsing with double quote '
     PARSE VAR $detail '"' $temp_value '"' $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = ',' then,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail ',' $temp_value ',' $detail ;
     If Substr($detail,1,1)/= ',' then,
        $detail = "," || $detail
        $detail = Strip(Substr($detail,2),'L')   */
     End
  Else,
  If Words($detail) = 0 then,
     $temp_value = ' '
  Else,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail $temp_value ',' $detail ;
     Sa= '$temp_value=>' $temp_value '<'
     End
  $temp_value = STRIP($temp_value) ;
  $rslt = $temp_value
  $rslt = Strip($rslt,'B','"')                             ;
  $rslt = Strip($rslt,'B',"'")                             ;
  if Length($rslt) < 1 then $rslt = ' '
  if Length($rslt) < 250 then,
     $temp = WORD($table_variables,$column) '= "'$rslt'"';
  Else,
     $temp = WORD($table_variables,$column) "=$rslt"
  INTERPRET $temp;
  If rec# < 3 then Say $temp

  RETURN ;

          
./  ADD  NAME=C1UEXSHP                
C1UEXSHP TITLE 'ENDEVOR/MVS Package Shipping Exit'
***********************************************************************
*   DESCRIPTION: THIS PACKAGE EXIT PROGRAM WILL EXTRACT               *
*                call the rexx program PKGESHIP to support            *
*                automated package shipping submissions.              *
*                                                                     *
*   SETUP        THE SETUP ROUTINE ENABLES THIS PROGRAM               *
*                AT THE FOLLOWING EXIT POINTS:                        *
*                                                                     *
*       =====>   1. POST Execute                                      *
*                2. POST Backout                                      *
*                2. POST Backin                                       *
*                                                                     *
*                                                                     *
*   REGISTERS ON ENTRY:                                               *
*                                                                     *
*                0(R1) --> $PECBDS     EXIT CONTROL BLOCK             *
*                4(R1) --> $PREQPDS    EXIT REQUEST BLOCK             *
*                8(R1) --> $PHDRDS     EXIT HEADER BLOCK              *
*               12(R1) --> $PFILDS     EXIT FILE BLOCK                *
*               16(R1) --> $PACTREQ    EXIT ACT SUMMARY REQUEST       *
*               24(R1) --> $PBODREQ    EXIT BACKOUT REQUEST           *
*                                                                     *
*   REGISTER USAGE:                                                   *
*                                                                     *
*                R6     -> $PECBDS                                    *
*                R7     -> $PREQPDS                                   *
*                R8     -> WORKAREA                                   *
*                R9     -> $PHDRDS                                    *
*                R12    -> BASE PROGRAM                               *
*                R13    -> STACK USED FOR STANDARD IBM USAGE          *
*                                                                     *
*                                                                     *
***********************************************************************
*   PACKAGE EXIT CONTROL BLOCK                                        *
***********************************************************************
         $PECBDS
***********************************************************************
*   PACKAGE EXIT REQUEST BLOCK                                        *
***********************************************************************
         $PREQPDS
***********************************************************************
*   PACKAGE EXIT HEADER  BLOCK                                        *
***********************************************************************
         $PHDRDS
***********************************************************************
*   REGISTER EQUATES                                                  *
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
***********************************************************************
*   THIS PROGRAM'S WORKAREA MAP                                       *
***********************************************************************
WORKAREA DSECT
*
SAVEAREA DS    18F                     primary function's save-area
*
DYNPARMS DS    6F                                                       01110000
*
REXXPRMS DS    0H         Parameters passed to the REXX PKGESHIP
REX#LEN  DS    H              Parms Length
REX#PGM  DS    CL08        Name of Rexx program called
REX#SP1  DS    CL1            space
REX#PKG  DS    CL16           Package id
REX#SP2  DS    CL1            space
REX#ENV  DS    CL08           Promotion Environment
REX#SP3  DS    CL1            space
REX#STG  DS    CL1            Promotion Stgid
REX#SP4  DS    CL1            space
*EX#COMM DS    CL50           Package Comment
REX#CRUS DS    CL08           Package create userid
REX#UPUS DS    CL08           Package update userid
REX#CAUR DS    CL08           Package Cast   userid
REX#SP5  DS    CL1            space
REX#NOT1 DS    CL60           Package Notes line #1
REX#NOT2 DS    CL60           Package Notes line #2
REX#NOT3 DS    CL60           Package Notes line #3
REX#NOT4 DS    CL60           Package Notes line #4
REX#NOT5 DS    CL60           Package Notes line #5
REX#NOT6 DS    CL60           Package Notes line #6
REX#NOT7 DS    CL60           Package Notes line #7
REX#NOT8 DS    CL60           Package Notes line #8
REX#OUT  DS    CL03           Package shipment output option
REXPRLN  EQU   *-REXXPRMS
*
         DS    CL10
*
WORKLN   EQU   *-WORKAREA
         TITLE 'C1UEXSHP: Automated Shipments'
***********************************************************************
*   MAINLINE LOGIC                                                    *
***********************************************************************
C1UEXSHP CSECT
C1UEXSHP AMODE 31
C1UEXSHP RMODE ANY
         SAVE  (14,12),,'PKG Shipment Exit'  SAVE CALLERS REG 12(13)
         LR    R12,R15                      POINT TO THIS PROGRAM
         USING C1UEXSHP,R12
         L     R6,0(,R1)                    POINT TO THE $PECBDS
         USING $PECBDS,R6
         L     R7,4(,R1)                    POINT TO THE $PREQPDS
         USING $PREQPDS,R7
         L     R9,8(,R1)                    POINT TO THE $PHDRDS
         USING $PHDRDS,R9
***********************************************************************
*   GET STORAGE FOR SAVEAREA                                          *
***********************************************************************
         L     R0,=A(WORKLN)                GET SIZE OF W.A
         GETMAIN R,LV=(0),LOC=BELOW         GET WORKING STORAGE
         LR    R2,R1                        SAVE REG 1
         LR    R14,R2                       ADDR OF OUR LOCAL WORKAREA
         ICM   R15,B'1111',=A(WORKLN)       IT'S SIZE
         SLR   R1,R1
         MVCL  R14,R0                       INITIALIZE IT
*
         ST    R2,8(R13)                    STORE NEW STACK +8(OLD)
         ST    R13,4(R2)                    STORE OLD STACK +4(NEW)
         LR    R13,R2                       POINT R13 TO OUR STACK
         LR    R8,R2
         USING  WORKAREA,R8
***********************************************************************
*        CHECK FOR SETUP CALL                                        *
***********************************************************************
         CLC    PECBFNNM,=CL8'SETUP'        ARE WE AT SETUP
         BNE    MAIN0010                    NO GO CHECK FOR FUNCTION
**********************************************************************
*        ENABLE THE EXIT POINTS FOR THIS PROGRAM                     *
*                                                                    *
*                                                                    *
*  THE FOLLOWING FIELDS ARE USED EXCLUSIVELY DURING SETUP PROCESSING.*
*  THE USER EXIT SHOULD MODIFY THESE FIELDS TO ENABLE EXIT POINTS.   *
*  THIS SETUP IS DONE ONCE PER ENDEVOR SESSION.                      *
*  THE DEFAULT IS 'N'. TO ENABLE SET FIELD TO 'Y'.                   *
*                                                                    *
**********************************************************************
*
SETUP    DS    0H
         MVI   PECBEXBE,C'Y'                ENABLE AFTER  Execute
         MVI   PECBBOBE,C'Y'                ENABLE AFTER Backout
         MVI   PECBBIBE,C'Y'                ENABLE AFTER Backin
*
         MVI   PECBCAMD,C'Y'               MID    CAST
         MVI   PECBCAAF,C'Y'               AFTER  CAST
         MVI   PECBCABE,C'Y'               Before CAST
*
*      Before Package create
         MVI   PECBCBBE,C'Y'               Before create/build
         MVI   PECBCCBE,C'Y'               Before create/copy
         MVI   PECBCEBE,C'Y'               Before create/edit
         MVI   PECBCIBE,C'Y'               Before create/import
*
*      Package modify actions
         MVI   PECBMBBE,C'Y'               MODIFY / BUILD EXIT
         MVI   PECBMCBE,C'Y'               MODIFY / COPY EXIT
         MVI   PECBMEBE,C'Y'               MODIFY / EDIT EXIT
         MVI   PECBMIBE,C'Y'               MODIFY / IMPORT EXIT
         MVI   PECBMBAF,C'Y'               MODIFY / BUILD EXIT
         MVI   PECBMCAF,C'Y'               MODIFY / COPY EXIT
         MVI   PECBMEAF,C'Y'               MODIFY / EDIT EXIT
         MVI   PECBMIAF,C'Y'               MODIFY / IMPORT EXIT
*
         MVI   PECBEABX,C'Y'               Include elm backout/backin
         MVI   PECBUECB,C'Y'               Include elm backout/backin
*
         WTO   'C1UEXSHP  - ASM - in Setup               '
*
         B     MAIN9000                     RETURN TO ENDEVOR
***********************************************************************
*   CHECK FUNCTION                                                            *
***********************************************************************
MAIN0010 DS    0H
*
         CLC   PECBFNNM,=CL8'EXECUTE'       'Execute' ?
         BE    MAIN0020
         CLC   PECBFNNM,=CL8'BACKOUT'       'Back out ?'
         BE    MAIN0020
         CLC   PECBFNNM,=CL8'BACKIN'        'Back In  ?'
         BE    MAIN0020
*
*
***********************************************************************
*   Enforce the Enable Backout option                                         *
***********************************************************************
MAIN0015 DS    0H
         CLI   PREQBOEN,C'Y'                Package Backout enabled?
         BE    MAINEXIT                     RETURN TO ENDEVOR
*
         WTO   'C1UEXSHP - Package Backout enabled.      ',            X
               ROUTCDE=11
*
         MVI   PREQBOEN,C'Y'                ENABLE Package Backout
         MVI   PECBUREQ,C'Y'                MODS MADE TO PREQPDS
         MVC   PECBRTCD,=A(PECB$MOK)        RETURN CODE to upd Endevor
         MVC   PECBNDRC,=A(PECB$MOK)        RETURN CODE to upd Endevor
         B     MAINEXIT                     RETURN TO ENDEVOR
***********************************************************************
*   HAVE WE ALREADY  BEEN HERE?                                       *
***********************************************************************
MAIN0020 DS    0H
         LH    R15,PECBRQRC                 LOAD RETURN CODE FROM NDVR
         CLC   PECBMODE,=CL1'B'             Running Batch or Tso ?
         BNE   MAIN0021                     Bypass SYSEXEC allocation
***********************************************************************
*   Allocate a SYSEXEC library - replace if one is already there      *
***********************************************************************
         LA    R1,ALLOREXX              Allocate a SYSEXEC file
         ST    R1,DYNPARMS                 "
         OI    DYNPARMS,X'80'              "
         LA    R1,DYNPARMS                 "
         LINK  EP=BPXWDYN                  "
         LTR   R15,R15         Verify allocate was successful
         BZ    MAIN0021
*
         WTO   'C1UEXSHP  Unable to allocate SYSEXEC     ',            X
               ROUTCDE=11
*
         B     MAIN9000                     RETURN TO ENDEVOR
***********************************************************************
*   Call PKGESHIP to do the rest of the work...                       *
*        Build parms                                                  *
***********************************************************************
*
MAIN0021 DS    0H
         LA    R1,REXPRLN              Save Rexx Parm length
         STH   R1,REX#LEN                "
         MVC   REX#PGM,=CL08'PKGESHIP'
         MVI   REX#SP1,C' '                enter space
         MVC   REX#PKG,PECBPKID        SAVE PACKAGE ID
         MVI   REX#SP2,C' '                enter space
         MVC   REX#ENV,PHDRENV         Promtion Env
         MVI   REX#SP3,C' '                enter space
         MVC   REX#STG,PHDRSTGID       Promtion Stgid
         MVI   REX#SP4,C' '                enter space
*        MVC   REX#COMM,PREQCOMM       Package Description/Comment
         MVC   REX#CRUS,PHDRCRUS             CREATE USERID
         MVC   REX#UPUS,PHDRUPUS             UPDATE USERID
         MVC   REX#CAUR,PHDRCAUS             CAST USERID
         MVI   REX#SP5,C' '                enter space
         MVC   REX#NOT1,PHDRNOTE1       Package Note line
         MVC   REX#NOT2,PHDRNOTE2       Package Note line
         MVC   REX#NOT3,PHDRNOTE3       Package Note line
         MVC   REX#NOT4,PHDRNOTE4       Package Note line
         MVC   REX#NOT5,PHDRNOTE5       Package Note line
         MVC   REX#NOT6,PHDRNOTE6       Package Note line
         MVC   REX#NOT7,PHDRNOTE7       Package Note line
         MVC   REX#NOT8,PHDRNOTE8       Package Note line
*
         MVC   REX#OUT,=CL03'OUT'
         CLC   PECBFNNM,=CL8'BACKOUT'       'Back out ?'
         BNE   MAIN0022
*
         MVC   REX#OUT,=CL03'BAC'
*
MAIN0022 DS    0H
*
         WTO   'C1UEXSHP  Calling REXX PKGESHIP          ',            X
               ROUTCDE=11
*
         LA    R1,REXXPRMS     Point to parms, and call Rexx PKGESHIP
         ST    R1,DYNPARMS                 "
         OI    DYNPARMS,X'80'              "
         LA    R1,DYNPARMS                 "
         LINK  EP=IRXJCL               PARAM=(REXXPRMS)
         LTR   R15,R15         VERIFY LOAD WAS SUCCESSFUL
         BZ    MAIN9000
*
         WTO   'C1UEXSHP  Unsuccessful PKGESHIP execution',            X
               ROUTCDE=11
*
         B     MAINEXIT
*---------------------------------------------------------------------- 00159000
*---------------------------------------------------------------------- 00159000
MAIN9000 DS    0H
         XC    PECBRTCD,PECBRTCD            CLEAR RETURN CODE
MAINEXIT DS    0H
*
         LR    R5,R13                        SAVE NEW STACK POINTER
*
         L     R13,4(R13)                    POINT TO OLD STACK
***********************************************************************
*   CLEAN UP THIS PROGRAM'S STORAGE                                   *
*   NOTE: THIS HAS TO BE DONE BEFORE THE "LOAD MULTIPLE" IS           *
*   DONE BECAUSE YOU LOSE THE POINTER TO YOUR STORAGE                 *
***********************************************************************
*
         L     R0,=A(WORKLN)                GET SIZE
         FREEMAIN R,A=(5),LV=(0)            FREE STORAGE
MAINRTRN DS    0H
         RETURN (14,12)
         SPACE ,
*
***********************************************************************
*   PROGRAM CONSTANTS                                                 *
***********************************************************************
*---------------                                                        01150000
*        CONSTANTS                                                      01100000
*---------------                                                        01150000
ALLOREXX DC    X'0060'     length in hex
         DC    CL18'ALLOC DD(SYSEXEC) '
*  Enter your REXX dataset name and length here \
*        DC    CL28'DA(CADEMO.BUNDLE.PACKAGE)'
         DC    CL30'DA(SYSMD32.NDVR.TEAM.REXX)'
*        DC    CL28'DA(SYS1.EXEC)'
*  Enter your REXX dataset name and length here /
         DC    CL42' SHR REUSE'
*        DC    CL40'----+----1----+----2----+----3----+----4
BLANKS   DC    CL132' '
         END
          
./  ADD  NAME=C1UEXSHP                
       PROCESS DYNAM OUTDD(DISPLAYS)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. C1UEXSHP.

      ************************************************************
      * DESCRIPTION:  THIS PACKAGE EXIT PROGRAM WILL INITIATE    *
      * 1) Require all packages be backout enabled               *
      * 2) Support Automated PACKAGE Shipping                    *
      ************************************************************
      * THESE ROUTINES ARE DISTRIBUTED BY THE CA STAFF "AS IS".
      * NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS MADE FOR THEM.
      * COMPUTER ASSOCIATES CANNOT GUARANTEE THAT THE ROUTINES ARE
      * ERROR FREE, OR THAT IF ERRORS ARE FOUND, THEY WILL BE CORRECTED.
      ************************************************************
      * Change the Dataset references within this program:       *
      * 1) Find all "DA("                                        *
      * 2) Change each dataset name to your REXX library         *
      ************************************************************

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      **
       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01  WS-VARIABLES.
           03  ME                      PIC X(07) VALUE 'XALJO11'.

       01 BPXWDYN PIC X(8) VALUE 'BPXWDYN'.
       01 ALLOC-STRING.
          05 ALLOC-LENGTH PIC S9(4) BINARY VALUE 120.
          05 ALLOC-TEXT   PIC X(120).

       01  IRXJCL                            PIC X(6)  VALUE 'IRXJCL'.

      * The block of data below can be used for submitting pkg shipments
      * Prepared for both foreground and batch executions
       01  PKG-SHIPMENT-PARMS-IRXJCL.
         02  PKG-SHIPMENT-PARMS-IRXJCL-TOP.
           03 PARM-LENGTH          PIC X(2) VALUE X'0253'.
           03 REXX-NAME            PIC X(8) VALUE 'PKGESHIP'.
           03 FILLER               PIC X(1) VALUE SPACE .
         02  PKG-SHIPMENT-PARMS.
           03 REXX-SHIP-PACKAGE    PIC X(16) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-ENV        PIC X(08) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-STGID      PIC X(01) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-COMMENT    PIC X(50) .
           03 REXX-SHIP-CREATE-USR PIC X(08) .
           03 REXX-SHIP-UPDATE-USR PIC X(08) .
           03 REXX-SHIP-CAST-USER  PIC X(08) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-NOTE1      PIC X(60) .
           03 REXX-SHIP-NOTE2      PIC X(60) .
           03 REXX-SHIP-NOTE3      PIC X(60) .
           03 REXX-SHIP-NOTE4      PIC X(60) .
           03 REXX-SHIP-NOTE5      PIC X(60) .
           03 REXX-SHIP-NOTE6      PIC X(60) .
           03 REXX-SHIP-NOTE7      PIC X(60) .
           03 REXX-SHIP-NOTE8      PIC X(60) .
           03 REXX-SHIP-OUT        PIC X(03) .

       LINKAGE SECTION.
       COPY PKGXBLKS.

       PROCEDURE DIVISION USING
               PACKAGE-EXIT-BLOCK
               PACKAGE-REQUEST-BLOCK
               PACKAGE-EXIT-HEADER-BLOCK
               PACKAGE-EXIT-FILE-BLOCK
               PACKAGE-EXIT-ACTION-BLOCK
               PACKAGE-EXIT-APPROVER-MAP
               PACKAGE-EXIT-BACKOUT-BLOCK
               PACKAGE-EXIT-SHIPMENT-BLOCK
               PACKAGE-EXIT-SCL-BLOCK.

*********  IF PECB-USER-BATCH-JOBNAME(1:7) = ME
*********  DISPLAY 'C1UEXSHP: GOT INTO EXIT 7' .

           IF  SETUP-EXIT-OPTIONS
*********    to support automated package shipping
               MOVE 'Y'   TO PECB-AFTER-EXEC
*********      MOVE 'Y'   TO PECB-REQ-ELEMENT-ACTION-BIBO
*********      MOVE 'Y'   TO PECB-BEFORE-BACKIN
*********      MOVE 'Y'   TO PECB-BEFORE-BACKOUT
*********      MOVE 'Y'   TO PECB-AFTER-EXEC
*********      MOVE 'Y'   TO PECB-AFTER-BACKOUT
*********      MOVE 'Y'   TO PECB-AFTER-BACKIN
*********    to enforce package backout = Y
               MOVE 'Y'   TO PECB-BEFORE-CAST
               MOVE 'Y'   TO PECB-MID-CAST
               MOVE 'Y'   TO PECB-AFTER-CAST
               MOVE 'Y'   TO PECB-BEFORE-CREATE-BLD
               MOVE 'Y'   TO PECB-BEFORE-CREATE-COPY
               MOVE 'Y'   TO PECB-BEFORE-CREATE-EDIT
               MOVE 'Y'   TO PECB-BEFORE-CREATE-IMPT
               MOVE 'Y'   TO PECB-BEFORE-MOD-BLD
               MOVE 'Y'   TO PECB-BEFORE-MOD-CPY
               MOVE 'Y'   TO PECB-BEFORE-MOD-EDIT
               MOVE 'Y'   TO PECB-BEFORE-MOD-IMPT
               MOVE ZEROS TO RETURN-CODE
               GO TO 100-MAIN-EXIT.

           MOVE 0 TO PECB-NDVR-EXIT-RC.

**   *******====---> SUBMIT PACKAGE SHIPMENT JOBS
           IF (EXECUTE-PACKAGE AND
              PHDR-PACKAGE-STATUS = 'EXECUTED')
           OR (BACK-OUT-PACKAGE AND PECB-AFTER )
           OR (BACK-IN-PACKAGE AND PECB-AFTER )
                 PERFORM 800-SUBMIT-PACKAGE-SHIPMENTS
           ELSE
           IF PREQ-BACKOUT-ENABLED NOT = 'Y'
              MOVE 'Y' TO PREQ-BACKOUT-ENABLED
              MOVE 4 TO PECB-NDVR-EXIT-RC
              MOVE 'Y' TO PECB-MODS-MADE-TO-PREQ
              DISPLAY 'C1UEXSHP: Package Backout is Enforced'
           END-IF.
**   ******.......................  <<<<

       100-MAIN-EXIT.

           GOBACK.

       800-SUBMIT-PACKAGE-SHIPMENTS.

      *    MAKES A CALL TO THE REXX ROUTINE PKGESHIP
      *    THE REXX ROUTINE PKGESHIP SUBMITS PACKAGE SHIPMENT JOBS

      *    Package Shipments may occur in batch only
      *    As a result of package Executions, Backouts and Backins

******     IF PECB-USER-BATCH-JOBNAME(1:7) = ME
******         DISPLAY 'C1UEXSHP: SHIPPING PACKAGE '
******                 PECB-PACKAGE-ID
******         DISPLAY 'C1UEXSHP: PHDR-PKG-ENV  ' PHDR-PKG-ENV
******         DISPLAY 'C1UEXSHP: PHDR-PKG-STGID' PHDR-PKG-STGID
******     END-IF

           PERFORM 2100-ALLOCATE-REXFILE.

           MOVE PECB-PACKAGE-ID      TO REXX-SHIP-PACKAGE
           MOVE PHDR-PKG-ENV         TO REXX-SHIP-ENV
           MOVE PHDR-PKG-STGID       TO REXX-SHIP-STGID
           MOVE PREQ-PACKAGE-COMMENT TO REXX-SHIP-COMMENT
           MOVE PHDR-PKG-CREATE-USER TO REXX-SHIP-CREATE-USR
           MOVE PHDR-PKG-UPDATE-USER TO REXX-SHIP-UPDATE-USR
           MOVE PHDR-PKG-CAST-USER   TO REXX-SHIP-CAST-USER
           MOVE PHDR-PKG-NOTE1       TO REXX-SHIP-NOTE1
           MOVE PHDR-PKG-NOTE2       TO REXX-SHIP-NOTE2
           MOVE PHDR-PKG-NOTE3       TO REXX-SHIP-NOTE3
           MOVE PHDR-PKG-NOTE4       TO REXX-SHIP-NOTE4
           MOVE PHDR-PKG-NOTE5       TO REXX-SHIP-NOTE5
           MOVE PHDR-PKG-NOTE6       TO REXX-SHIP-NOTE6
           MOVE PHDR-PKG-NOTE7       TO REXX-SHIP-NOTE7
           MOVE PHDR-PKG-NOTE8       TO REXX-SHIP-NOTE8
           IF BACK-OUT-PACKAGE
           MOVE 'BAC'                TO REXX-SHIP-OUT
           ELSE
           MOVE 'OUT'                TO REXX-SHIP-OUT  .

           CALL IRXJCL  USING PKG-SHIPMENT-PARMS-IRXJCL.

           MOVE 0           TO RETURN-CODE
           .

       2100-ALLOCATE-REXFILE.

           MOVE SPACES TO ALLOC-TEXT .
           STRING 'ALLOC DD(SYSEXEC) ',
              'DA(SYSMD32.NDVR.TEAM.REXX)  SHR REUSE'
                  DELIMITED BY SIZE
             INTO ALLOC-TEXT
           END-STRING.
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .

********** MOVE 'CONCAT DDLIST(REXFILE,REXFILE2)'
**********   TO ALLOC-TEXT .
**********
********** PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .

136600*****************************************************************
136600**  DYNAMICALLY DE-ALLOCATE UNNEEDED REXX FILES
136600*****************************************************************
       2200-FREE-REXFILES.

           MOVE SPACES              TO ALLOC-TEXT .
           MOVE 'FREE  DD(SYSEXEC)' TO ALLOC-TEXT .
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .

136600*****************************************************************
136600**  CALL BPXWDYN TO PREFORM REQUIRED REXX FUNCTIONS
136600*****************************************************************
136700 9000-DYNAMIC-ALLOC-DEALLOC.
136800
136900     CALL BPXWDYN USING ALLOC-STRING
137000
137100     IF RETURN-CODE NOT = ZERO
137200         DISPLAY 'C1UEXSHP: ALLOCATION FAILED: RETURN CODE = '
137200                 RETURN-CODE
137300         DISPLAY ALLOC-TEXT
137600     END-IF

           MOVE SPACES TO ALLOC-TEXT
137700     .
          
./  ADD  NAME=C1UEXT07                
       PROCESS DYNAM OUTDD(DISPLAYS)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. C1UEXT07.

      ************************************************************
      * DESCRIPTION:  THIS PACKAGE EXIT PROGRAM WILL INITIATE    *
      * 1) PERFORM PACKAGE AUTOMATION PACKAGE EXECUTTIONS        *
      * 2) SUPPORT AUTOMATED PACKAGE SHIPPING                    *
      ************************************************************
      * THESE ROUTINES ARE DISTRIBUTED BY THE CA STAFF "AS IS".
      * NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS MADE FOR THEM.
      * COMPUTER ASSOCIATES CANNOT GUARANTEE THAT THE ROUTINES ARE
      * ERROR FREE, OR THAT IF ERRORS ARE FOUND, THEY WILL BE CORRECTED.
      ************************************************************

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      **
       DATA DIVISION.
       FILE SECTION.

       WORKING-STORAGE SECTION.

       01  WS-DATE-VARIABLES.
           03  WS-DATE-TO-CONVERT                PIC X(07).
           03  WS-DATE-CONVERTED.
               05  WS-DATE-CENTURY               PIC 9(02).
               05  WS-DATE-YEAR                  PIC 9(02).
               05  WS-DATE-MONTH                 PIC 9(02).
               05  WS-DATE-DAY                   PIC 9(02).
           03  WS-DATE-OF-RUN                    PIC 9(06).
           03  WS-DOR REDEFINES WS-DATE-OF-RUN.
               05  WS-DOR-YEAR                   PIC 9(02).
               05  WS-DOR-MONTH                  PIC 9(02).
               05  WS-DOR-DAY                    PIC 9(02).

           03  WS-RUN-DATE                       PIC 9(06).
           03  FILLER   REDEFINES   WS-RUN-DATE.
               05  WS-RUN-DATE-YEAR              PIC 9(02).
               05  WS-RUN-DATE-MONTH             PIC 9(02).
               05  WS-RUN-DATE-DAY               PIC 9(02).

           03  WS-TIME-OF-RUN                    PIC 9(08).
           03  FILLER REDEFINES WS-TIME-OF-RUN.
               05  WS-TOR.
                   10  WS-TOR-HOUR               PIC 9(02).
                   10  WS-TOR-MINUTE             PIC 9(02).
               05  FILLER                        PIC 9(04).

           03  WS-RUN-TIME                       PIC 9(04).
           03  FILLER   REDEFINES   WS-RUN-TIME.
               05  WS-RUN-TIME-HOUR              PIC 9(02).
               05  WS-RUN-TIME-MINUTE            PIC 9(02).

           03  WS-PACKAGE-DATE.
               10  WS-PKG-DAY                PIC 9(02).
               10  WS-PKG-MONTH              PIC X(03).
               10  WS-PKG-YEAR               PIC 9(02).

           03  WS-PKG-START-DATE.
               10  WS-PKG-START-YEAR         PIC 9(02).
               10  WS-PKG-START-MONTH        PIC 9(02).
               10  WS-PKG-START-DAY          PIC 9(02).

           03  WS-PKG-END-DATE.
               10  WS-PKG-END-YEAR           PIC 9(02).
               10  WS-PKG-END-MONTH          PIC 9(02).
               10  WS-PKG-END-DAY            PIC 9(02).

           03  WS-PACKAGE-TIME.
               10  WS-PKG-HOUR               PIC 9(02).
               10  FILLER                    PIC X(01).
               10  WS-PKG-MINUTE             PIC 9(02).

           03  WS-PKG-START-TIME.
               10  WS-PKG-START-HOUR         PIC 9(02).
               10  WS-PKG-START-MINUTE       PIC 9(02).

           03  WS-PKG-END-TIME.
               10  WS-PKG-END-HOUR           PIC 9(02).
               10  WS-PKG-END-MINUTE         PIC 9(02).

       01  WS-MONTHS-TABLE.
           03 FILLER                             PIC X(36)
              VALUE 'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC' .
       01  WS-MONTHS-TABLE-RE REDEFINES WS-MONTHS-TABLE.
           03 WS-MONTH OCCURS 12 TIMES INDEXED BY WS-MONTH-INX
                                                 PIC X(03).
       01  WS-VARIABLES.
           03  WS-SUBMIT-SWITCH        PIC X(01) VALUE 'N'.
               88  SUBMIT-OK               VALUE 'S'.
               88  DO-NOT-SUBMIT           VALUE 'N'.
           03  WS-TIME                 PIC 9(8).
           03  WS-PACKAGE-VARIABLE     PIC X(01).
           03  WS-JOBCARD-ID           PIC X(07) VALUE SPACES.
           03  ME                      PIC X(07) VALUE 'XALJO11'.
           03  ADMIN1                  PIC X(01) VALUE 'P'.
           03  ADMIN2                  PIC X(01) VALUE 'T'.
           03  WS-TALLY                PIC  9(4) VALUE 0000.

       01 BPXWDYN PIC X(8) VALUE 'BPXWDYN'.
       01 ALLOC-STRING.
          05 ALLOC-LENGTH PIC S9(4) BINARY VALUE 100.
          05 ALLOC-TEXT   PIC X(100).

       01  IRXJCL                            PIC X(6)  VALUE 'IRXJCL'.
       01  IRXEXEC-PGM                       PIC X(08) VALUE 'IRXEXEC'.

      *
      * DEFINE THE IRXEXEC DATA AREAS AND ARG BLOCKS
      *
       77  FLAGS                             PIC S9(8) BINARY.
       77  REXX-RETURN-CODE                  PIC S9(8) BINARY.
       77  DUMMY-ZERO                        PIC S9(8) BINARY.
       77  LPAR-ID                           PIC X(04).
           88  DO-NOT-PROCESS-LPAR                     VALUE 'SKIP'.
       77  ARG1                              PIC X(16).
       77  UPDPRINT-FILE-STATUS              PIC X(02).
       77  ARGUMENT-PTR                      POINTER.
       77  EXECBLK-PTR                       POINTER.
       77  ARGTABLE-PTR                      POINTER.
       77  EVALBLK-PTR                       POINTER.
       77  TEMP-PTR                          POINTER.

       01  EXECBLK.
           05 EXECBLK-ACRYN                  PIC X(08) VALUE 'IRXEXECB'.
           05 EXECBLK-LENGTH                 PIC S9(8) BINARY
                                                       VALUE 48.
           05 EXECBLK-RESERVED               PIC S9(8) BINARY
                                                       VALUE 0.
           05 EXECBLK-MEMBER                 PIC X(08) VALUE 'PKGEXECT'.
           05 EXECBLK-DDNAME                 PIC X(08) VALUE 'REXFILE7'.
           05 EXECBLK-SUBCOM                 PIC X(08) VALUE SPACES.
           05 EXECBLK-DSNPTR                 POINTER   VALUE NULL.
           05 EXECBLK-DSNLEN                 PIC 9(04) COMP
                                                       VALUE 0.

       01  EVALBLK.
           05 EVALBLK-EVPAD1                 PIC S9(8) BINARY
                                                       VALUE 0.
           05 EVALBLK-EVSIZE                 PIC S9(8) BINARY
                                                       VALUE 34.
           05 EVALBLK-EVLEN                  PIC S9(8) BINARY
                                                       VALUE 0.
           05 EVALBLK-EVPAD2                 PIC S9(8) BINARY
                                                       VALUE 0.
           05 EVALBLK-EVDATA                 PIC X(256).

       01  ARGUMENT.
           02 ARGUMENT-1                     OCCURS 1 TIMES.
              05 ARGSTRING-PTR               POINTER.
              05 ARGSTRING-LENGTH            PIC S9(8) BINARY.
           02 ARGSTRING-LAST1                PIC S9(8) BINARY
                                                       VALUE -1.
           02 ARGSTRING-LAST2                PIC S9(8) BINARY
                                                       VALUE -1.

      * The block of data below can be used with either an
      * IRXJCL or IRXEXEC call to the rexx program PKGEXECT.
      * IRXJCL is used when running in batch (batch CAST) .
      * IRXEXEC is used when running in foreground (CAST or APPROVE).
       01  PKG-EXECUTE-PARMS-IRXJCL.
         02  PKG-EXECUTE-PARMS-IRXJCL-TOP.
           03 PARM-LENGTH          PIC X(2) VALUE X'0114'.
           03 REXX-NAME            PIC X(8) VALUE 'PKGEXECT'.
           03 FILLER               PIC X(1) VALUE SPACE .
         02  PKG-EXECUTE-PARMS-IRXEXEC.
           03 REXX-EXEC-PACKAGE    PIC X(16) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-EXEC-ENV        PIC X(08) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-EXEC-STGID      PIC X(01) .
           03 REXX-EXEC-MODE       PIC X(01) .
           03 REXX-EXE-CREATE-USER PIC X(08) .
           03 REXX-EXE-UPDATE-USER PIC X(08) .
           03 REXX-EXE-CAST-USER   PIC X(08) .
           03 REXX-EXEC-COMMENT    PIC X(50) .

      * The block of data below can be used for submitting pkg shipments
      * IRXJCL is always used since executions are always in batch.
       01  PKG-SHIPMENT-PARMS-IRXJCL.
         02  PKG-SHIPMENT-PARMS-IRXJCL-TOP.
           03 PARM-LENGTH          PIC X(2) VALUE X'0253'.
           03 REXX-NAME            PIC X(8) VALUE 'PKGESHIP'.
           03 FILLER               PIC X(1) VALUE SPACE .
         02  PKG-SHIPMENT-PARMS.
           03 REXX-SHIP-PACKAGE    PIC X(16) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-ENV        PIC X(08) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-STGID      PIC X(01) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-COMMENT    PIC X(50) .
           03 REXX-SHIP-CREATE-USR PIC X(08) .
           03 REXX-SHIP-UPDATE-USR PIC X(08) .
           03 REXX-SHIP-CAST-USER  PIC X(08) .
           03 FILLER               PIC X(1) VALUE SPACE .
           03 REXX-SHIP-NOTE1      PIC X(60) .
           03 REXX-SHIP-NOTE2      PIC X(60) .
           03 REXX-SHIP-NOTE3      PIC X(60) .
           03 REXX-SHIP-NOTE4      PIC X(60) .
           03 REXX-SHIP-NOTE5      PIC X(60) .
           03 REXX-SHIP-NOTE6      PIC X(60) .
           03 REXX-SHIP-NOTE7      PIC X(60) .
           03 REXX-SHIP-NOTE8      PIC X(60) .
           03 REXX-SHIP-OUT        PIC X(03) .

       LINKAGE SECTION.
       COPY PKGXBLKS.

       PROCEDURE DIVISION USING
               PACKAGE-EXIT-BLOCK
               PACKAGE-REQUEST-BLOCK
               PACKAGE-EXIT-HEADER-BLOCK
               PACKAGE-EXIT-FILE-BLOCK
               PACKAGE-EXIT-ACTION-BLOCK
               PACKAGE-EXIT-APPROVER-MAP
               PACKAGE-EXIT-BACKOUT-BLOCK
               PACKAGE-EXIT-SHIPMENT-BLOCK
               PACKAGE-EXIT-SCL-BLOCK.
      ****
      ****

*******    DISPLAY 'C1UEXT07: GOT INTO EXIT 7' .
           ACCEPT WS-DATE-OF-RUN FROM DATE.
           ACCEPT WS-TIME-OF-RUN FROM TIME.
           MOVE WS-DOR-YEAR TO WS-RUN-DATE-YEAR.
           MOVE WS-DOR-MONTH TO WS-RUN-DATE-MONTH.
           MOVE WS-DOR-DAY TO WS-RUN-DATE-DAY.
           MOVE WS-TOR-HOUR TO WS-RUN-TIME-HOUR.
           MOVE WS-TOR-MINUTE TO WS-RUN-TIME-MINUTE.

           IF  SETUP-EXIT-OPTIONS
*********    to support automated package shipping
               MOVE 'Y'   TO PECB-AFTER-EXEC
               MOVE 'Y'   TO PECB-REQ-ELEMENT-ACTION-BIBO
               MOVE 'Y'   TO PECB-AFTER-BACKOUT
               MOVE 'Y'   TO PECB-AFTER-BACKIN
*********    to enforce package backout = Y
*********      MOVE 'Y'   TO PECB-BEFORE-CAST
*********      MOVE 'Y'   TO PECB-MID-CAST
               MOVE 'Y'   TO PECB-BEFORE-CREATE-BLD
               MOVE 'Y'   TO PECB-BEFORE-CREATE-COPY
               MOVE 'Y'   TO PECB-BEFORE-CREATE-EDIT
               MOVE 'Y'   TO PECB-BEFORE-CREATE-IMPT
               MOVE 'Y'   TO PECB-BEFORE-MOD-BLD
               MOVE 'Y'   TO PECB-BEFORE-MOD-CPY
               MOVE 'Y'   TO PECB-BEFORE-MOD-EDIT
               MOVE 'Y'   TO PECB-BEFORE-MOD-IMPT
*********    to support submission of package Execute jobs
               MOVE 'Y'   TO PECB-AFTER-REV-APPR
               MOVE 'Y'   TO PECB-AFTER-CAST
               MOVE ZEROS TO RETURN-CODE
               GO TO 100-MAIN-EXIT.

           MOVE 0 TO PECB-NDVR-EXIT-RC.

**   *******====---> SUBMIT PACKAGE SHIPMENT JOBS
           IF (EXECUTE-PACKAGE AND
              PHDR-PACKAGE-STATUS(1:4) = 'EXEC')
           OR (BACK-OUT-PACKAGE AND PECB-AFTER )
           OR (BACK-IN-PACKAGE AND PECB-AFTER )
                 PERFORM 800-SUBMIT-PACKAGE-SHIPMENTS
                 GO TO 100-MAIN-EXIT.

           IF CAST-PACKAGE AND PECB-AFTER AND
              PHDR-PACKAGE-STATUS = 'APPROVED'
*******       DISPLAY 'PERFORM 599-CHECK-SUBMIT-DATES'
              PERFORM 599-CHECK-SUBMIT-DATES
              IF SUBMIT-OK
*******          DISPLAY 'PERFORM 600-SUBMIT-PACKAGE-AUTOMATION'
                       IF PECB-BATCH-MODE
                          MOVE SPACES TO ALLOC-TEXT
                          PERFORM 2100-ALLOCATE-REXFILE
                       END-IF
                       PERFORM 600-SUBMIT-PACKAGE-AUTOMATION
                       PERFORM 2100-ALLOCATE-REXFILE
                 GO TO 100-MAIN-EXIT
              ELSE
                 GO TO 100-MAIN-EXIT.

           IF REVIEW-PACKAGE AND PECB-AFTER AND
              PHDR-PACKAGE-STATUS = 'APPROVED'
              PERFORM 599-CHECK-SUBMIT-DATES
              IF SUBMIT-OK
                 IF PECB-BATCH-MODE
                    MOVE SPACES TO ALLOC-TEXT
                    PERFORM 2100-ALLOCATE-REXFILE
                 END-IF
                 PERFORM 600-SUBMIT-PACKAGE-AUTOMATION
                 GO TO 100-MAIN-EXIT
              ELSE
                 GO TO 100-MAIN-EXIT.

*******     DISPLAY 'C1UEXT07: PHDR-PACKAGE-STATUS='
*******              PHDR-PACKAGE-STATUS.

           IF PREQ-BACKOUT-ENABLED NOT = 'Y'
              MOVE 'Y' TO PREQ-BACKOUT-ENABLED
              MOVE 4 TO PECB-NDVR-EXIT-RC
              MOVE 'Y' TO PECB-MODS-MADE-TO-PREQ
              DISPLAY 'C1UEXT07: Package Backout is Enforced'
           END-IF.

       100-MAIN-EXIT.
*******    DISPLAY 'C1UEXT07:   GOING BACK '

           GOBACK.


       599-CHECK-SUBMIT-DATES.

           ACCEPT WS-DATE-OF-RUN FROM DATE
           ACCEPT WS-TIME-OF-RUN FROM TIME
           MOVE WS-DOR-YEAR             TO WS-RUN-DATE-YEAR
           MOVE WS-DOR-MONTH            TO WS-RUN-DATE-MONTH
           MOVE WS-DOR-DAY              TO WS-RUN-DATE-DAY
           MOVE WS-TOR-HOUR             TO WS-RUN-TIME-HOUR
           MOVE WS-TOR-MINUTE           TO WS-RUN-TIME-MINUTE

           MOVE PHDR-PKG-EXEC-STRT-DATE TO WS-DATE-TO-CONVERT
           PERFORM 700-CONVERT-DATE-CONVERT
           MOVE WS-DATE-YEAR            TO WS-PKG-START-YEAR
           MOVE WS-DATE-MONTH           TO WS-PKG-START-MONTH
           MOVE WS-DATE-DAY             TO WS-PKG-START-DAY

           MOVE PHDR-PKG-EXEC-END-DATE  TO WS-DATE-TO-CONVERT
           PERFORM 700-CONVERT-DATE-CONVERT
           MOVE WS-DATE-YEAR            TO WS-PKG-END-YEAR
           MOVE WS-DATE-MONTH           TO WS-PKG-END-MONTH
           MOVE WS-DATE-DAY             TO WS-PKG-END-DAY

           MOVE PHDR-PKG-EXEC-STRT-TIME TO WS-PACKAGE-TIME
           MOVE WS-PKG-HOUR             TO WS-PKG-START-HOUR
           MOVE WS-PKG-MINUTE           TO WS-PKG-START-MINUTE

           MOVE PHDR-PKG-EXEC-END-TIME  TO WS-PACKAGE-TIME
           MOVE WS-PKG-HOUR             TO WS-PKG-END-HOUR
           MOVE WS-PKG-MINUTE           TO WS-PKG-END-MINUTE

           IF PECB-USER-BATCH-JOBNAME(1:7) = ME
               DISPLAY 'C1UEXT07: USING THESE DATES'
               DISPLAY 'RUN DATE:   ' WS-RUN-DATE
                      ' TIME: '       WS-RUN-TIME
               DISPLAY 'START DATE: ' WS-PKG-START-DATE
                      ' TIME: '       WS-PKG-START-TIME
               DISPLAY 'END DATE:   ' WS-PKG-END-DATE
                      ' TIME: '       WS-PKG-END-TIME
           END-IF

           SET SUBMIT-OK TO TRUE
           IF WS-PKG-START-DATE > WS-RUN-DATE
               SET DO-NOT-SUBMIT TO TRUE
           END-IF

           IF   WS-PKG-START-DATE = WS-RUN-DATE
            AND WS-PKG-START-TIME > WS-RUN-TIME
               SET DO-NOT-SUBMIT TO TRUE
           END-IF

           IF WS-PKG-END-DATE < WS-RUN-DATE
               SET DO-NOT-SUBMIT TO TRUE
           END-IF

           IF   WS-PKG-END-DATE = WS-RUN-DATE
            AND WS-PKG-END-TIME < WS-RUN-TIME
               SET DO-NOT-SUBMIT TO TRUE
           END-IF

           IF PECB-USER-BATCH-JOBNAME(1:7) = ME
               DISPLAY 'C1UEXT07: SUBMIT SWITCH: ' WS-SUBMIT-SWITCH
           END-IF
           .
       600-SUBMIT-PACKAGE-AUTOMATION.

      *    MAKES A CALL TO THE REXX ROUTINE PKGEXECT.
      *    THE REXX ROUTINE PKGEXECT SUBMITS PACKAGE SHIPMENT JOBS.
      *    THE REXX ROUTINE PKGEXECT SUBMITS PACKAGE SHIPMENT JOBS.

******     IF PECB-USER-BATCH-JOBNAME(1:7) = ME
******         DISPLAY 'C1UEXT07: SUBMITTING PACKAGE '
******                 PECB-PACKAGE-ID
******         DISPLAY 'C1UEXT07: PHDR-PKG-ENV  ' PHDR-PKG-ENV
******         DISPLAY 'C1UEXT07: PHDR-PKG-STGID' PHDR-PKG-STGID
******     END-IF

           MOVE PECB-PACKAGE-ID      TO REXX-EXEC-PACKAGE
           MOVE PHDR-PKG-ENV         TO REXX-EXEC-ENV
           MOVE PHDR-PKG-STGID       TO REXX-EXEC-STGID
           MOVE PECB-MODE            TO REXX-EXEC-MODE
           MOVE PHDR-PKG-CREATE-USER TO  REXX-EXE-CREATE-USER
           MOVE PHDR-PKG-UPDATE-USER TO  REXX-EXE-UPDATE-USER
           MOVE PHDR-PKG-CAST-USER   TO  REXX-EXE-CAST-USER
           MOVE PREQ-PACKAGE-COMMENT TO REXX-EXEC-COMMENT
           MOVE 'PKGEXECT'           TO EXECBLK-MEMBER .
           MOVE  102                 TO ARGSTRING-LENGTH(1)

********
********   IF PECB-TSO-MODE
********      DISPLAY 'C1UEXT07: IN TSO FOREGROUND  '
********      CALL 'SET-ARG1-POINTER'  USING ARGUMENT-PTR
********                                     PKG-EXECUTE-PARMS-IRXEXEC
********      PERFORM 1800-REXX-CALL-VIA-IRXEXEC
********   ELSE
********      DISPLAY 'C1UEXT07: NOT IN TSO FOREGROUND  '
              CALL IRXJCL  USING PKG-EXECUTE-PARMS-IRXJCL .


           IF RETURN-CODE NOT = 0
               DISPLAY 'C1UEXT07: BAD CALL TO IRXJCL - RC = '
                        RETURN-CODE
           END-IF

           MOVE 0           TO RETURN-CODE
           .
       700-CONVERT-DATE-CONVERT.

           SET WS-MONTH-INX TO 1.
           SEARCH WS-MONTH VARYING WS-MONTH-INX
           AT END MOVE 00 TO WS-DATE-MONTH
             WHEN WS-MONTH(WS-MONTH-INX) = WS-DATE-TO-CONVERT(3:3)
                  SET WS-DATE-MONTH TO WS-MONTH-INX
           END-SEARCH

           MOVE WS-DATE-TO-CONVERT (1:2) TO WS-DATE-DAY
           MOVE WS-DATE-TO-CONVERT (6:2) TO WS-DATE-YEAR
           MOVE '20'                     TO WS-DATE-CENTURY
           .
       800-SUBMIT-PACKAGE-SHIPMENTS.

      *    MAKES A CALL TO THE REXX ROUTINE PKGESHIP
      *    THE REXX ROUTINE PKGESHIP SUBMITS PACKAGE SHIPMENT JOBS

      *    Package Shipments may occur in batch only
      *    As a result, IRXJCL will be always be used to
      *    submit the package Shipment jobs.

*******    IF PECB-USER-BATCH-JOBNAME(1:7) = 'IBMUSER'
*******        DISPLAY 'C1UEXT07: SHIPPING PACKAGE '
*******                PECB-PACKAGE-ID
*******        DISPLAY 'C1UEXT07: PHDR-PKG-ENV  ' PHDR-PKG-ENV
*******        DISPLAY 'C1UEXT07: PHDR-PKG-STGID' PHDR-PKG-STGID
*******    END-IF

           PERFORM 2100-ALLOCATE-REXFILE.

           MOVE PECB-PACKAGE-ID      TO REXX-SHIP-PACKAGE
           MOVE PHDR-PKG-ENV         TO REXX-SHIP-ENV
           MOVE PHDR-PKG-STGID       TO REXX-SHIP-STGID
           MOVE PREQ-PACKAGE-COMMENT TO REXX-SHIP-COMMENT
           MOVE PHDR-PKG-CREATE-USER TO REXX-SHIP-CREATE-USR
           MOVE PHDR-PKG-UPDATE-USER TO REXX-SHIP-UPDATE-USR
           MOVE PHDR-PKG-CAST-USER   TO REXX-SHIP-CAST-USER
           MOVE PHDR-PKG-NOTE1       TO REXX-SHIP-NOTE1
           MOVE PHDR-PKG-NOTE2       TO REXX-SHIP-NOTE2
           MOVE PHDR-PKG-NOTE3       TO REXX-SHIP-NOTE3
           MOVE PHDR-PKG-NOTE4       TO REXX-SHIP-NOTE4
           MOVE PHDR-PKG-NOTE5       TO REXX-SHIP-NOTE5
           MOVE PHDR-PKG-NOTE6       TO REXX-SHIP-NOTE6
           MOVE PHDR-PKG-NOTE7       TO REXX-SHIP-NOTE7
           MOVE PHDR-PKG-NOTE8       TO REXX-SHIP-NOTE8
           IF BACK-OUT-PACKAGE
           MOVE 'BAC'                TO REXX-SHIP-OUT
           ELSE
           MOVE 'OUT'                TO REXX-SHIP-OUT  .

           CALL IRXJCL  USING PKG-SHIPMENT-PARMS-IRXJCL.

           MOVE 0           TO RETURN-CODE
           .


       1800-REXX-CALL-VIA-IRXEXEC.
      *--- GET THE ADDRESS OF THE ARGUMENT(S) TO BE PASSED TO IXREXEC
      *--- AND LOAD INTO THE ARGUMENT TABLES
*******    IF PECB-USER-BATCH-JOBNAME(1:7) = ME
*******        DISPLAY 'C1UEXT07: SETTING UP REXX EXECUTION'
*******                ' FOR PACKAGE 'PECB-PACKAGE-ID
*******    END-IF .
           SET ARGSTRING-PTR (1)           TO ARGUMENT-PTR .
           CALL 'SET-ARGUMENT-POINTER'  USING ARGTABLE-PTR
                                              ARGUMENT .
           CALL 'SET-EXECBLK-POINTER'   USING EXECBLK-PTR
                                              EXECBLK .
           CALL 'SET-EVALBLK-POINTER'   USING EVALBLK-PTR
                                              EVALBLK .
      *--- SET FLAGS TO HEX 20000000
      *    I.E. EXEC INVOKED AS SUBROUTINE
           MOVE 536870912         TO FLAGS
           MOVE 0                 TO REXX-RETURN-CODE .

           IF PECB-USER-BATCH-JOBNAME(1:7) = ME
               DISPLAY 'C1UEXT07: CALLING IRXEXC  '
                       PECB-PACKAGE-ID
           END-IF .
      *--- CALL THE REXX EXEC ---
           CALL IRXEXEC-PGM USING EXECBLK-PTR
                                  ARGTABLE-PTR
                                  FLAGS
                                  DUMMY-ZERO
                                  DUMMY-ZERO
                                  EVALBLK-PTR
                                  DUMMY-ZERO
                                  DUMMY-ZERO
                                  DUMMY-ZERO .

           IF REXX-RETURN-CODE NOT = 0
               DISPLAY 'C1UEXT07: IRXEXEC RETURN CODE = '
                       REXX-RETURN-CODE
           END-IF

           CANCEL IRXEXEC-PGM
           .

       2100-ALLOCATE-REXFILE.

           MOVE SPACES TO ALLOC-TEXT.

           STRING 'ALLOC DD(REXFILE7) ',
             'DA(SYSMD32.NDVR.ADMIN.ENDEVOR.ADM1.CLSTREXX) SHR REUSE'
                  DELIMITED BY SIZE
             INTO ALLOC-TEXT
           END-STRING .
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .
           STRING 'ALLOC DD(SYSEXEC) ',
             'DA(SYSMD32.NDVR.ADMIN.ENDEVOR.ADM1.CLSTREXX) SHR REUSE'
                  DELIMITED BY SIZE
             INTO ALLOC-TEXT
           END-STRING.
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .

********** MOVE 'CONCAT DDLIST(REXFILE7,REXFILE2)'
**********   TO ALLOC-TEXT .
**********
********** PERFORM 9000-DYNAMIC-ALLOC-DEALLOC .

      *****************************************************************
      **  DYNAMICALLY DE-ALLOCATE UNNEEDED REXX FILES
      *****************************************************************
       2200-FREE-REXFILES.

           MOVE 'FREE  DD(REXFILE7)' TO ALLOC-TEXT
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC

           MOVE 'FREE  DD(SYSEXEC)' TO ALLOC-TEXT
           PERFORM 9000-DYNAMIC-ALLOC-DEALLOC
           .
      *****************************************************************
      **  CALL BPXWDYN TO PREFORM REQUIRED REXX FUNCTIONS
      *****************************************************************
       9000-DYNAMIC-ALLOC-DEALLOC.

           CALL BPXWDYN USING ALLOC-STRING

           IF RETURN-CODE NOT = ZERO
               DISPLAY 'C1UEXT07: ALLOCATION FAILED: RETURN CODE = '
                       RETURN-CODE
               DISPLAY ALLOC-TEXT
           END-IF

           MOVE SPACES TO ALLOC-TEXT
           .


      ******************************************************************
      *  BEGIN NESTED PROGRAMS USED TO SET THE POINTERS OF DATA AREAS
      *  THAT ARE BEING PASSED TO IRXEXEC SO THAT A REXX ROUTINE CAN
      *  PASS DATA (OTHER THAN A RETURN CODE) BACK TO A COBOL PROGRAM.
      ******************************************************************

      ******** SET-ARG1-POINTER ********
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SET-ARG1-POINTER.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
         77 ARG-PTR                        POINTER.
         77 ARG1                           PIC X(16).
       PROCEDURE DIVISION USING ARG-PTR
                                ARG1.
           SET ARG-PTR TO ADDRESS OF ARG1
           GOBACK.
       END PROGRAM SET-ARG1-POINTER.

      ******** SET-ARGUMENT-POINTER ********
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SET-ARGUMENT-POINTER.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
         77 ARGTABLE-PTR                   POINTER.
         01 ARGUMENT.
           02 ARGUMENT-1                   OCCURS 1 TIMES.
            05 ARGSTRING-PTR               POINTER.
            05 ARGSTRING-LENGTH            PIC S9(8) BINARY.
           02 ARGSTRING-LAST1              PIC S9(8) BINARY.
           02 ARGSTRING-LAST2              PIC S9(8) BINARY.
       PROCEDURE DIVISION USING ARGTABLE-PTR
                                ARGUMENT.
           SET ARGTABLE-PTR TO ADDRESS OF ARGUMENT
           GOBACK.
       END PROGRAM SET-ARGUMENT-POINTER.

      ******** SET-EXECBLK-POINTER ********
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SET-EXECBLK-POINTER.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
         77 EXECBLK-PTR                    POINTER.
         01 EXECBLK.
            03 EXECBLK-ACRYN               PIC X(8).
            03 EXECBLK-LENGTH              PIC 9(4) COMP.
            03 EXECBLK-RESERVED            PIC 9(4) COMP.
            03 EXECBLK-MEMBER              PIC X(8).
            03 EXECBLK-DDNAME              PIC X(8).
            03 EXECBLK-SUBCOM              PIC X(8).
            03 EXECBLK-DSNPTR              POINTER.
            03 EXECBLK-DSNLEN              PIC 9(4) COMP.
       PROCEDURE DIVISION USING EXECBLK-PTR
                                EXECBLK.
           SET EXECBLK-PTR TO ADDRESS OF EXECBLK
           GOBACK.
       END PROGRAM SET-EXECBLK-POINTER.

      ******** SET-EVALBLK-POINTER ********
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SET-EVALBLK-POINTER.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
         77 EVALBLK-PTR                    POINTER.
         01 EVALBLK.
            03 EVALBLK-EVPAD1              PIC 9(4) COMP.
            03 EVALBLK-EVSIZE              PIC 9(4) COMP.
            03 EVALBLK-EVLEN               PIC 9(4) COMP.
            03 EVALBLK-EVPAD2              PIC 9(4) COMP.
            03 EVALBLK-EVDATA              PIC X(256).
       PROCEDURE DIVISION USING EVALBLK-PTR
                                EVALBLK.
           SET EVALBLK-PTR TO ADDRESS OF EVALBLK
           GOBACK.
       END PROGRAM SET-EVALBLK-POINTER.
      *--- END OF MAIN PROGRAM
       END PROGRAM C1UEXT07.
          
./  ADD  NAME=PKG#MODL                
//&Jobname JOB (&AltIDAcctCode),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=&AltIDJobClass,
//          REGION=0M,MSGCLASS=A,NOTIFY=&SYSUID
//*-------------------------------------------------------------------*
// JCLLIB  ORDER=(&MySEN2Library,
//            &MySENULibrary)
//*-------------------------------------------------------------------*
//*********************************************************************
//*  BATCH JCL STATEMENTS                                             *
//*********************************************************************
//NDVRBAT  EXEC PGM=NDVRC1,DYNAMNBR=1500,REGION=4096K,
//  PARM='C1BM3000,,&Package'
//   INCLUDE MEMBER=SCMM@LIB   <- Endevor STEPLIB+CONLIB
//SYSPRINT DD SYSOUT=*
//*********************************************************************
//*             SORT WORK FILES                                       *
//*********************************************************************
//SORTWK01 DD UNIT=3390,SPACE=(CYL,(1,2))
//SORTWK02 DD UNIT=3390,SPACE=(CYL,(1,2))
//SORTWK03 DD UNIT=3390,SPACE=(CYL,(1,2))
//C1TPDD01 DD UNIT=3390,SPACE=(CYL,5),
//            DCB=(RECFM=VB,LRECL=260)
//C1TPDD02 DD UNIT=3390,SPACE=(CYL,5),
//            DCB=(RECFM=VB,LRECL=260)
//*********************************************************************
//*  OUTPUT DATA SETS                                                 *
//*********************************************************************
//C1MSGS1  DD SYSOUT=*
//C1MSGS2  DD SYSOUT=*
//C1PRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133)
//SYSUDUMP DD SYSOUT=*
//SYMDUMP  DD DUMMY
//SYSOUT   DD SYSOUT=*
//BSTIPT01 DD UNIT=3390,
//            SPACE=(TRK,(15,5)),
//            DISP=(NEW,PASS,DELETE),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS)
//* PKG#MODL GENERATED BY &USERID ON &DATE8 AT &TIME6
          
./  ADD  NAME=PKGEEXEC                
* Environment  Stage Jobname-
  *            *     &Userjob
          
./  ADD  NAME=PKGESHIP                
/*  REXX  */
/* THESE ROUTINES ARE DISTRIBUTED BY THE CA TECHNOLOGIES STAFF
   "AS IS".  NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS MADE
   FOR THEM.  CA TECHNOLOGIES CANNOT GUARANTEE THAT THE ROUTINES
   ARE ERROR FREE, OR THAT IF ERRORS ARE FOUND, THEY WILL BE
   CORRECTED.
*/
/*
   This REXX submits automatically 0 or more package shipping
   jobs.
*/
/*  WRITTEN BY DAN WALTHER */

/* Runs only 4 userid = IBMUSER     (if uncommented)  */
/*
   If USERID() /= 'IBMUSER' then Exit
*/
   /* <---- Variable settings for each site          */

   STRING = "ALLOC DD(SYSTSPRT) SYSOUT(A) "
   CALL BPXWDYN STRING;
   Trace Off

   /* If a DDNAME of PKGESHIP is allocated, then Trace */
   WhatDDName = 'PKGESHIP'
   CALL BPXWDYN "INFO FI("WhatDDName")",
              "INRTDSN(DSNVAR) INRDSNT(myDSNT)"
   if Substr(DSNVAR,1,1) /= ' ' then TraceRc = 1;
   IF TraceRc = 1 then Trace R

   STRING = "ALLOC DD(SYSPRINT) SYSOUT(A) "
   CALL BPXWDYN STRING;

/* Variable settings for each site --->           */
   WhereIam =  WHERE@M1()
   RunUnderAltid  = 'N' ;   /* Y/N  */

   /* The site determines whether to engage Endevor hooks */
   EndevorHooks = 'N'

   /* If just shipping to one destination, then use          */
   /* ShipSchedulingMethod = 'One  '                         */
   /* if there only a few  destinations (in notes), then use */
   /* ShipSchedulingMethod = 'Notes'                         */
   /* if using a RULES file and Trigger, then use            */
   /* ShipSchedulingMethod = 'Rules'                         */
   interpret 'Call' WhereIam "'ShipSchedulingMethod'"
   ShipSchedulingMethod = Result

   If ShipSchedulingMethod = 'One'   then,
      Do
      interpret 'Call' WhereIam "'Destination'"
      Destination          = Result
      interpret 'Call' WhereIam "'Destination'"
      Destination          = Result
      interpret 'Call' WhereIam "'Hostprefix'"
      Hostprefix           = Result
      interpret 'Call' WhereIam "'Rmteprefix'"
      Rmteprefix           = Result
      interpret 'Call' WhereIam "'ModelMember'"
      ModelMember          = Result
      End
   interpret 'Call' WhereIam "'SHLQ'"
   SHLQ = Result

   interpret 'Call' WhereIam "'MyAUTHLibrary'"
   MyAUTHLibrary = Result
   interpret 'Call' WhereIam "'MyAUTULibrary'"
   MyAUTULibrary = Result
   interpret 'Call' WhereIam "'MyLOADLibrary'"
   MyLOADLibrary = Result

   interpret 'Call' WhereIam "'MySEN2Library'"
   MySEN2Library = Result

   interpret 'Call' WhereIam "'MySENULibrary'"
   MySENULibrary = Result

   interpret 'Call' WhereIam "'MyOPT2Library'"
   MyOPT2Library = Result

   interpret 'Call' WhereIam "'MyOPTNLibrary'"
   MyOPTNLibrary = Result

   interpret 'Call' WhereIam "'MyCLS0Library'"
   HSYSEXEC  = Result
   MyCLS0Library = HSYSEXEC

   interpret 'Call' WhereIam "'MyCLS2Library'"
   HSYSEXEC  = Result
   MyCLS2Library = HSYSEXEC
   Say 'Running PKGESHIP in' MyCLS2Library

   interpret 'Call' WhereIam "'AltIDAcctCode'"
   AltIDAcctCode= Result

   interpret 'Call' WhereIam "'AltIDJobClass'"
   AltIDJobClass= Result

   interpret 'Call' WhereIam "'AltIDMsgClass'"
   AltIDMsgClass= Result

   interpret 'Call' WhereIam "'TransmissionModels'"
   TransmissionModels = Result

   interpret 'Call' WhereIam "'MyHomeAddress'"
   MyHomeAddress      = Result

   ARG Parms ;

/* if called by zowe, then this  is  the Argument ....   */
   If Length(Parms) < 18 then,
      Do
      Package = Translate(Parms,' ',"'")
      Package = Strip(Package)
      Say Length(Package) Package
      PkgExecJobname = USERID() || 'S'           /*Userid + S      */
      End /* If Length(Parms) < 18 */
   Else
      Do
      /* if called by exit, then these are the Arguments.... */
      Notes.7  = Substr(PARMS,414,60) ;
      If Substr(Notes.7,1,5) = 'TRACE' then Trace r
      Package = Substr(PARMS,1,16) ;

      Environ = Substr(PARMS,18,08) ;
      Stage   = Substr(PARMS,27,01) ;
      CREATE_USER = Substr(PARMS,29,08) ;
      UPDATE_USER = Substr(PARMS,37,08) ;
      CAST_USER = Substr(PARMS,45,08) ;
      Notes.1  = Substr(PARMS,054,60) ;
      Notes.2  = Substr(PARMS,114,60) ;
      Notes.3  = Substr(PARMS,174,60) ;
      Notes.4  = Substr(PARMS,234,60) ;
      Notes.5  = Substr(PARMS,294,60) ;
      Notes.6  = Substr(PARMS,354,60) ;
      Notes.7  = Substr(PARMS,414,60) ;
      Notes.8  = Substr(PARMS,474,60) ;
      ShipOutput = Substr(PARMS,584,03) ;
      PkgExecJobname = MVSVAR('SYMDEF',JOBNAME ) /*Returns JOBNAME */
      End /*  Else  */

/* If ShipOutput /= 'BAC' THEN ShipOutput = 'OUT' */
   TYPRUN = ' '

/* IF you want to use the package prefix to select packages          */
/*     for shipments, then tailor and uncomment the next line:       */
/* If Substr(Package,1,2) /= 'PR' then exit                          */

/* If ShipOutput /= 'BAC' THEN ShipOutput = 'OUT' */
   TYPRUN = ' '
/*                                                                    */
/* This Rexx participates in the submission of Endevor Package        */
/* Shipment jobs. It is called by the Endevor exit program C1UEXT07   */
/*                                                                    */
/* First. See if the package has any package backouts ...             */
/*                                                                    */
   Call CSV_to_List_Package_Id
   If BACKOUT_RCD_EXIST = 'N' then Exit
/* Allocate and prepare files for updating the shipment transaction   */
/* file, and submitting package shipments for those scheduled for     */
/* immediate submission.                                              */
/*                                                                    */

   Userid = USERID()
   Date8  = DATE('S')
   Date6  = substr(Date8,3);
   Temp   = TIME('L')

   Time8  = Substr(Temp,1,2) ||,
            Substr(Temp,4,2) ||,
            Substr(Temp,7,2) ||,
            Substr(Temp,10,2) ;
   Time6  = Substr(Temp,1,2) ||,
            Substr(Temp,4,2) ||,
            Substr(Temp,7,2) ;

   TodaysDate = DATE('S') ;
   NOW  = TIME(L);
   HOUR = SUBSTR(NOW,1,2) ;
   IF HOUR = '00' THEN HOUR = '0'
   MINUTE = SUBSTR(NOW,4,2) ;
   CurrentTime= HOUR || MINUTE ;
   SENDNODE =  MVSVAR(SYSNAME)
   ShipOutput = 'OUT'
   VDDRSPFX   = 'PSP.ENDV'

   $All_VARIABLES = "Jobname Destination Userid ",
         "PkgExecJobname MyOPTNLibrary MyAUTULibrary ",
         "MyAUTHLibrary MyLOADLibrary MyCLS0Library ",
         "MyHomeAddress ",
         "Package Date8 Date6 Time8 Time6 Notify ",
         "Typrun SENDNODE $delimiter ShipOutput  ",
         "SHLQ MySEN2Library MySENULibrary MyOPT2Library ",
         "MyCLS2Library AltIDAcctCode AltIDJobClass ",
         "AltIDMsgClass VDDRSPFX HSYSEXEC OUT"

   Trace R
   sa= 'Back to PKGESHIP'
   /* If Scheduling Package Shipments, then BILDTGGR             */
   /* determines sites and updates the Trigger file  .           */
   /* If any Sites can receive Shipments immediately, then       */
   /* BILDTGGR indicates so in its Return code.                  */
   If ShipSchedulingMethod = 'Rules' then,
      Do
      BildRC = BILDTGGR(Parms)
      /* The immediate shipments are queued by BILDTGGR in a Table  */
      If BildRC = 1 then,
         Do
         Userid = USERID() ;
         PULLTGGRParms = Userid'.PULLTGGR' MySEN2Library
         Call PULLTGGR PULLTGGRParms ;
         End
      End /*  SchedulingPackageShipBundle */
   Else,
   If ShipSchedulingMethod = 'Notes' then,
      Do n# = 8 to 1 by -1
      /* Pulling shipment data from package notes */
      /* Examine Package notes to find Destination and schedule info */
      /* - Submit Package Shipments for those that can be submitted  */
      /*       immeditely.                                           */
      /*       (future submissions are not supported )               */
         tmp = NOTES.n# ;
         if Substr(tmp,1,3)  /= "TO " then leave ;
         if Substr(tmp,12,2) /= ": "  then leave ;
         tmp = Substr(OVERLAY(" ",tmp,12),3) ;
         Destination = Word(tmp,1) ;
         /* Default to first model     */
         ModelMember = Word(TransmissionModels,1)
         /* Get info for Destination   */
         Call  GetDestinationInfo;
         Hostprefix = Strip(Substr(apiDestinations.1,079,14))
         Rmteprefix = Strip(Substr(apiDestinations.1,113,14))
         /*
         */
         Date        = Word(tmp,2) ;
         Time        = Word(tmp,3) ;
         Jobname     = Word(tmp,4) ;
         If Words(tmp) > 4 then,
            If Word(tmp,5) = "HOLD" then,
               Notify      = Notify",TYPRUN=HOLD"
         If Date <= TodaysDate &,
            Time <= CurrentTime then,
            Do
            Call AllocateModel;
            Call SubmitPackageShipmentFromNotes;
            End ;
         tmp = Substr(OVERLAY(" ",tmp,12),3) ;
      End;  /*  Do n# = 8 to 1 by -1   */
   Else, /* Is there only one Destination etc        */
   If ShipSchedulingMethod = 'One'   then,
      Do
      JobName     = PkgExecJobname
      Call AllocateModel;
      Call SubmitPackageShipmentFromNotes;
      End;  /*  .. Else...             */

/*                                                                    */
/* All Done                                                           */
/*                                                                    */

   Exit

AllocateModel:
/*                                                                    */
/* Submit immediate package shipment jobs                             */
/*                                                                    */
/*    Allocate files                                                  */
/*                                                                    */
/*    A Model is used for building Package Shipment JCL               */
/*                                                                    */
   STRING = 'ALLOC DD(MODEL) ',
            "DA('"MySEN2Library"("ModelMember")') SHR REUSE "
   CALL BPXWDYN STRING;

   Return;

SubmitPackageShipmentFromNotes:
/*                                                                    */
/* This subroutine is modified from the TBL#TOOL                      */
/*                                                                    */

   "EXECIO * DISKR "MODEL "(STEM $Model. FINIS" ;
   $delimiter = "^" ;

   DO $LINE = 1 TO $Model.0
      $PLACE_VARIABLE = 1;
      CALL EVALUATE_SYMBOLICS ;
      END; /* DO $LINE = 1 TO $Model.0 */

   STRING = "ALLOC DD(SHIPJCL) LRECL(80) BLKSIZE(27920) ",
              " DSORG(PS) ",
              " SPACE(2,2) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   "EXECIO * DISKW SHIPJCL (STEM $Model. FINIS" ;

   If RunUnderAltid  = 'Y' then CALL SWAP2ALT
   Call Submit_Job ;
   If RunUnderAltid  = 'Y' then CALL SWAP2USR

   Drop $Model. ;

   STRING = "FREE DD(SHIPJCL) DELETE"
   CALL BPXWDYN STRING;

   RETURN;

/*                                                                    */
/* The subroutine below is borrowed from the TBL#TOOL                 */
/*                                                                    */
EVALUATE_SYMBOLICS:

   DO FOREVER;
      $PLACE_VARIABLE = POS('&',$Model.$LINE,$PLACE_VARIABLE)
      IF $PLACE_VARIABLE = 0 THEN LEAVE;
      $temp_$LINE = TRANSLATE($Model.$LINE,' ',',.()"/\+-*|');
      $temp_$LINE = TRANSLATE($temp_$LINE,' ',"'"$delimiter);
      $table_word = WORD(SUBSTR($temp_$LINE,($PLACE_VARIABLE+1)),1);
      $table_word = TRANSLATE($table_word,'_','-') ;
      $varlen = LENGTH($table_word) + 1 ;

      if WORDPOS($table_word,$All_VARIABLES) = 0 then,
         do
         $PLACE_VARIABLE = $PLACE_VARIABLE + 1 ;
         iterate;
         end;

      $temp_word = VALUE($table_word) ;
      IF DATATYPE($temp_word,S) = 9 THEN,
         $temp = 'SYMBVALUE = ' $temp_word ;
      ELSE,
         $temp = "SYMBVALUE = '"$temp_word"'" ;
      INTERPRET $temp;
      SA= 'SYMBVALUE  = ' SYMBVALUE ;

      $tail = SUBSTR($Model.$LINE,($PLACE_VARIABLE+$varlen)) ;
      if Substr($tail,1,1) = $delimiter then,
         $tail = SUBSTR($tail,2) ;
      IF $PLACE_VARIABLE > 1 THEN,
         $Model.$LINE = ,
            SUBSTR($Model.$LINE,1,($PLACE_VARIABLE-1)) ||,
            SYMBVALUE || $tail ;
      else,
         $Model.$LINE = ,
            SYMBVALUE || $tail ;
      END; /* DO FOREVER */

   RETURN;

Submit_Job:

   "Execio * DISKR SHIPJCL  ( Stem jcl. finis"
   "Execio * DISKW SYSTSPRT ( Stem jcl. "

   STRING = "ALLOC DD(SUBMIT)",
               "SYSOUT(A) WRITER(INTRDR) REUSE " ;
   CALL BPXWDYN STRING;
   "Execio * DISKW SUBMIT   ( Stem jcl. finis"

   STRING = "FREE  DD(SUBMIT)"
   CALL BPXWDYN STRING;

   RETURN;

GetDestinationInfo:

   /* Set values for Hostprefix and Rmteprefix */
   /*     From the site definition             */

   /*  Call API to Get Destination information  */


   ADDRESS TSO
   "ALLOC F(BSTAPI) DA(*) REUSE "
   "ALLOC F(BSTERR) DA(*) REUSE "
   STRING = "ALLOC DD(APIMSGS) LRECL(133) BLKSIZE(13300) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(APILIST) LRECL(2048) BLKSIZE(22800) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(V,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   /*  Call API to Get Destination information  */
   parm =    Left(Destination'*',7)

   ADDRESS TSO "CALL *(APIALDST) '"||parm||"'"
   RETURN_RC = RC ;
   If RETURN_RC > 0 then,
      DO
      SA= 'CANNOT GET INFORMATION FROM ENDEVOR' ;
      EXIT
      END ;
   "EXECIO * DISKR APILIST ( Stem apiDestinations. FINIS"
   STRING = "FREE  DD(APILIST)"
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(APIMSGS)"
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(BSTAPI) "
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(BSTERR) "
   CALL BPXWDYN STRING;

   Return ;

CSV_to_List_Package_Id:

  /* To Search the package shipping table, we need the Entry       */
  /*    Environment information as a search criteria.              */
  /*    Get it from the USER-DATA field on the 1st element.        */


   STRING = "ALLOC DD(C1MSGS1) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTERR) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTAPI) DUMMY "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(EXTRACTM) LRECL(4000) BLKSIZE(32000) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(BSTIPT01) LRECL(80) BLKSIZE(800) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   QUEUE "LIST PACKAGE ID '"Package"'"
   QUEUE "     TO DDNAME 'EXTRACTM' "
   QUEUE "     ."

   "EXECIO" QUEUED() "DISKW BSTIPT01 (FINIS ";

   ADDRESS LINK 'BC1PCSV0'   ;  /* load from authlib */

/* ADDRESS TSO  'ISRDDN' */
   call_rc = rc ;

  "EXECIO * DISKR EXTRACTM (STEM API. finis"

   STRING = "FREE DD(EXTRACTM)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTIPT01)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(C1MSGS1)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTERR)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTAPI)" ;
   CALL BPXWDYN STRING;

  IF API.0 < 2 THEN RETURN;

  $table_variables= Strip(API.1,'T')

  $table_variables = translate($table_variables,"_"," ") ;
  $table_variables = translate($table_variables," ",',"') ;
  $table_variables = translate($table_variables,"@","/") ;
  $table_variables = translate($table_variables,"@",")") ;
  $table_variables = translate($table_variables,"@","(") ;
  $table_variables = translate($table_variables,"_","-") ;

  Do rec# = 2 to API.0
     $detail = API.rec#

     Trace off
     /* Parse the Detail record until done */
     Do $column =  1 to Words($table_variables)
        Call ParseDetailCSVline
     End
     Trace r
  End; /* Do rec# = 1 to API.0 */

  RETURN ;


ParseDetailCSVline:

  /* Find the data for the current $column */

  $dlmchar = Substr($detail,1,1);

  If $dlmchar = "'" then,
     Do
     SA= 'parsing with single quote '
     PARSE VAR $detail "'" $temp_value "'" $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = '"' then,
     Do
     SA= 'parsing with double quote '
     PARSE VAR $detail '"' $temp_value '"' $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = ',' then,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail ',' $temp_value ',' $detail ;
     If Substr($detail,1,1)/= ',' then,
        $detail = "," || $detail
        $detail = Strip(Substr($detail,2),'L')   */
     End
  Else,
  If Words($detail) = 0 then,
     $temp_value = ' '
  Else,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail $temp_value ',' $detail ;
     Sa= '$temp_value=>' $temp_value '<'
     End
  $temp_value = STRIP($temp_value) ;
  $rslt = $temp_value
  $rslt = Strip($rslt,'B','"')                             ;
  $rslt = Strip($rslt,'B',"'")                             ;
  if Length($rslt) < 1 then $rslt = ' '
  if Length($rslt) < 250 then,
     $temp = WORD($table_variables,$column) '= "'$rslt'"';
  Else,
     $temp = WORD($table_variables,$column) "=$rslt"
  If rec# < 0 then Say $temp
  Say       $temp;
  Interpret $temp;

  RETURN ;

          
./  ADD  NAME=PKGEXECT                
/*  REXX  */
/*  WRITTEN BY DAN WALTHER */

/* If uncommented, the exit Runs only 4 one user    */
/* If USERID() /= 'XALJO99' then Exit  */

   STRING = "ALLOC DD(SYSTSIN) DUMMY      "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(SYSTSPRT) SYSOUT(A) "
   CALL BPXWDYN STRING;


   WhatDDName = 'PKGEXECT'
   CALL BPXWDYN "INFO FI("WhatDDName")",
              "INRTDSN(DSNVAR) INRDSNT(myDSNT)"
   if Substr(DSNVAR,1,1) > ' ' then Trace r

   ARG Parms ;
      Package = Substr(PARMS,1,16) ;
      Environ = Substr(PARMS,18,08) ;
      Stage   = Substr(PARMS,27,01) ;
/*                                                                    */
/* This Rexx participates in Package automation - automated package   */
/* Executions.    It is called by the Endevor exit program C1UEXT07   */
/*                                                                    */
/* If a RETROFIT package, get out                                     */
/*
   If Substr(Package,1,2) = 'RT' then Exit
   If Substr(Package,1,2) = 'X#' then Exit
*/
/*                                                                   */
/* Variable settings for each site --->           */
   WhereIam =  WHERE@M1()
   interpret 'Call' WhereIam "'MyDATALibrary'"
   MyDATALibrary = Result

   interpret 'Call' WhereIam "'MySEN2Library'"
   MySEN2Library = Result

   interpret 'Call' WhereIam "'MySENULibrary'"
   MySENULibrary = Result

   interpret 'Call' WhereIam "'AltIDAcctCode'"
   AltIDAcctCode = Result

   interpret 'Call' WhereIam "'MySENULibrary'"
   MySENULibrary = Result

   interpret 'Call' WhereIam "'AltIDJobClass'"
   AltIDJobClass = Result
/* <---- Variable settings for each site          */
   Sa= 'Running PKGEXECT '
/*                                                                    */
/* Allocate and prepare files for ENBPIU00 execution                  */
/*                                                                    */
/*                                                                    */
   Package_Prefix = SUBSTR(Package,1,4) ;

   Date8  = DATE('S')
   Date6  = substr(Date8,3);
   Temp   = TIME('L')

   Time8  = Substr(Temp,1,2) ||,
            Substr(Temp,4,2) ||,
            Substr(Temp,7,2) ||,
            Substr(Temp,10,2) ;
   Time6  = Substr(Temp,1,2) ||,
            Substr(Temp,4,2) ||,
            Substr(Temp,7,2) ;


/*                                                                    */
/* OPTIONS will contain date and time values                          */
/*                                                                    */

   STRING = "ALLOC DD(OPTIONS) LRECL(80) BLKSIZE(27920) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;
   QUEUE "  $nomessages = 'Y' " ;
   QUEUE "  Date8  = '"Date8"'"
   QUEUE "  Date6  = '"Date6"'"
   QUEUE "  Time8  = '"Time8"'"
   QUEUE "  Time6  = '"Time6"'"
   QUEUE "  Package = '"Package"'" ;
   QUEUE "  Userid  = '"USERID()"'" ;
   QUEUE "  Userjob = '"USERID()|| SUBSTR(Package,1,1)"'"
   QUEUE "  AltIDAcctCode = '"AltIDAcctCode"'"
   QUEUE "  MySEN2Library     = '"MySEN2Library"'"
   QUEUE "  MySENULibrary     = '"MySENULibrary"'"
   QUEUE "  AltIDJobClass = '"AltIDJobClass"'"

   "EXECIO " QUEUED() "DISKW OPTIONS (FINIS"

   If Words(PARMS) = 1 then EXIT ;
/*                                                                    */
/* TBLOUT is assigned to a temporary dataset to receive the jcl       */
/*                                                                    */
   STRING = "ALLOC DD(TBLOUT) LRECL(80) BLKSIZE(27920) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";

   CALL BPXWDYN STRING;

/*                                                                    */
/* TABLE is fixed by Endevor administrators                           */
/* MODELS are SHIP and DELETE - separate JCL images                   */
/*                                                                    */
   STRING = 'ALLOC DD(TABLE) ',
            "DA('"MyDATALibrary"(PKGEEXEC)') SHR REUSE "
   CALL BPXWDYN STRING;

   STRING = 'ALLOC DD(MODEL) ',
            "DA('"MySEN2Library"(PKG#MODL)') SHR REUSE "
   CALL BPXWDYN STRING;

/*                                                                    */
/* Now call ENBPIU00 which does the rest                              */
/*                                                                    */

/* "ENBPIU00 M" Package_Prefix                                        */
   "ENBPIU00 1" Environ Stage

   "EXECIO 0 DISKW TBLOUT (FINIS"

   "EXECIO * DISKR TBLOUT (STEM EXECJCL. FINIS "
/*                                                                    */
/* "EXECIO * DISKW DISPLAYS (STEM EXECJCL. FINIS "                    */
/*                                                                    */

   STRING = "ALLOC DD(READER)",
              " RECFM(F) BLKSIZE(80) LRECL(80)",
               "SYSOUT(A) WRITER(INTRDR) REUSE " ;
   CALL BPXWDYN STRING;
/*                                                                    */
   "EXECIO * DISKW READER (STEM EXECJCL. FINIS "
/*                                                                    */

   STRING = "FREE DD(READER)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(OPTIONS)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(TBLOUT)" ;
   CALL BPXWDYN STRING;
   STRING = 'FREE DD(TABLE) ' ;
   CALL BPXWDYN STRING;


   Exit
          
./  ADD  NAME=PULLTGGR                
/*  REXX  */
/* Submit package shipment jobs from entry(ies) on Trigger */

   /* If a DDNAME of PULLTGGR is allocated, then Trace */
   WhatDDName = 'PULLTGGR'
   CALL BPXWDYN "INFO FI("WhatDDName")",
              "INRTDSN(DSNVAR) INRDSNT(myDSNT)"
   if Substr(DSNVAR,1,1) /= ' ' then TraceRc = 1;
   IF TraceRc = 1 then Trace R

/* PkgExecJobname = MVSVAR('SYMDEF',JOBNAME )   Returns JOBNAME */

/* Variable settings for each site --->           */
   WhereIam =  WHERE@M1()

   interpret 'Call' WhereIam "'MyCLS2Library'"
   MyCLS2Library = Result
   Say 'Running PULLTGGR in' MyCLS2Library

   interpret 'Call' WhereIam "'TriggerFileName'"
   TriggerFileName = Result

   interpret 'Call' WhereIam "'MyAUTULibrary'"
   MyAUTULibrary = Result

   interpret 'Call' WhereIam "'MyHomeAddress'"
   MyHomeAddress = Result

   interpret 'Call' WhereIam "'MyAUTHLibrary'"
   MyAUTHLibrary = Result

   interpret 'Call' WhereIam "'MyLOADLibrary'"
   MyLOADLibrary = Result

   interpret 'Call' WhereIam "'MyDATALibrary'"
   MyDATALibrary = Result
   ShipRules       = MyDATALibrary"(SHIPRULE)"

   interpret 'Call' WhereIam "'MyOPT2Library'"
   MyOPT2Library = Result

   interpret 'Call' WhereIam "'MyOPTNLibrary'"
   MyOPTNLibrary = Result

   interpret 'Call' WhereIam "'MySENULibrary'"
   MySENULibrary = Result

   interpret 'Call' WhereIam "'MySEN2Library'"
   MySEN2Library = Result

   interpret 'Call' WhereIam "'MyCLS0Library'"
   MyCLS0Library  = Result

   interpret 'Call' WhereIam "'MyCLS2Library'"
   MyCLS2Library  = Result

   interpret 'Call' WhereIam "'AltIDAcctCode'"
   AltIDAcctCode = Result

   interpret 'Call' WhereIam "'AltIDJobClass'"
   AltIDJobClass = Result

   interpret 'Call' WhereIam "'TransmissionMethods'"
   TransmissionMethods  = Result

   interpret 'Call' WhereIam "'TransmissionModels'"
   TransmissionModels   = Result

   interpret 'Call' WhereIam "'SHLQ'"
   SHLQ = Result

   sa= 'TransmissionMethods =' TransmissionMethods
   sa= 'TransmissionModels  =' TransmissionModels

/* <---- Variable settings for each site          */

   Arg DSN_Prefix ModelDSN . ;
   DSN_Prefix = Strip(DSN_Prefix,'B',',') ;
   ModelDSN   = Strip(ModelDSN,'B',',') ;
   ModelDSN   = Strip(ModelDSN)
   Sa= "DSN_Prefix =" DSN_Prefix
   Sa= "ModelDSN =" ModelDSN
   Jobnbr = '   '

/*                                                                    */
/* This Rexx participates in the submission of Endevor Package        */
/* Shipment jobs. It is called by the Endevor sweep job.              */
/*                                                                    */
/*                                                                    */
/* Allocate and prepare files for TBL#TOOL execution                  */
/*                                                                    */
/*                                                                    */
   Submit_RC = 0  ;
   Last_Submit_RC = 0  ;
   TodaysDate = DATE('S') ;
   NOW  = TIME(L);
   HOUR = SUBSTR(NOW,1,2) ;
   IF HOUR = '00' THEN HOUR = '0'
   MINUTE = SUBSTR(NOW,4,2) ;
   CurrentTime= HOUR || MINUTE ;

   SENDNODE =  MVSVAR(SYSNAME)
   HSYSEXEC = MyCLS2Library
   Userid = USERID()

   Call AllocateTriggerForUpdate ;

   "EXECIO * DISKR TRIGGER (STEM $tablerec. FINIS" ;
   /* Build all the ...pos variables from heading */
   Call ProcessTriggerFileHeading;

/*                                                                    */
   $All_VARIABLES = $table_variables,
        " PkgExecJobname ParmVal",
        " Jobname Userid Date8 Date6 Time8 Time6 Destination",
        " MyCLS0Library MyCLS2Library MyHomeAddress",
        " MyAUTULibrary MyAUTHLibrary MyLOADLibrary ",
        " MyOPT2Library MyOPTNLibrary MySEN2Library MySENULibrary",
        " HSYSEXEC DB2DSN MODE SHPHLQ STEPLIB",
        " ShipOutput SHLQ ",
        " AltIDAcctCode AltIDJobClass ",
        " Hostprefix Rmteprefix Transmissn ",
        " Destin VNBLSDST SENDNODE Typrun Notify TARGnode "

/*                                                                    */
   Do trg# = 1 to $tablerec.0
      status      = Substr($tablerec.trg#,Stpos,1) ;
      If status /= "_" & status /= " " &,
         status /= "B"                 then iterate;
      ShipOutput = 'OUT'
      If status  = "B" then ShipOutput = 'BAC' ;
      Package     = Substr($tablerec.trg#,Packagepos,16) ;
      System      = Strip(Substr($tablerec.trg#,Systempos,08));
      Destination = Strip(Substr($tablerec.trg#,Destinationpos,08));
      Date        = Substr($tablerec.trg#,Datepos,08) ;
      IF Date > TodaysDate then iterate ;
      Time        = Substr($tablerec.trg#,Timepos,04) ;
      IF Date = TodaysDate &,
         Time > CurrentTime then iterate ;
      /* Get Endevor Destination Definition */
      /*  for file names and transmission  method */

      /*
      Do one of these:
      Call  GetDestinationInfoViaAPI;
         -- or --
      Call  GetDestinationInfoViaCSV;
      */

      Call  GetDestinationInfoViaCSV;

      Jobname     = Strip(Substr($tablerec.trg#,Jobnamepos,08)) ;
      If Jobname  = 'useridX' then Jobname = USERID() || 'X'
      PkgExecJobname = Jobname ;
/*
      OwnerMask   = Strip(Substr($tablerec.trg#,OwnerMaskpos,08)) ;
      QualifierMask =,
         Strip(Substr($tablerec.trg#,QualifierMaskpos,08)) ;
      BindPackageMask =,
         Strip(Substr($tablerec.trg#,BindPackageMaskpos,08)) ;
      PathMask =,
         Strip(Substr($tablerec.trg#,PathMaskpos,08)) ;
*/
      TYPRUN      = Strip(Substr($tablerec.trg#,TYPRUNpos,6)) ;
      if Length(Typrun) > 0 then,
         Typrun = ',TYPRUN='Typrun

      Notify      = Strip(Substr($tablerec.trg#,Notifypos,8)) ;
      if Length(Notify) < 2 then,
         Notify = '&SYSUID'

      seconds = '000001' /* Wait 1 second before submitting next*/
      Call WaitAwhile ;

      Date8  = DATE('S')
      Date6  = substr(Date8,3);
      Temp   = TIME('L')

      Time8  = Substr(Temp,1,2) ||,
               Substr(Temp,4,2) ||,
               Substr(Temp,7,2) ||,
               Substr(Temp,10,2) ;
      Time6  = Substr(Temp,1,2) ||,
               Substr(Temp,4,2) ||,
               Substr(Temp,7,2) ;

      ParmVal = Date8 Time8
      NewStatus = 's' ;
      Call UPDATE_MODEL_FROM_VARIABLES ; /* Submits Shipment job */
      $headingVariable = 'St'
      pos= $Starting_$position.$headingVariable
      if Last_Submit_RC = 0 then,
         Do
         $tablerec.trg# = Overlay(NewStatus,$tablerec.trg#,Stpos) ;
         $tablerec.trg# = ,
            Overlay(CurrentTime,$tablerec.trg#,Timepos) ;
         pos= $Starting_$position.$headingVariable
         If Substr(Jobnbr,1,1) > ' ' then,
            $tablerec.trg# = ,
               Overlay(Jobnbr,$tablerec.trg#,Jobnumberpos);
         End
      Else,
         $tablerec.trg# = Overlay("?",$tablerec.trg#,Stpos) ;
      Last_Submit_RC = 0  ;

   End ;  /* Do trg# = 1 to $tablerec.0 */

   "EXECIO * DISKW TRIGGER (STEM $tablerec. FINIS" ;

   Call FreeTriggerFile ;

   Exit(Submit_RC) ;

/*                                                                    */
/* The subroutine below is modified from the TBL#TOOL                 */
/*                                                                    */
UPDATE_MODEL_FROM_VARIABLES:

   Method# = Wordpos(Transmissn,TransmissionMethods) ;
   If Method# = 0 then,
      Do
      NewStatus = 'R' ;
      Return ;
      End;
   ShipModel = Word(TransmissionModels,Method#);

   /* Determine Shipment JCL Model */
   STRING = "ALLOC DD(MODEL) ",
              " DA('"ModelDSN"("ShipModel")')",
              " SHR REUSE ";
   sa= 'Destination' Destination 'is' ShipModel
   CALL BPXWDYN STRING;
   MyResult = RESULT ;
   If MyResult > 0 then,
      Do
      Say 'Cannot find Shipment Model' ShipModel
      Return ;
      End;

   "EXECIO * DISKR "MODEL "(STEM $Model. FINIS" ;
   $delimiter = "^" ;
   STRING = "FREE DD(MODEL) "
   CALL BPXWDYN STRING;

   Trace off
   DO $LINE = 1 TO $Model.0
      $PLACE_VARIABLE = 1;
      CALL EVALUATE_SYMBOLICS ;
   END; /* DO $LINE = 1 TO $Model.0 */
   IF TraceRc = 1 then Trace R

   CALL BPXWDYN ,
    "ALLOC DD(SYSUT1) LRECL(80) BLKSIZE(27920) SPACE(5,5) ",
           " RECFM(F,B) TRACKS ",
           " NEW UNCATALOG REUSE ";

   "EXECIO * DISKW SYSUT1 (STEM $Model. FINIS" ;

   Call Submit_Job ;

   Drop $Model. ;

   RETURN;

/*                                                                    */
/* The subroutine below is borrowed from the TBL#TOOL                 */
/*                                                                    */
EVALUATE_SYMBOLICS:

   DO FOREVER;
      $PLACE_VARIABLE = POS('&',$Model.$LINE,$PLACE_VARIABLE)
      IF $PLACE_VARIABLE = 0 THEN LEAVE;
      $temp_$LINE = TRANSLATE($Model.$LINE,' ',',.()"/\+-*|');
      $temp_$LINE = TRANSLATE($temp_$LINE,' ',"'"$delimiter);
      $table_word = WORD(SUBSTR($temp_$LINE,($PLACE_VARIABLE+1)),1);
      $table_word = TRANSLATE($table_word,'_','-') ;
      $varlen = LENGTH($table_word) + 1 ;

      if WORDPOS($table_word,$All_VARIABLES) = 0 then,
         do
         $PLACE_VARIABLE = $PLACE_VARIABLE + 1 ;
         iterate;
         end;

      $temp_word = VALUE($table_word) ;
      IF DATATYPE($temp_word,S) = 9 THEN,
         $temp = 'SYMBVALUE = ' $temp_word ;
      ELSE,
         $temp = "SYMBVALUE = '"$temp_word"'" ;
      IF TraceRc = 1 then say $temp
      INTERPRET $temp;
      SA= 'SYMBVALUE  = ' SYMBVALUE ;

      $tail = SUBSTR($Model.$LINE,($PLACE_VARIABLE+$varlen)) ;
      if Substr($tail,1,1) = $delimiter then,
         $tail = SUBSTR($tail,2) ;
      IF $PLACE_VARIABLE > 1 THEN,
         $Model.$LINE = ,
            SUBSTR($Model.$LINE,1,($PLACE_VARIABLE-1)) ||,
            SYMBVALUE || $tail ;
      else,
         $Model.$LINE = ,
            SYMBVALUE || $tail ;
      END; /* DO FOREVER */

   RETURN;

Submit_Job:

      STRING = "ALLOC DD(SYSIN) DUMMY"
      CALL BPXWDYN STRING;
/*
      STRING = "ALLOC DD(SYSPRINT) DUMMY"
      CALL BPXWDYN STRING;
*/

      STRING = "ALLOC DD(SYSUT2)",
                  "SYSOUT(A) WRITER(INTRDR) REUSE " ;
      CALL BPXWDYN STRING;

      ADDRESS LINK 'IEBGENER'

      "EXECIO * DISKR SYSUT1 (STEM $SUBS. FINIS" ;
      "EXECIO * DISKW SYSPRINT (STEM $SUBS. FINIS" ;

      STRING = "FREE DD(SYSUT1)"
      CALL BPXWDYN STRING;

      STRING = "FREE DD(SYSUT2)"
      CALL BPXWDYN STRING;

      return;

AllocateTriggerForUpdate:

   STRING = "ALLOC DD(TRIGGER)",
              " DA('"TriggerFileName"') OLD REUSE"
   seconds = '000007' /* Number of Seconds to wait if needed */

   Do Forever  /* or at least until the file is available */
      CALL BPXWDYN STRING;
      MyRC = RC
      MyResult = RESULT ;
      If MyResult = 0 then Leave
      Call WaitAwhile
   End /* Do Forever */

   Return ;

FreeTriggerFile:

   STRING = "FREE DD(TRIGGER)"
   CALL BPXWDYN STRING  ;

   Return ;

/*                                                                    */
/* Convert Date formats                                               */
/*                                                                    */

WaitAwhile:
  /*                                                               */
  /* A resource is unavailable. Wait awhile and try                */
  /*   accessing the resource again.                               */
  /*                                                               */
  /*   The length of the wait is designated in the parameter       */
  /*   value which specifies a number of seconds.                  */
  /*   A parameter value of '000003' causes a wait for 3 seconds.  */
  /*                                                               */

  seconds = Abs(seconds)
  seconds = Trunc(seconds,0)
  Say "Waiting for" seconds "seconds at " DATE(S) TIME()

  /* AOPBATCH and BPXWDYN are IBM programs */
  CALL BPXWDYN  "ALLOC DD(STDOUT) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDERR) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDIN) DUMMY SHR REUSE"

  /* AOPBATCH and BPXWDYN are IBM programs */
  parm = "sleep "seconds
  Address LINKMVS "AOPBATCH parm"

  Return

ProcessTriggerFileHeading :
/* The subroutine below is modified from the TBL#TOOL                 */

   $tbl = 1 ;
   $TableHeadingChar = '*'

   $LastWord = Word($tablerec.$tbl,Words($tablerec.$tbl));
   If DATATYPE($LastWord) = 'NUM' then,
      Do
      Say 'Please remove sequence numbers from the Table'
      Exit(12)
      End

   $tmprec = Substr($tablerec.$tbl,2) ;
   $PositionSpclChar = POS('-',$tmprec) ;
   If $PositionSpclChar = 0 then,
      $PositionSpclChar = POS('*',$tmprec) ;
   $tmpreplaces = '-,.'$TableHeadingChar ;
   $tmprec = TRANSLATE($tmprec,' ',$tmpreplaces);
   $table_variables = strip($tmprec);
   $Heading_Variable_count = WORDS($table_variables) ;
   If $Heading_Variable_count /=,
      Words(Substr($tablerec.$tbl,2)) then,
      Do
      Say 'Invalid table Heading:' $tablerec.$tbl
      exit(12)
      End

   $heading = Overlay(' ',$tablerec.$tbl,1); /* Space leading * */
   Do $pos = 1 to $Heading_Variable_count
      $HeadingVariable = Word($table_variables,$pos) ;
      $tmp = Wordindex($Heading,$pos) ;
      $Starting_$position.$HeadingVariable = $tmp
      $tmp = $tmp + Length(Word($Heading,$pos)) -1 ;
      $Ending_$position.$HeadingVariable = $tmp

      /* Build ...pos variables and values */
      tmp = ""$HeadingVariable"pos =",
             $Starting_$position.$HeadingVariable
      Sa= tmp
      Interpret tmp

   end; /* DO $pos = 1 to $Heading_Variable_count */

   $Heading = Translate($Heading,' ','-*')

   Return ;

GetDestinationInfoViaAPI:

   /* Set values for Hostprefix and Rmteprefix */
   /*     From the site definition             */

   /*  Call API to Get Destination information  */


   STRING = "ALLOC DD(BSTAPI)   SYSOUT(J) "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(BSTERR)   SYSOUT(J) "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(APIMSGS) LRECL(133) BLKSIZE(13300) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(APILIST) LRECL(2048) BLKSIZE(22800) ",
              " DSORG(PS) ",
              " SPACE(1,1) RECFM(V,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   /*  Call API to Get Destination information  */
   parm =    Left(Destination'*',7)

   /* Call APIALDST to get Destination information */

   ADDRESS LINKMVS "APIALDST parm"
   RETURN_RC = RC ;
   If RETURN_RC > 0 then,
      DO
      parm = 'DDN:STEPLIB,APIALDST,'parm
      ADDRESS LINKMVS 'CONCALL' "parm"
      SA= 'CANNOT GET INFORMATION FROM ENDEVOR' ;
      EXIT
      END ;
   "EXECIO * DISKR APILIST ( Stem apiDestinations. FINIS"
   Sa= 'Messages from PULLTGGR:'
   Hostprefix = Strip(Substr(apiDestinations.1,079,14))
   Rmteprefix = Strip(Substr(apiDestinations.1,113,14))
   Transmissn = Strip(Substr(apiDestinations.1,051,11))
   TARGnode   = Strip(Substr(apiDestinations.1,062,08))

   STRING = "FREE  DD(APILIST)"
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(APIMSGS)"
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(BSTAPI) "
   CALL BPXWDYN STRING;
   STRING = "FREE  DD(BSTERR) "
   CALL BPXWDYN STRING;

   Return ;

GetDestinationInfoViaCSV:

   /* Set values for Hostprefix and Rmteprefix */
   /*     From the site definition             */

   /*  Call CSV to Get Destination information  */

   STRING = "ALLOC DD(C1MSGS1) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTERR) DUMMY "
   CALL BPXWDYN STRING;
   STRING = "ALLOC DD(BSTAPI) DUMMY "
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(CSVDEST) LRECL(4000) BLKSIZE(32000) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   STRING = "ALLOC DD(BSTIPT01) LRECL(80) BLKSIZE(800) ",
              " DSORG(PS) ",
              " SPACE(1,5) RECFM(F,B) TRACKS ",
              " NEW UNCATALOG REUSE ";
   CALL BPXWDYN STRING;

   Push  "LIST DESTINATION '"Destination"'",
         " TO FILE CSVDEST OPTIONS ."

   "EXECIO 1 DISKW BSTIPT01 (FINIS ";

   ADDRESS LINK 'BC1PCSV0'   ;  /* load from authlib */
   call_rc = rc ;
/* ADDRESS TSO  'ISRDDN' */

  "EXECIO * DISKR CSVDEST (STEM API. finis"

   STRING = "FREE DD(CSVDEST)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTIPT01)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(C1MSGS1)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTERR)" ;
   CALL BPXWDYN STRING;
   STRING = "FREE DD(BSTAPI)" ;
   CALL BPXWDYN STRING;

  IF API.0 < 2 THEN,
     Do
     Say 'Cannot find Definition for Destination' Destination
     EXIT(12)
     End

  $table_variables= Strip(API.1,'T')

  $table_variables = translate($table_variables,"_"," ") ;
  $table_variables = translate($table_variables," ",',"') ;
  $table_variables = translate($table_variables,"@","/") ;
  $table_variables = translate($table_variables,"@",")") ;
  $table_variables = translate($table_variables,"@","(") ;

  Do rec# = 2 to API.0
     $detail = API.rec#

     /* Parse the Detail record until done */
     Do $column =  1 to Words($table_variables)
        Call ParseDetailCSVline
     End

     Sa= 'Messages from PULLTGGR:'
     Hostprefix = HOST_DSN_PREFIX
     Rmteprefix = REMOTE_DSN_PREFIX
     Transmissn = TRANS_DESC
     TARGnode   = TRANS_NODE
  End; /* Do rec# = 1 to API.0 */

  RETURN ;

ParseDetailCSVline:

  /* Find the data for the current $column */

  $dlmchar = Substr($detail,1,1);

  If $dlmchar = "'" then,
     Do
     SA= 'parsing with single quote '
     PARSE VAR $detail "'" $temp_value "'" $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = '"' then,
     Do
     SA= 'parsing with double quote '
     PARSE VAR $detail '"' $temp_value '"' $detail ;
     If Substr($detail,1,1) = ',' then,
        $detail = Strip(Substr($detail,2),'L')
     End
  Else,
  If $dlmchar = ',' then,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail ',' $temp_value ',' $detail ;
     If Substr($detail,1,1)/= ',' then,
        $detail = "," || $detail
        $detail = Strip(Substr($detail,2),'L')   */
     End
  Else,
  If Words($detail) = 0 then,
     $temp_value = ' '
  Else,
     Do
     SA= 'parsing with comma        '
     PARSE VAR $detail $temp_value ',' $detail ;
     Sa= '$temp_value=>' $temp_value '<'
     End
  $temp_value = STRIP($temp_value) ;
  $rslt = $temp_value
  $rslt = Strip($rslt,'B','"')                             ;
  $rslt = Strip($rslt,'B',"'")                             ;
  if Length($rslt) < 1 then $rslt = ' '
  if Length($rslt) < 250 then,
     $temp = WORD($table_variables,$column) '= "'$rslt'"';
  Else,
     $temp = WORD($table_variables,$column) "=$rslt"
  INTERPRET $temp;
  If rec# < 3 then Say $temp

  RETURN ;

          
./  ADD  NAME=SHIP#FTP                
//&PkgExecJobname JOB (&AltIDAcctCode),'SHIP &Destination',
//         MSGLEVEL=(1,1),CLASS=&AltIDJobClass,REGION=0M,MSGCLASS=A,
//         NOTIFY=&Notify^&Typrun
//***==============================================================* *
//***=====Remote Package Shipment via FTP==========================* *
// JCLLIB  ORDER=(SYSMD32.NDVR.TEAM.JCL)
//* ISPSLIB(SHIP#FTP)
//*-----------------------------------------------------
//*--------------------------------------------------------SHIP#FTP
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//* DESTVAR1    = 'DESTVAR1'
//* DESTVAR2    = 'DESTVAR2'
//*--------------------------------------------------------SHIP#FTP
//***==============================================================* *
//***==============================================================* *
//*================================================================
//*  Prepare OVERRIDE temp PDS for Automated package shipments
//*================================================================
//OVERRIDE EXEC PGM=IKJEFT1B,PARM='ENBPIU00 A '            SHIP#FTP
//TABLE    DD  *
*  MODEL-  TBLOUT--
   INPUTS  SHOWME
   INPUTS  OVERRIDE
//SYSTSIN  DD  DUMMY
//OPTIONS  DD  *
* $delimiter = '|'
* $QuietMessages = 'Y'         /* Bypass messages Y/N        */
*
  Cmd="SHIP PAC '&Package' TO DEST &Destination OPT &ShipOutput."
  thisSubSys = GETSYRSB(&Package) ;  /* get sys/sub from pkg name*/
  thisSubSys = Word(thisSubSys,1);  /* get sys/sub from pkg name*/
  SENTFROM  =  SYSVAR(SYSNODE)
//INPUTS    DD  DATA,DLM=@@
//* Package Shipment Details     (SHIP#FTP)  **
//  SET C1SUBSYS='&thisSubSys'
//  SET PACKAGE='&Package'
//  SET DESTIN='&Destination'
//  SET CMD='&Cmd'
//  SET REQUEST='&ShipOutput'
//  SET SENTFROM='&SENTFROM'
//* Package Shipment Details     (SHIP#FTP)  **
@@
//SYSEXEC DD DSN=SYSMD32.NDVR.ADMIN.ENDEVOR.ADM1.CLSTREXX,
//           DISP=SHR
//        DD DSN=&MyCLS0Library,DISP=SHR
//        DD DSN=&MyCLS2Library,DISP=SHR
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//*
//SHOWME    DD SYSOUT=*   SHOWME = FINDREPL
//OVERRIDE  DD DSN=&&OVERRIDE(OVERRIDE),DISP=(NEW,PASS),
//             UNIT=3390,
//             SPACE=(TRK,(01,01,05)),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=0,DSORG=PO)
//*
//***==============================================================* *
//***==============================================================* *
//***==============================================================* *
//NDVRSHIP EXEC PGM=NDVRC1,DYNAMNBR=1500,REGION=4096K,     SHIP#FTP
//         PARM='C1BMX000,&Date8,&Time8 SHIP &Userid '
//*
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*C1BMXTRC DD DISP=SHR,
//*          DSN=CAPRD.ENDV.TRACE.LOCAL
//*
//C1BMXTRC DD SYSOUT=*,LRECL=133,RECFM=FBA   ** Shipment trace             **
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*
//* *--------------------------------------------* SHIP#FTP (CONT.)  *
//*
//C1BMXDET DD SYSOUT=*     ** SHIPMENT DETAIL REPORT  ****************
//C1BMXSUM DD SYSOUT=*     ** SHIPMENT SUMMARY REPORT ****************
//C1BMXSYN DD SYSOUT=*     ** INPUT LISTING AND SYNTAX ERROR REPORT **
//*
//* ******************************************************************
//* *  LOCAL TRANSFER COPY/RUN COMMAND DATASETS
//* *  LOCAL MODEL CONTROL CARD DATASET
//* ******************************************************************
//*
//C1BMXLCC DD DSN=&&XLCC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//C1BMXLCM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//* ******************************************************************
//* * NETVIEW FTP "ADD TO TRANSMISSION QUEUE" DATASET AND INTERNAL RDR
//* * NETVIEW FTP MODEL CONTROL CARD DATASET //*
******************************************************************
//*
//C1BMXFTC DD DSN=&&XFTC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
// DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
// UNIT=SYSALLDA
//C1BMXFTM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//* * NETWORK DATA MOVER COPY/RUN COMMAND DATASETS
//* * NETWORK DATA MOVER MODEL CONTROL CARD DATASET
//* ******************************************************************
//C1BMXNWC DD DSN=&&XNWC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
// DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
// UNIT=SYSALLDA
//C1BMXNWM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//C1BMXNWM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//C1BMXRJC DD DISP=SHR,DSN=&MySEN2Library
//         DD DISP=SHR,DSN=&MySENULibrary
//*
//* ******************************************************************
//* *  SHIPMENT DATE/TIME READ BY INLINE HOST CONFIRMATION STEP
//* ******************************************************************
//*
//C1BMXDTM DD DSN=&&XDTM,DISP=(NEW,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//* ******************************************************************
//* *  HOST STAGING DATASET DELETION STATEMENTS (IDCAMS)
//* ******************************************************************
//*
//C1BMXDEL DD DSN=&&HDEL,DISP=(NEW,PASS),SPACE=(TRK,(10,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//* ******************************************************************
//* *  REMOTE JCL MODEL MEMBERS
//* ******************************************************************
//*
//C1BMXMDL DD DSN=&&OVERRIDE,DISP=(OLD,DELETE)
//         DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//* ******************************************************************
//* *  JCL SEGMENTS TO CREATE GROUP SYMBOLICS FOR MODELLING
//* ******************************************************************
//*
//C1BMXHJC DD DATA,DLM=##
//&Jobname JOB (55800000),'SHIP &Destination',
//         MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,
//         NOTIFY=&SYSUID TYPRUN=HOLD
//*-------------------------------------------------------------------*
// JCLLIB  ORDER=(SYSMD32.NDVR.TEAM.JCL)
//*-------------------------------------------------------------------*
//* ISPSLIB(SHIP#FTP)
//*--------------------------------------------------------SHIP#FTP
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*--------------------------------------------------------SHIP#FTP
##
//*
//* *--------------------------------------------* SHIP#FTP (CONT.)  *
//*
//C1BMXHCN DD DATA,DLM=##
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//*                                                        SHIP#FTP
//CONFGE12 EXEC PGM=NDVRC1,REGION=4096K,COND=(12,GT,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0012,$DEST_ID'
//*                                                        SHIP#FTP
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIP#FTP
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//* *--------------------------------------------*         SHIP#FTP(CONT
//*                                                        SHIP#FTP
//CONFGE08 EXEC PGM=NDVRC1,REGION=4096K,COND=(08,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0008,$DEST_ID'
//*                                                        SHIP#FTP
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIP#FTP
//*                                                        SHIP#FTP
//CONFGE04 EXEC PGM=NDVRC1,REGION=4096K,COND=(04,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,EQ,0004,$DEST_ID'
//*                                                        SHIP#FTP
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIP#FTP
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIP#FTP
//*                                                        SHIP#FTP
//CONFGE00 EXEC PGM=NDVRC1,REGION=4096K,COND=(00,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,EQ,0000,$DEST_ID'
//*                                                        SHIP#FTP
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIP#FTP
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIP#FTP
//*                                                        SHIP#FTP
//CONFABND EXEC PGM=NDVRC1,REGION=4096K,COND=ONLY,         SHIP#FTP
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,AB,****,********'
//*                                                        SHIP#FTP
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIP#FTP
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIP#FTP
//* *--------------------------------------------* ISPSLIB(SHIP#FTP) *
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXRCN DD DATA,DLM=##
//*----PACKAGE SHIPMENT JOB #4 --------------------------  SHIP#FTP
//* *--Package Shipment Confirmation/Notification* ISPSLIB(SHIP#FTP) *
//*
//* *================================================================*
//* *  INSTREAM DATASET CONTAINING REMOTE CONFIRMATION JCL
//* *================================================================*
//WHATNTFY IF (RC > 7) THEN
//*
//CONFGT12 EXEC PGM=IEBGENER                               SHIP#FTP
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Jobname JOB (55800000),'SHIP &Destination',
//         MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,
//         NOTIFY=&SYSUID TYPRUN=HOLD
// JCLLIB  ORDER=(SYSMD32.NDVR.TEAM.JCL)
//* ISPSLIB(SHIP#FTP)
//*--------------------------------------------------------SHIP#FTP
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*--------------------------------------------------------SHIP#FTP
//CONFCOPY EXEC PGM=NDVRC1,                                SHIP#FTP
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EQ,0012,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIP#FTP
//NTFYTGGR EXEC PGM=IRXJCL,                                SHIP#FTP
//        PARM='UPDTTGGR &Destination 12 &VPHPKGID'
//STEPLIB  DD DISP=SHR,DSN=&MyAUTULibrary
//         DD DISP=SHR,DSN=&MyAUTHLibrary
//*        DD DISP=SHR,DSN=&MyLOADLibrary
//CONLIB   DD DISP=SHR,DSN=&MyLOADLibrary
//SYSEXEC DD DSN=&MyCLS0Library,DISP=SHR
//        DD DSN=&MyCLS2Library,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIP#FTP
//DELETES   EXEC PGM=IDCAMS,COND=(4,LT)                    SHIP#FTP
//SYSPRINT   DD SYSOUT=*
//AMSDUMP    DD SYSOUT=*
//SYSIN    DD *
  DELETE 'PUBLIC.HOST.D&Date6.T&Time6.&Destination.*' NONVSAM
//*------------------------------------------------------- SHIP#FTP
//* *--------------------------------------------* SHIP#FTP (CONT.)  *
$$
//SYSUT2   DD  DSN=PUBLIC.RMOT.D&Date6.T&Time6.NOTIFY,
//             DISP=(NEW,CATLG,KEEP),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//* *--------------------------------------------* SHIP#FTP (CONT.)  *
//WHATNTFY ELSE
//*
//CONFGT00 EXEC PGM=IEBGENER                               SHIP#FTP
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Jobname JOB (55800000),'SHIP &Destination',
//         MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,
//         NOTIFY=&SYSUID TYPRUN=HOLD
// JCLLIB  ORDER=(SYSMD32.NDVR.TEAM.JCL)
//* ISPSLIB(SHIP#FTP)
//*--------------------------------------------------------SHIP#FTP
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*--------------------------------------------------------SHIP#FTP
//CONFCOPY EXEC PGM=NDVRC1,                                SHIP#FTP
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EQ,0000,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//   INCLUDE MEMBER=STEPLIB
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIP#FTP
//NTFYTGGR EXEC PGM=IRXJCL,                                SHIP#FTP
//        PARM='UPDTTGGR &Destination / &VPHPKGID'
//STEPLIB  DD DISP=SHR,DSN=&MyAUTULibrary
//         DD DISP=SHR,DSN=&MyAUTHLibrary
//*        DD DISP=SHR,DSN=&MyLOADLibrary
//CONLIB   DD DISP=SHR,DSN=&MyLOADLibrary
//SYSEXEC DD DSN=&MyCLS0Library,DISP=SHR
//        DD DSN=&MyCLS2Library,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIP#FTP
//DELETES   EXEC PGM=IDCAMS,COND=(4,LT)                    SHIP#FTP
//SYSPRINT   DD SYSOUT=*
//AMSDUMP    DD SYSOUT=*
//SYSIN    DD *
  DELETE 'PUBLIC.HOST.D&Date6.T&Time6.&Destination.*' NONVSAM
//*------------------------------------------------------- SHIP#FTP
$$
//SYSUT2   DD  DSN=PUBLIC.RMOT.D&Date6.T&Time6.NOTIFY,
//             DISP=(NEW,CATLG,KEEP),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//WHATNTFY ENDIF
//* *--------------------------------------------* SHIP#FTP (CONT.)  *
//FTPSUBMT EXEC PGM=FTP,REGION=2048K,TIME=800              SHIP#FTP
//NETRC    DD DISP=SHR,DSN=&SYSUID..ENDEVOR.NETRC(SHIPPING)
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSUDUMP  DD SYSOUT=Q
//OUTPUT   DD SYSOUT=*                                        SHIP#FTP
//SYSIN     DD *
 &MyHomeAddress
MODE B
EBCDIC
SITE FILETYPE=JES
PUT 'PUBLIC.RMOT.D&Date6.T&Time6.NOTIFY'
QUIT
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//REMODELT  EXEC PGM=IDCAMS,COND=(4,LT) <-Remote Delete    SHIP#FTP
//SYSPRINT  DD SYSOUT=*
//AMSDUMP   DD SYSOUT=*
//DELETEME  DD DSN=PUBLIC.RMOT.D&Date6.T&Time6.NOTIFY,
//          DISP=(SHR,DELETE)
//SYSIN     DD *
  DELETE 'PUBLIC.RMOT.D&Date6.T&Time6.&Destination.*' NONVSAM
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXLIB DD DATA,DLM=##
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=&MyAUTULibrary
//         DD DISP=SHR,DSN=&MyAUTHLibrary
//*        DD DISP=SHR,DSN=&MyLOADLibrary
//CONLIB   DD DISP=SHR,DSN=&MyLOADLibrary
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//* ******************************************************************
//* *  SHIP PACKAGE PKG-ID TO DESTINATION DEST-ID ( OPTION BACKOUT ) .
//* ******************************************************************
//*
//* THE FOLLOWING DD STATEMENT MUST BE THE *LAST* CARD IN THIS MEMBER.
//* ISPSLIB MEMBER C1BMXIN IS INCLUDED AFTER IT AS THE INSTREAM DATA.
//*
//C1BMXIN  DD *  *-------------------------------* ISPSLIB(SHIP#FTP) *
SHIP PAC '&Package' TO DEST &Destination OPT &ShipOutput .
//* *============================================* ISPSLIB(SHIP#FTP) *
//* *==============================================================* *
//* *==============================================================* *
//* *==============================================================* *
//* *==============================================================* *
//*------------------------------------------------------- SHIP#FTP
//* *==============================================================* *
//* *==============================================================* *
//*
//SUBMIT   EXEC PGM=IEBGENER,COND=(12,LE,NDVRSHIP)         SHIP#FTP
//SYSUT1    DD DSN=&&XFTC,DISP=(OLD,PASS)
//SYSUT2    DD SYSOUT=(A,INTRDR)
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
          
./  ADD  NAME=SHIPLOCL                
//&Jobname JOB (1),'ENDEVOR TEAM',REGION=0M,                            JOB06547
//         CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID&Typrun
//*
/*JOBPARM S=&SENDNODE
//***=====Local Package Shipment ==================================* *
// JCLLIB  ORDER=(SYSMD32.NDVR.TEAM.JCL)
//* ISPSLIB(SHIPLOCL)
//*--------------------------------------------------------SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*--------------------------------------------------------SHIPLOCL
//*-----------------------------------------------------
//* *==============================================================* *
//NDVRSHIP EXEC PGM=NDVRC1,DYNAMNBR=1500,REGION=4096K,     SHIPLOCL
//         PARM='C1BMX000,&Date8,&Time8 SHIP N625723 '
//   INCLUDE MEMBER=STEPLIB
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXDET DD SYSOUT=*     ** SHIPMENT DETAIL REPORT  ****************
//C1BMXSUM DD SYSOUT=*     ** SHIPMENT SUMMARY REPORT ****************
//C1BMXSYN DD SYSOUT=*     ** INPUT LISTING AND SYNTAX ERROR REPORT **
//*
//* ******************************************************************
//* *  LOCAL TRANSFER COPY/RUN COMMAND DATASETS
//* *  LOCAL MODEL CONTROL CARD DATASET
//* ******************************************************************
//*
//C1BMXLCC DD DSN=&&XLCC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//C1BMXLCM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//* ******************************************************************
//* * NETVIEW FTP "ADD TO TRANSMISSION QUEUE" DATASET AND INTERNAL RDR
//* * NETVIEW FTP MODEL CONTROL CARD DATASET //*
******************************************************************
//*
//C1BMXFTC DD DSN=&&XFTC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
// DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
// UNIT=SYSALLDA
//C1BMXFTM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//* * NETWORK DATA MOVER COPY/RUN COMMAND DATASETS
//* * NETWORK DATA MOVER MODEL CONTROL CARD DATASET
//* ******************************************************************
//C1BMXNWM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//C1BMXNWM DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//C1BMXRJC DD DISP=SHR,DSN=&MySEN2Library
//         DD DISP=SHR,DSN=&MySENULibrary
//*
//C1BMXNWC DD DSN=&&XNWC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
// DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
// UNIT=SYSALLDA
//*
//* ******************************************************************
//* *  SHIPMENT DATE/TIME READ BY INLINE HOST CONFIRMATION STEP
//* ******************************************************************
//*
//C1BMXDTM DD DSN=&&XDTM,DISP=(NEW,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//* ******************************************************************
//* *  HOST STAGING DATASET DELETION STATEMENTS (IDCAMS)
//* ******************************************************************
//*
//C1BMXDEL DD DSN=&&HDEL,DISP=(NEW,PASS),SPACE=(TRK,(10,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*
//* ******************************************************************
//* *  REMOTE JCL MODEL MEMBERS
//* ******************************************************************
//*
//C1BMXMDL DD DISP=SHR,DSN=&MyOPT2Library
//         DD DISP=SHR,DSN=&MyOPTNLibrary
//*
//* ******************************************************************
//* *  JCL SEGMENTS TO CREATE GROUP SYMBOLICS FOR MODELLING
//* ******************************************************************
//*
//C1BMXHJC DD DATA,DLM=##
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXHCN DD DATA,DLM=##
//* *--------------------------------------------* ISPSLIB(SHIPLOCL) *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//*                                                        SHIPLOCL
//CONFGE12 EXEC PGM=NDVRC1,REGION=4096K,COND=(12,GT,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0012,$DEST_ID'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//* *--------------------------------------------* SHIPLOCLSHIPLOCL(CONT
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE08 EXEC PGM=NDVRC1,REGION=4096K,COND=(08,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0008,$DEST_ID'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE04 EXEC PGM=NDVRC1,REGION=4096K,COND=(04,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0004,$DEST_ID'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE00 EXEC PGM=NDVRC1,REGION=4096K,COND=(00,NE,$XM_STEP),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0000,$DEST_ID'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFABND EXEC PGM=NDVRC1,REGION=4096K,COND=ONLY,         SHIPLOCL
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,AB,****,********'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//* *--------------------------------------------* ISPSLIB(SHIPLOCL) *
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXRCN DD DATA,DLM=##
//*----PACKAGE SHIPMENT JOB #4 --------------------------  SHIPLOCL
//* *--Package Shipment Confirmation/Notification* ISPSLIB(SHIPLOCL) *
//*
//* *================================================================*
//* *  INSTREAM DATASET CONTAINING REMOTE CONFIRMATION JCL
//* *================================================================*
//*
//CONFGT12 EXEC PGM=IEBGENER,COND=(12,GE)                  SHIPLOCL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
//*--- Confirmation/Notification job -----RC=12------------SHIPLOCL
//CONFCOPY EXEC PGM=NDVRC1,                                SHIPLOCL
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,GE,0012,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//* *--------------------------------------------* SHIPLOCL (CONT.)  *
//*--------------------------------------------------------SHIPLOCL
//SHIPLOCL EXEC PGM=IRXJCL,COND=(8,LE),                    SHIPLOCL
//        PARM='UPDTTGGR &Destination / &Package'
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//SYSEXEC   DD DSN=SYSMD32.NDVR.TEAM.REXX,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIPLOCL
$$
//SYSUT2   DD  DSN=PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY,
//             DISP=(,CATLG),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//* *--------------------------------------------* SHIPLOCL (CONT.)  *
//*
//CONFGT08 EXEC PGM=IEBGENER,COND=(08,NE,FASTCOPY)         SHIPLOCL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
//*--- Confirmation/Notification job ------RC=08-----------SHIPLOCL
//CONFCOPY EXEC PGM=NDVRC1,                                SHIPLOCL
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EQ,0008,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIPLOCL
//SHIPLOCL EXEC PGM=IRXJCL,COND=(8,LE),                    SHIPLOCL
//        PARM='UPDTTGGR &Destination / &Package'
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//SYSEXEC   DD DSN=SYSMD32.NDVR.TEAM.REXX,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIPLOCL
$$
//SYSUT2   DD  DSN=PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY,
//             DISP=(,CATLG),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//*
//* *----------------------------------------------------------------*
//*
//CONFGT04 EXEC PGM=IEBGENER,COND=(04,NE,FASTCOPY)         SHIPLOCL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
//*--- Confirmation/Notification job ------RC=04-----------SHIPLOCL
//CONFCOPY EXEC PGM=NDVRC1,                                SHIPLOCL
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EQ,0004,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIPLOCL
//SHIPLOCL EXEC PGM=IRXJCL,COND=(8,LE),                    SHIPLOCL
//        PARM='UPDTTGGR &Destination / &Package'
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//SYSEXEC   DD DSN=SYSMD32.NDVR.TEAM.REXX,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIPLOCL
$$
//SYSUT2   DD  DSN=PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY,
//             DISP=(,CATLG),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//*
//* *----------------------------------------------------------------*
//*
//CONFGT00 EXEC PGM=IEBGENER,COND=(00,NE,FASTCOPY)         SHIPLOCL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
//*--- Confirmation/Notification job ------RC=00-----------SHIPLOCL
//CONFCOPY EXEC PGM=NDVRC1,                                SHIPLOCL
//      PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EQ,0000,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIPLOCL
//SHIPLOCL EXEC PGM=IRXJCL,COND=(8,LE),                    SHIPLOCL
//        PARM='UPDTTGGR &Destination / &Package'
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//SYSEXEC   DD DSN=SYSMD32.NDVR.TEAM.REXX,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIPLOCL
$$
//SYSUT2   DD  DSN=PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY,
//             DISP=(,CATLG),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//*
//* *----------------------------------------------------------------*
//*
//CONFABND EXEC PGM=IEBGENER,COND=ONLY EXECUTED AT THE REMOTE SITE
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST
//&Userid�9 JOB (2SH1SH20),MA1N.SB,
//         MSGLEVEL=(1,1),MSGCLASS=H,CLASS=J,
//         NOTIFY=&SYSUID TYPRUN=HOLD
/*XEQ GROUP1
/*JOBPARM S=&SENDNODE
//*------------------------------------------------------  SHIPLOCL
//*------------------------------------------------------  SHIPLOCL
//* MY DESTNAME = &Destination
//* MY FROMNODE = &SENDNODE
//* MY PACKAGE  = &Package
//* MY VNBCPARM = C1BMX000,&Date8,&Time8
//*------------------------------------------------------  SHIPLOCL
//*--- Confirmation/Notification job ------Abend-----------SHIPLOCL
//CONFCOPY EXEC PGM=NDVRC1,                                SHIPLOCL
//         PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,AB,****,$DEST_ID'
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*--------------------------------------------------------SHIPLOCL
//SHIPLOCL EXEC PGM=IRXJCL,COND=(8,LE),                    SHIPLOCL
//        PARM='UPDTTGGR &Destination / &Package'
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//SYSEXEC   DD DSN=SYSMD32.NDVR.TEAM.REXX,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//*------------------------------------------------------- SHIPLOCL
//* *--------------------------------------------* SHIPLOCL (CONT.)  *
$$
//SYSUT2   DD  DSN=PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY,
//             DISP=(,CATLG),SPACE=(TRK,(1,0)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//             UNIT=SYSALLDA
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//* *--------------------------------------------* SHIPLOCL (CONT.)  *
//SUBMIT   EXEC PGM=IKJEFT01
//SYSOUT    DD  SYSOUT=*
//SYSTSPRT  DD  SYSOUT=*
//SYSTSIN   DD  *
 SUBMIT 'PUBLIC.LOCAL.D&Date6.T&Time6.NOTIFY'
//*                                                           SHIPLOCL
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//C1BMXLIB DD DATA,DLM=##
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
##
//*
//* *--------------------------------------------* C1BMXJOB (CONT.)  *
//*
//* ******************************************************************
//* *  SHIP PACKAGE PKG-ID TO DESTINATION DEST-ID ( OPTION BACKOUT ) .
//* ******************************************************************
//*
//* THE FOLLOWING DD STATEMENT MUST BE THE *LAST* CARD IN THIS MEMBER.
//* ISPSLIB MEMBER C1BMXIN IS INCLUDED AFTER IT AS THE INSTREAM DATA.
//*
//C1BMXIN  DD *  *-------------------------------* ISPSLIB(C1BMXIN)  *
SHIP PAC '&Package' TO DEST &Destination OPT &ShipOutput .
//* *============================================* ISPSLIB(C1BMXLOC) *
//* *==============================================================* *
//* *==============================================================* *
//* *==============================================================* *
//* *==============================================================* *
//*
//C1BMXLOC EXEC PGM=IKJEFT01,COND=(12,LE,NDVRSHIP)         SHIPLOCL
//SYSTSIN   DD DSN=&&XLCC,DISP=(OLD,PASS)
//SYSTSPRT  DD SYSOUT=*
//SYSOUT    DD SYSOUT=*
//* *--------------------------------------------* ISPSLIB(SHIPLOCL) *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//*                                                        SHIPLOCL
//CONFGE12 EXEC PGM=NDVRC1,REGION=4096K,COND=(12,GT),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0012,***L****'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//* *--------------------------------------------* SHIPLOCLSHIPLOCL(CONT
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//* *--------------------------------------------------------------* *
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE08 EXEC PGM=NDVRC1,REGION=4096K,COND=(08,NE),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0008,***L****'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE04 EXEC PGM=NDVRC1,REGION=4096K,COND=(04,NE),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0004,***L****'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFGE00 EXEC PGM=NDVRC1,REGION=4096K,COND=(00,NE),
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,GE,0000,***L****'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//*                                                        SHIPLOCL
//CONFABND EXEC PGM=NDVRC1,REGION=4096K,COND=ONLY,         SHIPLOCL
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,AB,****,********'
//*                                                        SHIPLOCL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS),
//            UNIT=SYSALLDA
//*                                                        SHIPLOCL
//* ******************************************************************
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS
//* ******************************************************************
//STEPLIB  DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQAUTH
//*        DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.NDVR.V180CA06.CSIQLOAD
//*
//*********************************************************************
//*             ESI TRACE IN BATCH MODE                               *
//*********************************************************************
//*EN$TRESI DD SYSOUT=*
//*EN$TRALC DD SYSOUT=*
//*
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT *************************
//SYMDUMP  DD DUMMY
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES *********
//*                                                        SHIPLOCL
//* *--------------------------------------------* ISPSLIB(SHIPLOCL) *
//* ISPSLIB(C1BMXEOJ) - END OF JOB
          
./  ADD  NAME=SHIPMODL                
//&Jobname  JOB (55800000),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,      SHIPMODL
//      NOTIFY=&Notify,TYPRUN=SCAN
//*     NOTIFY=&Notify/&TYPRUN
//*-------------------------------------------------------------------  SHIPMODL
//*----.....ENDEVOR.MODELS(SHIPMODL)----------------------------------  SHIPMODL
//  SET PACKAGE=&Package
//  SET DEST=&Destination
//  SET HLQ=&userid.SHIP.&Destination
//  SET AUTHLIB1=CADEMO.ENDV.RUN.CSIQAUTU                               SHIPMODL
//  SET AUTHLIB2=CADEMO.ENDV.RUN.CSIQAUTH                               SHIPMODL
//  SET   CONLIB=CADEMO.ENDV.RUN.CSIQLOAD                               SHIPMODL
//  SET SOURCE=CADEMO.ENDV.RUN.CSIQOPTN                                 SHIPMODL
//  SET ISPSLIB=CADEMO.ENDV.RUN.CSIQSENU                                SHIPMODL
//* *==============================================================* *  SHIPMODL
//* *==============================================================* *  SHIPMODL
//NDVRSHIP EXEC PGM=NDVRC1,DYNAMNBR=1500,REGION=4096K,                  SHIPMODL
//         PARM='C1BMX000,&Date8,&Time8 SHIP &Userid'
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=&AUTHLIB1
//         DD DISP=SHR,DSN=&AUTHLIB2
//CONLIB   DD DISP=SHR,DSN=&CONLIB
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//*                                                                     SHIPMODL
//* *--------------------------------------------* C1BMXJOB (CONT.)  *  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXDET DD SYSOUT=*     ** SHIPMENT DETAIL REPORT  ****************  SHIPMODL
//C1BMXSUM DD SYSOUT=*     ** SHIPMENT SUMMARY REPORT ****************  SHIPMODL
//C1BMXSYN DD SYSOUT=*     ** INPUT LISTING AND SYNTAX ERROR REPORT **  SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  XCOM COMMAND DATASET                                             SHIPMODL
//* *  XCOM MODEL CONTROL CARD DATASET                                  SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXXCC DD DSN=&&XXCC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXXCM DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  LOCAL TRANSFER COPY/RUN COMMAND DATASETS                         SHIPMODL
//* *  LOCAL MODEL CONTROL CARD DATASET                                 SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXLCC DD DSN=&&XLCC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXLCM DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  BULK DATA TRANSFER  U_S_I_N_G  J_E_S  - GENERATED JCL DATASET    SHIPMODL
//* *  BULK DATA TRANSFER MODEL JCL DATASET                             SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXB1C DD DSN=&&XB1C,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXB1M DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  BULK DATA TRANSFER  V_E_R_S_I_O_N  2  COPY/RUN COMMAND DATASETS  SHIPMODL
//* *  BULK DATA TRANSFER MODEL CONTROL CARD DATASET                    SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXBDC DD DSN=&&XBDC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXBDM DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  NETVIEW FTP "ADD TO TRANSMISSION QUEUE" DATASET AND INTERNAL RDR SHIPMODL
//* *  NETVIEW FTP MODEL CONTROL CARD DATASET                           SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXFTC DD DSN=&&XFTC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXFTM DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  NETWORK DATA MOVER COPY/RUN COMMAND DATASETS                     SHIPMODL
//* *  NETWORK DATA MOVER MODEL CONTROL CARD DATASET                    SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXNWC DD DSN=&&XNWC,DISP=(NEW,PASS),SPACE=(TRK,(2,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//C1BMXNWM DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  PDS CONTAINING REMOTE IEBCOPY AND IDCAMS JOBSTEP MEMBERS         SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXRJC DD DISP=SHR,                                                 SHIPMODL
//            DSN=&ISPSLIB
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  SHIPMENT DATE/TIME READ BY INLINE HOST CONFIRMATION STEP         SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXDTM DD DSN=&&XDTM,DISP=(NEW,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,Lf CL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  HOST STAGING DATASET DELETION STATEMENTS (IDCAMS)                SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXDEL DD DSN=&&HDEL,DISP=(NEW,PASS),SPACE=(TRK,(10,10)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  REMOTE JCL MODEL MEMBERS                                         SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXMDL DD DISP=SHR,                                                 SHIPMODL
//            DSN=&SOURCE
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  JCL SEGMENTS TO CREATE GROUP SYMBOLICS FOR MODELLING             SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXHJC DD DATA,DLM=##                                               SHIPMODL
//&Jobname JOB (55800000),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,      SHIPMODL
//      NOTIFY=&Userid
##
//*                                                                     SHIPMODL
//* *--------------------------------------------* C1BMXJOB (CONT.)  *  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXHCN DD DATA,DLM=##                                               SHIPMODL
//* *--------------------------------------------* ISPSLIB(C1BMXHCN) *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//*                                                                     SHIPMODL
//CONFEXEC EXEC PGM=NDVRC1,REGION=4096K,                                SHIPMODL
//    PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,EX,****,$DEST_ID'
//*                                                                     SHIPMODL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=CAPRD.SIQ126S1.USER.AUTHLIB                  SHIPMODL
//         DD DISP=SHR,DSN=CAPRD.SIQ126S1.AUTHLIB                       SHIPMODL
//CONLIB   DD DISP=SHR,DSN=CAPRD.SIQ126S1.CONLIB                        SHIPMODL
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//* *--------------------------------------------* C1BMXHCN (CONT.)  *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//*                                                                     SHIPMODL
//CONFABND EXEC PGM=NDVRC1,REGION=4096K,COND=ONLY,                      SHIPMODL
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,AB,****,********'
//*                                                                     SHIPMODL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=CAPRD.SIQ126S1.USER.AUTHLIB                  SHIPMODL
//         DD DISP=SHR,DSN=CAPRD.SIQ126S1.AUTHLIB                       SHIPMODL
//CONLIB   DD DISP=SHR,DSN=CAPRD.SIQ126S1.CONLIB                        SHIPMODL
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
##
//*                                                                     SHIPMODL
//* *--------------------------------------------* C1BMXJOB (CONT.)  *  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXRCN DD DATA,DLM=##                                               SHIPMODL
//* *--------------------------------------------* ISPSLIB(C1BMXRCN) *  SHIPMODL
//*                                                                     SHIPMODL
//* *================================================================*  SHIPMODL
//* *  INSTREAM DATASET CONTAINING REMOTE CONFIRMATION JCL              SHIPMODL
//* *================================================================*  SHIPMODL
//*                                                                     SHIPMODL
//CONFCOPY EXEC PGM=IEBGENER           EXECUTED AT THE REMOTE SITE      SHIPMODL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST         SHIPMODL
//&Jobname JOB (55800000),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,      SHIPMODL
//      NOTIFY=&Userid
//CONFEXEC EXEC PGM=NDVRC1,                                             SHIPMODL
//   PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,EX,****,$DEST_ID'
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=CAPRD.SIQ126S1.USER.AUTHLIB                  SHIPMODL
//         DD DISP=SHR,DSN=CAPRD.SIQ126S1.AUTHLIB                       SHIPMODL
//CONLIB   DD DISP=SHR,DSN=CAPRD.SIQ126S1.CONLIB                        SHIPMODL
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//* *--------------------------------------------* C1BMXRCN (CONT.)  *  SHIPMODL
$$
//SYSUT2   DD SYSOUT=(A,INTRDR)                                         SHIPMODL
//SYSPRINT DD SYSOUT=*                                                  SHIPMODL
//SYSIN    DD DUMMY                                                     SHIPMODL
//*                                                                     SHIPMODL
//CONFABND EXEC PGM=IEBGENER,COND=ONLY EXECUTED AT THE REMOTE SITE      SHIPMODL
//SYSUT1   DD DATA,DLM=$$              JOB SHIPPED BACK TO HOST         SHIPMODL
//&Jobname JOB (55800000),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,      SHIPMODL
//      NOTIFY=&Userid
//ABNDEXEC EXEC PGM=NDVRC1,                                             SHIPMODL
//  PARM='C1BMX000,&Date8,&Time8,CONF,RCPY,AB,****,$DEST_ID'
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=CAPRD.SIQ126S1.USER.AUTHLIB                  SHIPMODL
//         DD DISP=SHR,DSN=CAPRD.SIQ126S1.AUTHLIB                       SHIPMODL
//CONLIB   DD DISP=SHR,DSN=CAPRD.SIQ126S1.CONLIB                        SHIPMODL
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//* *--------------------------------------------* C1BMXRCN (CONT.)  *  SHIPMODL
$$
//SYSUT2   DD SYSOUT=(A,INTRDR)                                         SHIPMODL
//SYSPRINT DD SYSOUT=*                                                  SHIPMODL
//SYSIN    DD DUMMY                                                     SHIPMODL
##
//*                                                                     SHIPMODL
//* *--------------------------------------------* C1BMXJOB (CONT.)  *  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXLIB DD DATA,DLM=##                                               SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=CAPRD.SIQ126S1.USER.AUTHLIB                  SHIPMODL
//         DD DISP=SHR,DSN=CAPRD.SIQ126S1.AUTHLIB                       SHIPMODL
//CONLIB   DD DISP=SHR,DSN=CAPRD.SIQ126S1.CONLIB                        SHIPMODL
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
##
//*                                                                     SHIPMODL
//* *--------------------------------------------* C1BMXJOB (CONT.)  *  SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  SHIP PACKAGE PKG-ID TO DESTINATION DEST-ID ( OPTION BACKOUT ) .  SHIPMODL
//* ******************************************************************  SHIPMODL
//*                                                                     SHIPMODL
//* THE FOLLOWING DD STATEMENT MUST BE THE *LAST* CARD IN THIS MEMBER.  SHIPMODL
//* ISPSLIB MEMBER C1BMXIN IS INCLUDED AFTER IT AS THE INSTREAM DATA.   SHIPMODL
//*                                                                     SHIPMODL
//C1BMXIN  DD *  *-------------------------------* ISPSLIB(C1BMXIN)  *  SHIPMODL
SHIP PACKAGE '&Package' TO DESTINATION &Destination &ShipOption .
//* *============================================* ISPSLIB(C1BMXLOC) *  SHIPMODL
//* *==============================================================* *  SHIPMODL
//* *==============================================================* *  SHIPMODL
//* *==============================================================* *  SHIPMODL
//* *==============================================================* *  SHIPMODL
//*                                                                     SHIPMODL
//C1BMXLOC EXEC PGM=IKJEFT01,COND=(12,LE,NDVRSHIP)                      SHIPMODL
//SYSTSIN   DD DSN=&&XLCC,DISP=(OLD,PASS)
//SYSTSPRT  DD SYSOUT=*                                                 SHIPMODL
//SYSOUT    DD SYSOUT=*                                                 SHIPMODL
//* *--------------------------------------------* ISPSLIB(C1BMXHCN) *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//*                                                                     SHIPMODL
//CONFEXEC EXEC PGM=NDVRC1,REGION=4096K,                                SHIPMODL
//    PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,EX,****,***L****'
//*                                                                     SHIPMODL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=&AUTHLIB1
//         DD DISP=SHR,DSN=&AUTHLIB2
//CONLIB   DD DISP=SHR,DSN=&CONLIB
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//* *--------------------------------------------* C1BMXHCN (CONT.)  *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//* *--------------------------------------------------------------* *  SHIPMODL
//*                                                                     SHIPMODL
//CONFABND EXEC PGM=NDVRC1,REGION=4096K,COND=ONLY,                      SHIPMODL
//   PARM='C1BMX000,&Date8,&Time8,CONF,HXMT,AB,****,********'
//*                                                                     SHIPMODL
//C1BMXDTM DD DSN=&&XDTM,DISP=(MOD,PASS),SPACE=(TRK,(1,0)),
//            DCB=(RECFM=FB,LRECL=80,DSORG=PS),                         SHIPMODL
//            UNIT=3390                                                 SHIPMODL
//*                                                                     SHIPMODL
//* ******************************************************************  SHIPMODL
//* *  STEPLIB, CONLIB, MESSAGE LOG AND ABEND DATASETS                  SHIPMODL
//* ******************************************************************  SHIPMODL
//STEPLIB  DD DISP=SHR,DSN=&AUTHLIB1
//         DD DISP=SHR,DSN=&AUTHLIB2
//CONLIB   DD DISP=SHR,DSN=&CONLIB
//*                                                                     SHIPMODL
//SYSUDUMP DD SYSOUT=*     *** DUMP TO SYSOUT ************************* SHIPMODL
//SYMDUMP  DD DUMMY                                                     SHIPMODL
//C1BMXLOG DD SYSOUT=*     *** MESSAGES, ERRORS, RETURN CODES ********* SHIPMODL
//* ISPSLIB(C1BMXEOJ) - END OF JOB                                      SHIPMODL
          
./  ADD  NAME=SHIPRULE                
*Environment Stage System-- Subsys-- Destination St Jobname-  Date Time  Typrun  Notify----- 
 DEV         *     FINANCE  REMOTEST TST32       _  RMTEMD32  +0   0000                      
*QAS         9     FINANCE  *        MTS21       _  SENDTS21  +0   0000  HOLD                
 PRD         2     *        *        MTS32       _  PRODMD32  +0   0000                      
 PRD         2     *        *        MD57#       _  PRODMD57  +0   0000                      
 ADMIN       1     CATSNDVR *        MC66A       _  D32#MC66  +0   0000                      
 ADMIN       1     CATSNDVR *        MC32A       _  D32#MC32  +0   0000                                
./  ADD  NAME=SWEEPJOB                
//IBMUSERS JOB (0000),
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,
//      NOTIFY=&SYSUID
//*-----------------------------------------------------------------*   JOB02096
//* SWEEP PACKAGE DATABASE AND ESTABLISH RUNJCL FOR PACKAGES THAT   *   JOB02096
//* ARE APPROVED AND MEET SUBMIT TIMES                              *   JOB02096
//*-----------------------------------------------------------------*
//  SET SUBMITDS=IBMUSER.PULLTGGR         <- Work  datasets
//  SET MODELDSN=CAPRD.ENDV.SHIP.MODELS   <- Where Shipping MODELS
//  SET SYSSEXEC=CAPRD.ENDV.SHIP.REXX     <- Where is PULLTGGR
//*-----------------------------------------------------------------*
//SWEEP    EXEC PGM=NDVRC1,PARM='ENBP1000',REGION=0M
//STEPLIB  DD DISP=SHR,DSN=CAPRD.END##.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.END##.CSIQAUTH
//         DD DISP=SHR,DSN=CAPRD.END##.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.END##.CSIQLOAD
//ENPSCLIN DD *
 SUBMIT PACKAGE *
 JOBCARD DDNAME JCLIN
    TO INTERNAL READER DDNAME JCLOUT
    OPTION WHERE PACKAGE STATUS IS APPROVED
           INCREMENT JOBNAME
           JCL PROCEDURE NAME IS ENDEVOR
 .
//JCLOUT   DD   SYSOUT=(A,INTRDR),DCB=(BLKSIZE=80,LRECL=80,RECFM=F)
//JCLIN    DD  DATA,DLM=@@
//SWEEP#01 JOB (0000),                                                  JOB00219
//      'ENDEVOR JOB',MSGLEVEL=(1,1),CLASS=B,REGION=0M,MSGCLASS=A,
//      NOTIFY=&SYSUID
//*-------------------------------------------------------------------*
//    JCLLIB ORDER=(CAPRD.END##.CSIQJCL)
//**------------------------------------------------------------------*
@@
//C1MSGS1  DD   SYSOUT=*
//C1MSGS2  DD   SYSOUT=*
//SYSABEND DD   SYSOUT=*
//SYSPRINT DD   SYSOUT=*
//SYSTERM  DD   SYSOUT=*
//*-------------------------------------------------------------------*
//*  Run the step below to Sweep Package Shipments.                  -*
//*-------------------------------------------------------------------*
//SHIPMENT EXEC PGM=IKJEFT1B,COND=(4,LE),
//   PARM=('PULLTGGR &SUBMITDS',
//         ' &MODELDSN')
//STEPLIB  DD DISP=SHR,DSN=CAPRD.END##.CSIQAUTU
//         DD DISP=SHR,DSN=CAPRD.END##.CSIQAUTH
//         DD DISP=SHR,DSN=CAPRD.END##.CSIQLOAD
//CONLIB   DD DISP=SHR,DSN=CAPRD.END##.CSIQLOAD
//SYSTSPRT DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//*  Trigger file is dynamically allocated
//SUBFAILS DD SYSOUT=*
//SYSEXEC  DD DISP=SHR,DSN=&SYSEXEC
//SYSTSIN  DD DUMMY
//*-------------------------------------------------------------------*
          
./  ADD  NAME=TBLUNLOD                
/*     REXX    */                                                       03840000
/* Examine a 'Table Tool' table and extract its content               */03850000
/*   into a REXX stem array format. This allows validation            */03850000
/*   of Tables to consider content of multiple tables.                */03850000
/*                                                                    */03850000
   /* WRITTEN BY DAN WALTHER */                                         03870000

   Arg DSN Request HeadingChar ;
   tmp = Translate(DSN,' ','()')
   MEMBER = Word(tmp,Words(tmp))
   Sa= 'Request='REQUEST

   STRING = "ALLOC DD(TABLE) DA('"DSN"') SHR REUSE"
   CALL BPXWDYN STRING;
   "EXECIO * DISKR TABLE (STEM $tablerec. FINIS"

   $TableCommentPrefix = "**";  /* For TABLE   comments   */

   $TableHeadingChar  = "*" ;   /* For TABLE   heading    */
   If Substr(HeadingChar,1,1) /= ' ' then,
      $TableHeadingChar = HeadingChar ;

   /* Find Heading for Table */
   DO $tbl = 1 TO $tablerec.0      /* Look for header or CSV format*/
      /* If not finding a heading, just get out */
      If Substr($tablerec.$tbl,1,2) = $TableCommentPrefix then Iterate ;
      If Substr($tablerec.$tbl,1,1) /= $TableHeadingChar then Iterate ;
      Leave
   End

   If Substr($tablerec.$tbl,1,1) /= $TableHeadingChar then Exit(8) ;

   /* A Heading was found, get column info for Table */
   Call Process_Heading
   Call CaptureVariablePositions
   If REQUEST = 'ALL' then,
      Call CaptureTableContent

   Exit

/* This routine copied from ENBPUI00   */
Process_Heading :

   $LastWord = Word($tablerec.$tbl,Words($tablerec.$tbl));
   If DATATYPE($LastWord) = 'NUM' then,
      Do
      Say 'Please remove sequence numbers from the Table'
      Exit(12)
      End

   $tmprec = Substr($tablerec.$tbl,2) ;
   $PositionSpclChar = POS('-',$tmprec) ;
   If $PositionSpclChar = 0 then,
      $PositionSpclChar = POS('*',$tmprec) ;
   $tmpreplaces = '-,.'$TableHeadingChar ;
   $tmprec = TRANSLATE($tmprec,' ',$tmpreplaces);
   $table_variables = strip($tmprec);
   $Heading_Variable_count = WORDS($table_variables) ;
   If $PositionSpclChar = 0 then,
      return ;
   If $Heading_Variable_count /=,
      Words(Substr($tablerec.$tbl,2)) then,
      Do
      Say 'Invalid table Heading:' $tablerec.$tbl
      exit(12)
      End

   $heading = Overlay(' ',$tablerec.$tbl,1); /* Space leading * */
   Do $pos = 1 to $Heading_Variable_count
      $headingVariable = Word($table_variables,$pos) ;
      If $headingVariable = "$my_rc" then,
         $headingVariable = "$Temp_RC"
      $tmp = Wordindex($heading,$pos) ;
      $Starting_$position.$headingVariable = $tmp
      $tmp = $tmp + Length(Word($heading,$pos)) -1 ;
      $Ending_$position.$headingVariable = $tmp
   end; /* DO $pos = 1 to $Heading_Variable_count */

   $Table_Type = "positions" ;
   Return ;

CaptureVariablePositions:

   $headingvariables = Translate($heading,' ','-*')
   Queue "$heading."MEMBER,
               "='"Space($headingvariables)"'"

   Do $pos = 1 to $Heading_Variable_count
      $headingVariable = Word($table_variables,$pos) ;
      Starts=$Starting_$position.$headingVariable
      Ends  =$Ending_$position.$headingVariable
      Queue "Start."MEMBER"."$headingVariable"="Starts
      Queue "End."MEMBER"."$headingVariable"="Ends
      If REQUEST = 'ALL' then,
         Do
         Start.MEMBER.$headingVariable=Starts
         Ends.MEMBER.$headingVariable=Ends
         End
   end; /* DO $pos = 1 to $Heading_Variable_count */

   Return ;

CaptureTableContent:

   DO $tbl = 1 TO $tablerec.0      /* Capture content of deail recs*/
      Queue "Char@1."MEMBER"."$tbl"= '"Substr($tablerec.$tbl,1,1)"'"
      If Substr($tablerec.$tbl,1,2) = $TableCommentPrefix then Iterate ;
      If Substr($tablerec.$tbl,1,1) = $TableHeadingChar then Iterate ;
      Do $pos = 1 to $Heading_Variable_count
         $headingVariable = Word($table_variables,$pos) ;
         Starts=$Starting_$position.$headingVariable
         Ends  =$Ending_$position.$headingVariable
         len = Ends - Starts +1
         value = Strip(Substr($tablerec.$tbl,Starts,len))
         $delim = "'"
         If Pos("'",value) > 0 then,
            Do
            $delim = '"'
            value = Translate(value,"'",'"')
            End
         Queue "Value."MEMBER"."$headingVariable"."$tbl"=",
             $delim || value ||$delim
      end; /* DO $pos = 1 to $Heading_Variable_count */

   End /* Do Forever */

   Queue "LastRecord."MEMBER"="$tablerec.0

   Return ;

          
./  ADD  NAME=TRIGGER                
*St Package--------- System-- Destination Date---- Time Jobname- Jobnumber Typrun Notify
 /  T#OCXL2603798307 CONCURNT MTS21       20140324 0000 MTS21TST JOB0232
 /  X#VBIQ3243131551 FINANCE  MTS32       20210210 0000 REMOTEST JOB59266
 /  1#VBJM2335646942 CATSNDVR MTS32       20210210 0000 FROMMD32 JOB62692
 /  2#VBOS2344967392 FINANCE  MTS32       20210215 1924 PRODMD32 00068958
 /  X#VBOS3909643281 FINANCE  MTS32       20210215 1939 RMTEMD32 JOB19266
 /  X#VBOS4258944784 FINANCE  MTS32       20210215 1944 RMTEMD32 JOB19491
 12 X#VBOS5733561884 FINANCE  TST32       20210215 1959 RMTEMD32 JOB20284
 s  UTIL#XAQT5642836 CATSNDVR MTS06       20230117 2056 D32#MC32

          
./  ADD  NAME=UPDTTGGR                
/*  REXX  */
/* Update the Trigger file at the completion of package shipment */

   trace Off

/* Variable settings for each site --->           */
   WhereIam = WHERE@M1()

   interpret 'Call' WhereIam "'MyCLS2Library'"
   MyCLS2Library = Result
   Say 'Running UPDTTGGR in' MyCLS2Library

   interpret 'Call' WhereIam "'TriggerFileName'"
   TriggerFileName = Result

   interpret 'Call' WhereIam "'MyDATALibrary'"
   MyDATALibrary = Result
   ShipRules       = MyDATALibrary"(SHIPRULE)"

   interpret 'Call' WhereIam "'MySEN2Library'"
   MySEN2Library = Result
/* <---- Variable settings for each site          */

/*                                                                    */
/* This Rexx updates Trigger entries  for a package just submitted    */
/* for package shipment.                                              */
/* It also checks for 'Transfer completed successfully' text          */
/* It is executed by a step in the #PSNFTPE shipment member .         */

   ARG Destination Calltype Package ;

   Jobnumber = '' ;     /* replace if one is found */

   If Calltype = '#PSNFTPE' then,
      Do
      /* Read the FTP output  */
      MyRC= 0 ;
      Call ScanFTPOutput ;
      If MyRC > 0 then Exit(MyRC) ;

      If Jobnumber = '' then Exit(MyRC) ;
      End /* If Calltype = '#PSNFTPE' */

   If Calltype = 'NDMSCAN'  then,
      Do
      /* Read the NDM output  */
      MyRC= 0 ;
      Call ScanNDMOutput ;
      If MyRC > 0 then Exit(MyRC) ;

      If Jobnumber = '' then Exit(MyRC) ;
      End /* If Calltype = '#PSNFTPE' */

   Call AllocateTriggerForUpdate ;
   Call UpdateTriggerEntry ;
   Call FreeTriggerFile ;

/*                                                                    */
/* All Done                                                           */
/*                                                                    */

   Exit

/*                                                                    */
/* Allocate the Rules member  for Read only                           */
/*                                                                    */

ScanFTPOutput:

   "Execio * DISKR FTPOUT (Stem ftp. finis "
   IF RC > 0 then EXIT(8)
   If ftp.0 < 1 then EXIT(8)

   "Execio * DISKW OUTPUT (Stem ftp. finis "

   MyRC= 8 ;
   Do f# = 1 to ftp.0
      ftp@ = Substr(ftp.f#,2)
      w1 = Word(ftp@,1)
      w2 = Word(ftp@,2)
      w3 = Word(ftp@,3)
      w4 = Word(ftp@,4)
      if w2='Transfer' & w3='completed' & w4='Successfully' then,
         Do
         MyRC= 0 ;
         Leave ;
         End
      w5 = Word(ftp@,5)
      w6 = Word(ftp@,6)
      w7 = Word(ftp@,7)
   /* 250-It is known to JES as JOB32058 */
      if w3='known' & w4='to' & w5='JES' & w6='as' then,
         Do
         Jobnumber = w7;
         MyRC= 0 ;
         Leave ;
         End
   End ; /* Do f# = 1 to ftp.0   */

   Return ;

ScanNDMOutput:

   "Execio * DISKR NDMOUT (Stem ndm. finis "
   IF RC > 0 then EXIT(8)
   If ndm.0 < 1 then EXIT(8)

   "Execio * DISKW DMPRINT (Stem ndm. finis "

   MyRC= 8 ;
   Do f# = 1 to ndm.0
      ndm@ = Substr(ndm.f#,2)
      w1 = Word(ndm@,1)
      w2 = Word(ndm@,2)
      w3 = Word(ndm@,3)
      w4 = Word(ndm@,4)
      /* SUBMITTED PROCESS NUMBER 00068958 */
      if w2='SUBMITTED' & w3='PROCESS' & w4='NUMBER' then,
         Do
         Jobnumber = Word(ndm@,5)
         MyRC= 0 ;
         Leave ;
         End
   End ; /* Do f# = 1 to ndm.0   */

   Return ;

AllocateTriggerForUpdate:

   STRING = "ALLOC DD(TRIGGER)",
              " DA('"TriggerFileName"') OLD REUSE"
   seconds = '000005' /* Number of Seconds to wait if needed */

   Do Forever  /* or at least until the file is available */
      CALL BPXWDYN STRING;
      MyRC = RC
      MyResult = RESULT ;
      If MyResult = 0 then Leave
      Call WaitAwhile
   End /* Do Forever */

   Return ;

UpdateTriggerEntry:


   "Execio * DISKR TRIGGER (Stem $tablerec. finis "

   $tbl = 1 ;
   $TableHeadingChar = '*'
   /* Build all the ...pos variables from heading */
   Call Process_Trigger_Heading ;

   WeHaveAnUpdate = 'N'
   Do t# = $tablerec.0 to 1 by -1
      Say 'Examining Trigger entry for ',
           Substr($tablerec.t#,Packagepos,16),
           Substr($tablerec.t#,Destinationpos,08)
      Say '          for match with... ',
           Left(Package,16) Left(Destination,08)
      If (Calltype = '#PSNFTPE' & ,
          Substr($tablerec.t#,Stpos,01) /= 's')   then iterate ;
      If Substr($tablerec.t#,Packagepos,16) /=,
         Left(Package,16) then iterate ;
      If Substr($tablerec.t#,Destinationpos,08) /= ,
                  Left(Destination,08) then iterate ;
      /* We have a match */
      If Calltype = '#PSNFTPE' | Calltype = 'NDMSCAN' then,
         Do
         /* Update Job number */
         $tablerec.t# = Overlay(Jobnumber' ',$tablerec.t#,Jobnumberpos)
         /* Update status     */
         $tablerec.t# = Overlay('S',$tablerec.t#,Stpos)
         End;
      Else,
         $tablerec.t# = Overlay(Calltype,$tablerec.t#,Stpos) ;
      WeHaveAnUpdate = 'Y'
      msg='Updating ...                ',
           Left(Package,16) Left(Destination,08)
      If Jobnumber /= '' then msg = msg,
           ' Submitted job' Jobnumber
      Say msg ;
      Leave ;
   End /*  Do t# = 1 to $tablerec. */

   If WeHaveAnUpdate = 'Y' then,
      "Execio * DISKW TRIGGER (Stem $tablerec. finis "

   Return ;

/*                                                                    */
/* Free the Trigger File                                */
/*                                                                    */

FreeTriggerFile:

   STRING = "FREE DD(TRIGGER)"
   CALL BPXWDYN STRING  ;

   Return ;

/*                                                                    */
/* Convert Date formats                                               */
/*                                                                    */

WaitAwhile:
  /*                                                               */
  /* A resource is unavailable. Wait awhile and try                */
  /*   accessing the resource again.                               */
  /*                                                               */
  /*   The length of the wait is designated in the parameter       */
  /*   value which specifies a number of seconds.                  */
  /*   A parameter value of '000003' causes a wait for 3 seconds.  */
  /*                                                               */

  seconds = Abs(seconds)
  seconds = Trunc(seconds,0)
  Say "Waiting for" seconds "seconds at " DATE(S) TIME()

  /* AOPBATCH and BPXWDYN are IBM programs */
  CALL BPXWDYN  "ALLOC DD(STDOUT) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDERR) DUMMY SHR REUSE"
  CALL BPXWDYN  "ALLOC DD(STDIN) DUMMY SHR REUSE"

  /* AOPBATCH and BPXWDYN are IBM programs */
  parm = "sleep "seconds
  Address LINKMVS "AOPBATCH parm"

  Return

Process_Trigger_Heading :
/* The subroutine below is modified from the TBL#TOOL                 */

   $tbl = 1 ;
   $TableHeadingChar = '*'

   $LastWord = Word($tablerec.$tbl,Words($tablerec.$tbl));
   If DATATYPE($LastWord) = 'NUM' then,
      Do
      Say 'Please remove sequence numbers from the Table'
      Exit(12)
      End

   $tmprec = Substr($tablerec.$tbl,2) ;
   $PositionSpclChar = POS('-',$tmprec) ;
   If $PositionSpclChar = 0 then,
      $PositionSpclChar = POS('*',$tmprec) ;
   $tmpreplaces = '-,.'$TableHeadingChar ;
   $tmprec = TRANSLATE($tmprec,' ',$tmpreplaces);
   $table_variables = strip($tmprec);
   $Heading_Variable_count = WORDS($table_variables) ;
   If $Heading_Variable_count /=,
      Words(Substr($tablerec.$tbl,2)) then,
      Do
      Say 'Invalid table Heading:' $tablerec.$tbl
      exit(12)
      End

   $heading = Overlay(' ',$tablerec.$tbl,1); /* Space leading * */
   Do $pos = 1 to $Heading_Variable_count
      $HeadingVariable = Word($table_variables,$pos) ;
      $tmp = Wordindex($Heading,$pos) ;
      $Starting_$position.$HeadingVariable = $tmp
      $tmp = $tmp + Length(Word($Heading,$pos)) -1 ;
      $Ending_$position.$HeadingVariable = $tmp

      /* Build ...pos variables and values */
      tmp = ""$HeadingVariable"pos =",
             $Starting_$position.$HeadingVariable
      Sa= tmp
      Interpret tmp

   end; /* DO $pos = 1 to $Heading_Variable_count */

   $Heading = Translate($Heading,' ','-*')

   Return ;

          
./  ADD  NAME=WHERE@M1                
/*  REXX   */
/* Names the member that contains your site-specific settings. */
/* Override to another value if you prefer --->   */
   WhereIam =  Strip(Left("@"MVSVAR(SYSNAME),8)) ;
   Return (WhereIam)
          
./  ADD  NAME=WHEREIAM                
/*  REXX   */
/* Names the member that contains your site-specific settings. */
   WhereIam =  Strip(Left("@"MVSVAR(SYSNAME),8)) ;
   Say 'WhereIam =' WhereIam
   EXIT
          
./  ADD  NAME=APIALSUM                
APIALSUM TITLE 'ENDEVOR - API LIST PACKAGE ACTION SUMMARY'
*  THESE ROUTINES ARE DISTRIBUTED BY THE CA TECHNOLOGIES STAFF
*  "AS IS".  NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS MADE
*  FOR THEM.  CA TECHNOLOGIES CANNOT GUARANTEE THAT THE ROUTINES
*  ARE ERROR FREE, OR THAT IF ERRORS ARE FOUND, THEY WILL BE
*  CORRECTED.
*
*  /* WRITTEN BY DAN WALTHER */
***********************************************************************
*   DESCRIPTION: THIS SAMPLE PROGRAM ISSUES REQUESTS TO THE
*                ENDEVOR API TO EXTRACT ENDEVOR PACKAGE BACKOUT INFO.
*
*   HOW TO USE:  PASS THE PACKAGE NAME IN THE PARM WITH THE PROGRAM
*                CALL.
*          EXAMPLE:
*                EXEC PGM=NDVRC1,
*                PARM='CONCALL,DDN:STEPLIB,APIALSUM,PR#BACKOUT#TEST1'
*
*   REGISTER USAGE:
*                R2     -> SAVE RETURN CODE
*                R3     -> SAVE REASON CODE
*                R12    -> BASE PROGRAM
*                R13    -> STANDARD USAGE........
*                R15    -> RETURN CODE FROM CALL
*   ==>                 -> WE USE STANDARD STACK SAVEAREA USAGE
*
***********************************************************************
*   WORKAREA
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
WPARMLST DS    4F                      PARAMETER LIST
WCNT     DS    H                       ACTION COUNTER
         DS    0D
***********************************************************************
* API CONTROL BLOCK
** CAPRD.SIQ7006.SOURCE(ENHALSUM)
***********************************************************************
         ENHAACTL DSECT=NO
***********************************************************************
* API ACTION REQUEST BLOCKS
***********************************************************************
         ENHALSUM DSECT=NO
WORKLN   EQU   *-WORKAREA
***********************************************************************
*   REQISTER EQUATES
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
APIALSUM CSECT
APIALSUM AMODE 31
APIALSUM RMODE ANY
***********************************************************************
*   HOUSEKEEPING
***********************************************************************
         SAVE  (14,12)                 SAVE CALLERS REG 12(13)
         LR    R12,R15                 POINT TO THIS PROGRAM
        USING APIALSUM,R12
***********************************************************************
*   VALIDATE PARM LEN
***********************************************************************
*
         L     R6,0(,R1)
         LA    R6,2(,R6)               POINT TO package id in parm
*
***********************************************************************
*   GET STORAGE FOR WORKAREA
***********************************************************************
         L     R0,=A(WORKLN)           GET SIZE OF W.A
         GETMAIN R,LV=(0)              GET WORKING STORAGE
         ST    R1,8(R13)               STORE NEW STACK +8(OLD)
         ST    R13,4(R1)               STORE OLD STACK +4(NEW)
         LR    R13,R1                  POINT R13 TO OUR STACK
        USING SAVEAREA,R13             ESTABLISH ADDRESSIBILIY
         SPACE ,
************************************************************
*        INITIALIZE AND POPULATE THE CONTROL STRUCTURE
*        NOTE: IF ANY INVENTORY MANAGEMENT MESSAGES ARE ISSUED, THEY
*        ARE WRITTEN TO THE MSG DATA SET. THE OUTPUT FROM THIS REQUEST
*        IS WRITTEN TO THE LIST DATA SET.
************************************************************
*
XSCL000  DS    0H
************************************************************
*        INITIALIZE AND POPULATE THE REQUEST STRUCTURE
************************************************************
*
         API$INIT STG=AACTL,BLOCK=AACTL
         API$INIT STG=ALSUM_RQ,BLOCK=ALSUM_RQ
         API$INIT STG=ALSUM_RS,BLOCK=ALSUM_RS
*
         MVC   AACTL_MSG_DDN(8),=C'APIMSGS '
         MVC   AACTL_LIST_DDN(8),=C'APILIST '
*
         MVC   ALSUM_RQ_PKGID(16),0(R6) Move package id to request
*
************************************************************
*        BUILD PARMLIST
************************************************************
         LA    R1,WPARMLST
         LA    R14,AACTL
         ST    R14,0(0,R1)
         LA    R14,ALSUM_RQ
         ST    R14,4(0,R1)
         LA    R14,ALSUM_RS
         ST    R14,8(0,R1)
         OI    8(R1),X'80'
************************************************************
*
*        CALL THE ENDEVOR API INTERFACE PROGRAM
************************************************************
XCALLAPI DS    0H
         L     R15,=V(ENA$NDVR)
         BALR  R14,R15
         LR    R2,R15                    HOLD ONTO THE RETURN CODE
         LR    R3,R0                     HOLD ONTO THE REASON CODE
************************************************************
* SHUTDOWN THE API SERVER. ONLY THE AACTL BLOCK IS REQUIRED.
************************************************************
XSHUTDWN DS    0H
         API$INIT STG=AACTL,BLOCK=AACTL
         MVI   AACTL_SHUTDOWN,C'Y'
         LA    R1,WPARMLST
         LA    R14,AACTL
         ST    R14,0(0,R1)
         OI    0(R1),X'80'
         L     R15,=V(ENA$NDVR)
         BALR  R14,R15
***********************************************************************
* PROGRAM EXIT
***********************************************************************
         LR    R5,R13                  SAVE SAVEAREA ADDRESS
         L     R13,4(R13)              POINT TO PREVIOUS SAVEAREA
*   CLEAN UP THIS PROGRAM'S STORAGE
         L     R0,=A(WORKLN)                GET SIZE
         FREEMAIN R,A=(R5),LV=(R0)          FREE STORAGE
         LR    R15,R2                       SET RETURN CODE
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BSM   0,R14                        RETURN
         END
          
./  ADD  NAME=APIALDST                
APIALDST TITLE 'ENDEVOR - API LIST DESTINATION    INFO   '
*  THESE ROUTINES ARE DISTRIBUTED BY THE CA TECHNOLOGIES STAFF
*  "AS IS".  NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS MADE
*  FOR THEM.  CA TECHNOLOGIES CANNOT GUARANTEE THAT THE ROUTINES
*  ARE ERROR FREE, OR THAT IF ERRORS ARE FOUND, THEY WILL BE
*  CORRECTED.
*
*  /* WRITTEN BY DAN WALTHER */
***********************************************************************
*   DESCRIPTION: THIS SAMPLE PROGRAM ISSUES REQUESTS TO THE
*                ENDEVOR API TO EXTRACT ENDEVOR Destination     INFO.
*
*   HOW TO USE:  PASS THE destination  IN THE PARM WITH THE PROGRAM
*                CALL.
*          EXAMPLE:
*                EXEC PGM=NDVRC1,
*                PARM='CONCALL,DDN:STEPLIB,APIALDST,<destid>'
*
*   REGISTER USAGE:
*                R2     -> SAVE RETURN CODE
*                R3     -> SAVE REASON CODE
*                R12    -> BASE PROGRAM
*                R13    -> STANDARD USAGE........
*                R15    -> RETURN CODE FROM CALL
*   ==>                 -> WE USE STANDARD STACK SAVEAREA USAGE
*
***********************************************************************
*   WORKAREA
***********************************************************************
WORKAREA DSECT
SAVEAREA DS    18F
WPARMLST DS    4F                      PARAMETER LIST
WCNT     DS    H                       ACTION COUNTER
         DS    0D
***********************************************************************
* API CONTROL BLOCK
** CAPRD.SIQ7006.SOURCE(ENHALPKG)
***********************************************************************
         ENHAACTL DSECT=NO
***********************************************************************
* API ACTION REQUEST BLOCKS
***********************************************************************
         ENHALDST DSECT=NO
WORKLN   EQU   *-WORKAREA
***********************************************************************
*   REQISTER EQUATES
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
APIALDST CSECT
APIALDST AMODE 31
APIALDST RMODE ANY
***********************************************************************
*   HOUSEKEEPING
***********************************************************************
         SAVE  (14,12)                 SAVE CALLERS REG 12(13)
         LR    R12,R15                 POINT TO THIS PROGRAM
        USING APIALDST,R12
***********************************************************************
*   VALIDATE PARM LEN
***********************************************************************
*
         L     R6,0(,R1)
         LA    R6,2(,R6)               POINT TO package id in parm
*
***********************************************************************
*   GET STORAGE FOR WORKAREA
***********************************************************************
         L     R0,=A(WORKLN)           GET SIZE OF W.A
         GETMAIN R,LV=(0)              GET WORKING STORAGE
         ST    R1,8(R13)               STORE NEW STACK +8(OLD)
         ST    R13,4(R1)               STORE OLD STACK +4(NEW)
         LR    R13,R1                  POINT R13 TO OUR STACK
        USING SAVEAREA,R13             ESTABLISH ADDRESSIBILIY
         SPACE ,
************************************************************
*        INITIALIZE AND POPULATE THE CONTROL STRUCTURE
*        NOTE: IF ANY INVENTORY MANAGEMENT MESSAGES ARE ISSUED, THEY
*        ARE WRITTEN TO THE MSG DATA SET. THE OUTPUT FROM THIS REQUEST
*        IS WRITTEN TO THE LIST DATA SET.
************************************************************
*
XSCL000  DS    0H
************************************************************
*        INITIALIZE AND POPULATE THE REQUEST STRUCTURE
************************************************************
*
         API$INIT STG=AACTL,BLOCK=AACTL
         API$INIT STG=ALDST_RQ,BLOCK=ALDST_RQ
         API$INIT STG=ALDST_RS,BLOCK=ALDST_RS
*
         MVC   AACTL_MSG_DDN(8),=C'APIMSGS '
         MVC   AACTL_LIST_DDN(8),=C'APILIST '
*
         MVI   ALDST_RQ_DESTID,C' '     Blank out dest name
         MVC   ALDST_RQ_DESTID+1(6),ALDST_RQ_DESTID      "
         MVC   ALDST_RQ_DESTID(7),0(R6) Move Dest name  to request
*
************************************************************
*        BUILD PARMLIST
************************************************************
         LA    R1,WPARMLST
         LA    R14,AACTL
         ST    R14,0(0,R1)
         LA    R14,ALDST_RQ
         ST    R14,4(0,R1)
         LA    R14,ALDST_RS
         ST    R14,8(0,R1)
         OI    8(R1),X'80'
************************************************************
*
*        CALL THE ENDEVOR API INTERFACE PROGRAM
************************************************************
XCALLAPI DS    0H
         L     R15,=V(ENA$NDVR)
         BALR  R14,R15
         LR    R2,R15                    HOLD ONTO THE RETURN CODE
         LR    R3,R0                     HOLD ONTO THE REASON CODE
************************************************************
* SHUTDOWN THE API SERVER. ONLY THE AACTL BLOCK IS REQUIRED.
************************************************************
XSHUTDWN DS    0H
         API$INIT STG=AACTL,BLOCK=AACTL
         MVI   AACTL_SHUTDOWN,C'Y'
         LA    R1,WPARMLST
         LA    R14,AACTL
         ST    R14,0(0,R1)
         OI    0(R1),X'80'
         L     R15,=V(ENA$NDVR)
         BALR  R14,R15
***********************************************************************
* PROGRAM EXIT
***********************************************************************
         LR    R5,R13                  SAVE SAVEAREA ADDRESS
         L     R13,4(R13)              POINT TO PREVIOUS SAVEAREA
*   CLEAN UP THIS PROGRAM'S STORAGE
         L     R0,=A(WORKLN)                GET SIZE
         FREEMAIN R,A=(R5),LV=(R0)          FREE STORAGE
         LR    R15,R2                       SET RETURN CODE
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BSM   0,R14                        RETURN
         END
          
